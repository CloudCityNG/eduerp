<?php

function eduerp_menu() {

  $items['eduerp/error'] = array (
    'page callback' => 'eduerp_error_page',
    'access arguments' => array (
      'eduerp access'
    ),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/eduerp'] = array (
    'title' => 'EduERP Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array (
      'eduerp_admin_settings'
    ),
    'access arguments' => array (
      'administer site configuration'
    ),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function eduerp_perm() {
  return array (
    'eduerp access',
    'student register'
  );
}

/**
 * implements the simpletest testing framework hook
 * for more information see http://drupal.org/project/simpletest
 */
function eduerp_simpletest() {
  $module_name = "eduerp";
  $dir = drupal_get_path('module', $module_name) . "/tests";
  $tests = file_scan_directory($dir, '\.test$');
  return array_keys($tests);
}

/**
 * implements autoloading for class files
 * uses the Autoload module
 * http://drupal.org/project/autoload
 */
function eduerp_autoload_info() {
  $class_path = __DIR__.DIRECTORY_SEPARATOR."lib";

  return array(
    'Student' => array (
      'file' => 'lib/Student.class.php',
    ),
  );
}

function eduerp_accomodation_types() {

  $r = db_query("select * from accomodation_types order by name ");
  $accomodation = array ();
  $accomodation[] = 'Accomodation Type';
  while ($f = db_fetch_object($r)) {
    $accomodation[$f->id] = $f->name;
  }

  return $accomodation;
}

function eduerp_lga() {
  static $ritles;
  if (!$titles) {
    $titles[0] = '';
    $r = db_query("select * from lga order by lga_name");
    while ($f = db_fetch_object($r))
      $titles[$f->lga_id] = $f->lga_name;
  }
  return $titles;
}
function eduerp_table_head($str, $head) {
 ;
}
function eduerp_states($state_id = 0) {
  static $ritles;
  if (!$titles) {
    $titles[0] = '';
    $r = db_query("select * from state order by state_name");
    while ($f = db_fetch_object($r))
      $titles[$f->state_id] = $f->state_name;
  }
  return ($state_id) ? $titles[$state_id] : $titles;

}
function eduerp_admin_settings() {

  $form['eduerp_demo'] = array (
    '#title' => 'Demo Mode',
    '#description' => 'Payment in demo mode',
    '#type' => 'checkbox',
    '#default_value' => variable_get('eduerp_demo', 1)
  );
  $form['eduerp_terminal_id'] = array (
    '#type' => 'textfield',
    '#title' => 'Terminal ID',
    '#description' => 'Payment Terminal ID,0000000001 for demo',
    '#default_value' => variable_get('eduerp_terminal_id', '0000000001')
  );
  $form['eduerp_lot_cost'] = array (
    '#type' => 'textfield',
    '#title' => 'Cost of Lot',
    '#description' => 'Every lot selected cost $ xxx',
    '#default_value' => variable_get('eduerp_lot_cost', '10000')
  );
  $form['eduerp_student_regfees'] = array (
    '#type' => 'textfield',
    '#title' => 'Student Registration Fees',
    '#default_value' => variable_get('eduerp_student_regfees', '100')
  );
  $form['eduerp_logo'] = array (
    '#type' => 'textfield',
    '#title' => 'logo image',
    '#description' => 'logo Used for sending mails.logo to be ftpd  and stored . enter the relative url from which the image is accessed.eg. http://yourdrupalinstallation/images/logo.png then enter here images/logo.png  ',
    '#default_value' => variable_get('eduerp_logo', '')
  );
  $form['eduerp_tender_node'] = array (
    '#type' => 'textfield',
    '#size' => 6,
    '#title' => 'Tender Node ID',
    '#description' => 'You must create this node where tender documents are stored. it is the tender link.input its id here.if you leave it blank contractors will get error when trying to access the tender link',
    '#default_value' => variable_get('eduerp_tender_node', '')
  );
  $form['eduerp_lot_upload_cost'] = array (
    '#type' => 'textfield',
    '#size' => 6,
    '#title' => 'Tender Upload cost',
    '#default_value' => variable_get('eduerp_lot_upload_cost', 1000)
  );
  $form['eduerp_tender_adminuser'] = array (
    '#type' => 'textfield',
    '#size' => 25,
    '#title' => 'Tender Admin Username',
    '#default_value' => variable_get('eduerp_tender_adminuser', '')
  );

  $form['RegisterAllCoursesatStartofSession'] = array(
    '#type' => 'checkbox',
    '#title' => 'Register All Courses at Start of Session',
    '#default_value' => variable_get('RegisterAllCoursesatStartofSession', 0),
    '#description' => 'This switch determines whether students register courses for both semesters at the start of the first semester',
    '#tree' => TRUE
  );

  $form['RegistrarApprovesGrades'] = array(
    '#type' => 'checkbox',
    '#title' => 'RegistrarApprovesGrades',
    '#default_value' => variable_get('RegistrarApprovesGrades', 0),
    '#description' => 'This switch determines whether student grades are approved by the Registrar (if not they go straight to the Vice Chancellor)',
    '#tree' => TRUE
  );

  $form['eduerp_bursars_email'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#title' => "Bursar's Email Address",
    '#default_value' => variable_get('eduerp_bursars_email', '')
  );

  return system_settings_form($form);
}

function eduerp_validuser($name, $email) {

  if (db_result(db_query("SELECT COUNT(*) FROM {users} WHERE LOWER(name) = LOWER('%s')", $name)) > 0) {
    form_set_error('mail', t('The e-mail address %email is already registered.', array (
      '%email' => $email
    )));

    return false;
  } elseif (drupal_is_denied('user', $name)) {
      form_set_error('mail', t('The e-mail address %email has been denied access.', array (
        '%email' => $email
      )));
      return false;
    }
  if ($error = user_validate_mail($email)) {
    form_set_error('mail', $error);
    return false;
  } elseif (db_result(db_query("SELECT COUNT(*) FROM {users} WHERE  LOWER(mail) = LOWER('%s')", $email)) > 0) {
      form_set_error('mail', t('The e-mail address %email is already registered.', array (
        '%email' => $email
      )));
      return false;
    } elseif (drupal_is_denied('mail', $email)) {
        form_set_error('mail', t('The e-mail address %email has been denied access.', array (
          '%email' => $email
        )));
        return false;
      }
  return true;

}
function eduerp_insert_contractor($val, $uid) {
  $id = $uid;

}
function eduerp_user_save($type, $mail, $transid) {
  /*
  $data=$_SESSION[eduerp_data];
  if(!is_array($data)){
  watchdog('error','Session data lost for transactionID '.$transid,WATCHDOG_ERROR);
  drupal_goto(url('veritus/error'));

  }
  */

  if ($type == 'creg') {
    $rolename = 'Contractor';
  } elseif ($type == 'sreg') {
      $rolename = 'Applicant';
    } else
      return;
  $name = $mail;
  $roles = array ();
  $f = db_query("select * from {role} where name='%s'", $rolename);
  $roles = array ();
  $f = db_fetch_object($f);
  if ($f->rid) {
    $roles[$f->rid] = $f->rid;
  }
  $pass = user_password();
  $data = array (
    'status' => 1,
    'name' => $name,
    'mail' => $mail,
    'pass' => $pass,
    'init' => $mail,
    'roles' => $roles
  );
  $acc = user_save('', $data);
  if (!$acc) {
    watchdog('error', 'New user creation failed for ' . $name . ' ,' . $mail . ' ,' . $rolename, WATCHDOG_ERROR);
    drupal_goto('veritus/error');
    return;
  }
  $acc->password = $pass;
  $pass2 = uniqid();
  db_query("update transaction set user_type_id=%d,username='%s' ,password_2='%s' where receipt_no='%s'", $acc->uid, $acc->name, $pass2, $transid);
  // For now disable mail notifications
	//_user_mail_notify('register_no_approval_required', $acc);
  user_authenticate($data);
  return $acc;
}

function _eduerp_insert_student($val, $uid) {
	;
}

function eduerp_error_page() {

  return t('A error occurred in processing your request. Please contact the admin');
}

function eduerp_mail($key, & $message, $params) {
  /*
  $message[headers] +=
  array( 'MIME-Version'  => '1.0',
    'Content-Type'  => 'text/html; charset=UTF-8');
  */
  ;
}

function eduerp_check_upload($source) {
  global $user;
  static $upload_cache;

  // Add in our check of the the file name length.
  $validators['file_validate_name_length'] = array ();

  // Return cached objects without processing since the file will have
  // already been processed and the paths in _FILES will be invalid.
  if (isset ($upload_cache[$source])) {
    return $upload_cache[$source];
  }

  // If a file was uploaded, process it.
  if (isset ($_FILES['files']) && $_FILES['files']['name'][$source] && is_uploaded_file($_FILES['files']['tmp_name'][$source])) {
    // Check for file upload errors and return FALSE if a
    // lower level system error occurred.
    switch ($_FILES['files']['error'][$source]) {
      // @see http://php.net/manual/en/features.file-upload.errors.php
      case UPLOAD_ERR_OK :
        $file = new stdClass();
        $file->filename = file_munge_filename(trim(basename($_FILES['files']['name'][$source]), '.'), $extensions);
        $file->filepath = $_FILES['files']['tmp_name'][$source];
        $file->filemime = $_FILES['files']['type'][$source];

        // Rename potentially executable files, to help prevent exploits.
        if (preg_match('/\.(php|pl|py|cgi|asp|js)$/i', $file->filename) && (substr($file->filename, -4) != '.txt')) {
          $file->filemime = 'text/plain';
          $file->filepath .= '.txt';
          $file->filename .= '.txt';
        }
        $file->source = $source;
        $file->destination = file_destination(file_create_path($dest . '/' . $file->filename), $replace);
        $file->filesize = $_FILES['files']['size'][$source];
        $extensions = 'jpg jpeg gif png txt html doc xls pdf ppt pps odt ods odp ZIP zip csv';
        $errors = file_validate_name_length($file);
        if (count($errors)) {
          return implode(",", $errors);
          drupal_set_message(t('The file %file could not be saved,Error %error', array (
            '%file' => $source,
            '%error' => $errors
          )));
        }
        $errors = file_validate_extensions($file, $extensions);
        if (count($errors)) {
          drupal_set_message(t('The file %file could not be saved,Error %error', array (
            '%file' => $source,
            '%error' => $errors
          )));
          return implode(",", $errors);
        }

        $errors = file_validate_size($file, variable_get('eduerp_file_size', 1000000));
        if (count($errors)) {
          drupal_set_message(t('The file %file could not be saved,Error %error', array (
            '%file' => $source,
            '%error' => $errors
          )));
          return implode(",", $errors);
        }

        return 0;

      case UPLOAD_ERR_INI_SIZE :
      case UPLOAD_ERR_FORM_SIZE :
        drupal_set_message(t('The file %file could not be saved, because it exceeds %maxsize, the maximum allowed size for uploads.', array (
          '%file' => $source,
          '%maxsize' => format_size(file_upload_max_size())
        )), 'error');
        return 1;

      case UPLOAD_ERR_PARTIAL :
      case UPLOAD_ERR_NO_FILE :
        drupal_set_message(t('The file %file could not be saved, because the upload did not complete.', array (
          '%file' => $source
        )), 'error');
        return 1;

        // Unknown error
      default :
        drupal_set_message(t('The file %file could not be saved. An unknown error has occurred.', array (
          '%file' => $source
        )), 'error');
        return 1;
    }
  }
  drupal_set_message(t('The file %file could not be saved. An unknown error has occurred.', array (
    '%file' => $source
  )), 'error');
  return 1;
}

function _assign_keys(& $form, $state) {
  foreach ($form as $key => & $val) {
    if (is_array($val) && !((array_key_exists('#type', $val) && !in_array($val['#type'], array (
        'fieldset',
        'markup',
        'item'
      ))) || array_key_exists('#value', $val))) {
      //			echo "for key ".$key."<br/>";
      _assign_keys($val, $state);
    } elseif (is_array($val) && array_key_exists('#type', $val) && !in_array($val['#type'], array (
          'fieldset',
          'markup',
          'item'
        )) && $state[$key]) {
        $val['#default_value'] = $state[$key];
      }
  }
}
function _eduerp_titles() {
  // We should be looking at replacing the functionality in this function
  // it's not necessary to store titles in a database.
  static $ritles;
  if (!$titles) {
    $r = db_query("select * from title order by title_name");
    while ($f = db_fetch_object($r))
      $titles[$f->title_id] = $f->title_name;
  }
  return $titles;

}
function _eduerp_country() {
  static $ritles;
  if (!$titles) {
    $r = db_query("select * from country order by country_name");
    while ($f = db_fetch_object($r))
      $titles[$f->country_id] = $f->country_name;
  }
  return $titles;

}
function _eduerp_religion() {
  static $ritles;
  if (!$titles) {
    $titles = array ();
    $r = db_query("select * from religion ");
    while ($f = db_fetch_object($r)) {
      $titles[$f->relegion_id] = $f->religion_name;
    }
    ///$titles= array('christianity'=>'Christianity','islam'=>'Islam','traditional'=>'Traditional','other'=>'Other');
  }
  return $titles;

}

function eduerp_elements() {
  return array (
    'ccdt' => array (
      '#input' => true,
      '#process' => array (
        'expand_ccdt'
      )
    )
  );
}

function expand_ccdt($element) {
  $options = drupal_map_assoc(range(1, 12), 'map_month');
  if (empty ($element['#value'])) {
  }
  $element['#tree'] = TRUE;
  $element[em] = array (
    '#type' => 'select',
    '#value' => $element['#value'][em],
    '#attributes' => $element['#attributes'],
    '#options' => $options,


  );

  $options = drupal_map_assoc(range(2008, 2012));
  if ($element['#ccdt_attribute'])
    $options = drupal_map_assoc(range($element['#ccdt_attribute'][0], $element['#ccdt_attribute'][1]));

  $element[ey] = array (
    '#type' => 'select',
    '#value' => $element['#value'][ey],
    '#attributes' => $element['#attributes'],
    '#options' => $options,


  );

  return $element;
}

function theme_ccdt($element) {

  return theme('form_element', $element, '<div class="container-inline">' . $element['#children'] . '</div>');
}

function eduerp_theme() {

  return array (
    'ccdt' => array (
      'arguments' => array (
        'element' => NULL
      )
    ),


  );
}

function eduerp_st_form() {
  $form['#title'] = 'CSV File upload form';
  $form[] = array (
    '#value' => "File name should be *.csv, the narrative field should not contain any ,"
  );
  $form['#attributes'] = array (
    'enctype' => "multipart/form-data"
  );
  $form['payfile'] = array (
    '#type' => 'file'
  );
  $form['submit'] = array (
    '#type' => 'submit',
    '#value' => 'Submit'
  );
  return $form;
}
function eduerp_st_form_validate($form, & $form_state) {

  $f = eduerp_check_upload("payfile");
  if ($f) {
    form_set_error('payfile', 'Sorry file cannot be uploaded. Please try again ' . $f);
    return;
  }

}
function eduerp_st_form_submit($form, & $form_state) {

  $d = $n = 0;

  $fx = fopen($_FILES['files']['tmp_name']['payfile'], 'r');
  if (!$fx) {
    echo 'file not open';
  }
  $i = 0;
  while ($arr = fgetcsv($fx, null, ',')) {
    if (count($arr) > 7) {
      drupal_set_message("line number " . ($i) . " in the csv file contain " . count($arr) . " fields.");
      return;
    }

    $arr[3] = str_replace(",", '', $arr[3]);
    $arr[4] = str_replace(",", '', $arr[4]);
    if (!is_numeric($arr[4])) {
      continue;
    }
    $r = db_query("select * from payment where refno='%s'", $arr[1]);
    $s = db_fetch_object($r);
    if ($s->refno) {
      $d++;
      continue;
    }
    $n++;
    $barr = array ();

    $barr[0] = $arr[0];
    $barr[1] = $arr[1];
    $barr[2] = $arr[6];
    $barr[3] = $arr[2];
    $barr[4] = $arr[3];
    $barr[5] = $arr[4];
    $barr[6] = 0;
    $sql = "insert into payment values ('" .
    implode("','", $barr) . "')";
    $f = db_query($sql);
    if (db_error()) {
      drupal_set_message('dberror in line ' . $i);
      return;
    }
  }
  drupal_set_message(" inserted  $n new record(s) ");
}

/**
 * loads a user's profile for reading and modification
 * @param int $uid specifies the user id of the profile to load
 * @param string $profile_type (optional) specifies the actual
 *  profile type to load
 * @return object returns the profile node or false if there's none
 */
function eduerp_load_profile($uid, $profile_type = 'profile') {
  if ($node = node_load(array('type' => $profile_type, 'uid' => $uid))) {
    return $node;
  } else {
    return false;
  }
}

/**
 * saves a user profile node - nothing fanciful just a wrapper
 *
 * @param object $node
 * @return void since the node_save api function doesn't return
 *  any status, we cannot return one.
 */
function eduerp_save_profile($node) {
  node_save($node);
}

/**
 * class definition for User profiles
 * @var int $uid stores the userid that is being used to retrieve the profile nodes
 * @var array $field_map field map is used to store the node/field mapping
 * @var array $profile_nodes stores the node objects used as content profiles for the user
 */
class UserProfile {
  var $uid;
  var $field_map = array();
  var $profile_nodes = array();

  /**
   * class constructor - instantiates the object
   * and loads necessary nodes.
   * @var int $uid User id for the user
   * @return object
   */
  function __construct($uid) {
    $this->uid = $uid;

    // obtain all content profile types and use that to map
    // the fields to the object.
    $content_profiles = content_profile_get_types('names');

    // after obtainining the content profile types, we'll retrieve
    // those that have been defined for this user.
    foreach ($content_profiles as $content_profile => $content_profile_name) {
      if ($node = eduerp_load_profile($this->uid, $content_profile)) {
        $this->profile_nodes[$content_profile] = $node;
      }
    }

    $this->_hydrate_fields();
  }

  /**
   * _hydrate_fields - loads fields from the content profile nodes
   * @return void
   */
  private function _hydrate_fields() {
    foreach ($this->profile_nodes as $node) {
      // obtain visible properties for nodes and set them
      // it sets $this->profile_first_name = $node->field_profile_first_name
      // for instance (supports only native type and nodereference
      // field types)
      // TODO: add support for other node field types
      foreach ($node as $key => $value) {
        if (preg_match('/^field\_(.*)/', $key, $matches)) {
          $node_value = $node->$key;

          // check the existence of readable values
          if (is_array($node_value) && is_array($node_value[0]) && array_key_exists('value', $node_value[0])) {
            $this->$matches[1] = $node_value[0]['value'];
            $this->field_map[$matches[1]] = $node->type;
          } elseif (is_array($node_value) && is_array($node_value[0])  && array_key_exists('nid', $node_value[0])) {
            $this->$matches[1] = $node_value[0]['nid'];
            $this->field_map[$matches[1]] = $node->type;
          }
        }
      }
    }
  }

  /**
   * this method saves all the attached content profile nodes
   * @return void
   */
  public function save() {
    // iterate through all the profile fields and store
    // their values in the respective nodes
    foreach ($this as $key => $value) {
      if (isset($this->field_map[$key])) {
        $node_field_name = 'field_' . $key;
        // must be returned as a reference if not
        // it will not be saved.
        $node_field =& $this->profile_nodes[$this->field_map[$key]]->$node_field_name;
        if (array_key_exists('value', $node_field[0])) {
          $node_field[0]['value'] = $value;
        } elseif (array_key_exists('nid', $node_field[0])) {
          $node_field[0]['nid'] = $value;
        }
      }
    }
    foreach ($this->profile_nodes as $node) {
      node_save($node);
    }
  }
}
?>
