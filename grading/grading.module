<?php

/**
 *  Implementation of hook_perm().
 */
function grading_perm() {
  $perms = array();

  // foreach (content_fields() as $field) {
  //   $perms[] = 'edit '. $field['field_name'];
  //   // $perms[] = 'view '. $field['field_name'];
  // }

  $perms[] = 'view grading';
  $perms[] = 'view my grades';

  return $perms;
}


function grading_menu() {
  $items = array();

  $items['grading/viewgrades'] = array(
    'title' => 'View Course Grades',
    'page callback' => 'drupal_goto',
    'page arguments' => array('course'),
    'access arguments' => array('view grading'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['grading/viewgpa'] = array(
    'title' => 'View Programme GPAs',
    'page callback' => 'drupal_goto',
    'page arguments' => array('gpa'),
    'access arguments' => array('view grading'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['grading/viewmygrades'] = array(
    'title' => 'View My Grades',
    'page callback' => 'drupal_goto',
    'page arguments' => array('student'),
    'access arguments' => array('view my grades'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['grading/stats'] = array(
    'title'=>'Grading Departmental Stats',
    'page callback' => 'drupal_get_form',
    'page arguments'=> array('grading_stats_department_form'),
    'access arguments' => array('view grading'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['grading/ahahstats'] = array(
    'page callback' => '_grading_ahah_stats',
    'access arguments' => array('view grading'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implementation of hook_field_access().
 *
 * @see content_access().
 */
function grading_field_access($op, $field, $account, $node = NULL) {
  global $user;
  static $locked = array(); // Cache

  if (is_null($account)) {
    $account = $user;
  }

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  switch ($op) {
    case 'view':
      return user_access('view grading', $account); // ALL content types are treated as grading, if more are added these can be differentiated later
      // return user_access($op .' '. $field['field_name'], $account);
      // return TRUE; // Normal access control determines whether all the content can be viewed or not

    case 'edit':
      $editablegradingfields = array('field_ca1' => 1, 'field_ca2' => 1, 'field_ca3' => 1, 'field_ca4' => 1, 'field_exam_score' => 1, 'field_comment_grades' => 1);
      if (empty($editablegradingfields[$field['field_name']])) {
		return FALSE; // No fields are editable except above ones
        // return user_access($op .' '. $field['field_name'], $account);
      }

      if (empty($node)) return FALSE;

      if (empty($locked)) { // Not cached...
        // Retrieve the locked indicators for all fields for any student_grades in a course that has the current user as a lecturer.
        // (After a number of years this could get big?)
        // Another assumption made here is that none of the fields are reused in other tables so that Drupal will not store them in dedicated tables!
        $sql = "SELECT sg.nid, field_ca1locked_value AS field_ca1, field_ca2locked_value AS field_ca2, field_ca3locked_value AS field_ca3, field_ca4locked_value AS field_ca4, field_examscorelocked_value AS field_exam_score
          FROM {content_type_student_grades} sg, {content_type_course_instance} ci
          WHERE sg.field_course_instance_nid=ci.nid AND (ci.field_lecturer_uid={$account->uid} OR ci.field_lecturer_alternate_uid={$account->uid})";

        $result = db_query($sql);

        while ($row = db_fetch_array($result)) {
          $locked[$row['nid']] = $row;
        }
      }

      if ($field['field_name'] === 'field_comment_grades') $field['field_name'] = 'field_exam_score'; // Assume comment should not be edited if the exam_score is locked

      // Check if this student_grades is owned by this lecturer
      if (empty($locked[$node->nid])) return FALSE;

      // Check if this lock is empty
      if (empty($locked[$node->nid][$field['field_name']])) return TRUE;
      return FALSE;
   }
  return TRUE;
}


function grading_stats_department_form(&$obj) {
  $form['department'] = array(
    '#type' => 'select',
    '#default_value' => 'Arts and Theology ',
    '#options' => _grading_department_list(),
    '#title' => 'Department',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstats',
      'wrapper' => 'stats_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['session'] = array(
    '#type' => 'select',
    '#default_value' => '2008/2009',
    '#options' => _grading_session_list(),
    '#title' => 'Session',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstats',
      'wrapper' => 'stats_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['semester'] = array(
    '#type' => 'select',
    '#default_value' => '1',
    '#options' => _grading_semester_list(),
    '#title' => 'Semester',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstats',
      'wrapper' => 'stats_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['level'] = array(
    '#type' => 'select',
    '#default_value' => '100',
    '#options' => _grading_level_list(),
    '#title' => 'Level',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstats',
      'wrapper' => 'stats_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['updatebutton'] = array(
	'#type' => 'button',
    '#value' => 'Update the Statistics',
    '#ahah' => array(
      'path'    => 'grading/ahahstats',
      'wrapper' => 'stats_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      )
    );

  $form['statshere'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="stats_here">',
    '#value' => ' ',
    '#suffix' => '</div>',
    );

//link to approval page

  return $form;
}


function _grading_department_list() {
  $names = array();
  $sql = "SELECT DISTINCT field_department_name_value AS name FROM {content_type_program} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[] = $row->name;
  }
  return $names;
}


function _grading_session_list() {
  $names = array();
  $sql = "SELECT DISTINCT field_sess_name_value AS name FROM {content_type_course_instance} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[] = $row->name;
  }
  return $names;
}


function _grading_semester_list() {
  $names = array();
  $sql = "SELECT DISTINCT field_semester_name_value AS name FROM {content_type_course_instance} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[] = $row->name;
  }
  return $names;
}


function _grading_level_list() {
  $names = array();
  $sql = "SELECT DISTINCT field_level_name_value AS name FROM {content_type_course_instance} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[] = $row->name;
  }
  return $names;
}


function grading_stats_department_form_submit($form, &$state) {
  drupal_set_message('department: ' . $state['values']['department'] . '<br />');
}


function _grading_ahah_stats() {
  global $user;
  global $base_url;

  $department = $_POST['department'];
  $level      = $_POST['level'];
  $session    = $_POST['session'];
  $semester   = $_POST['semester'];

  // Display statistics on exams completed
  $sql = "SELECT
    COUNT(*) AS number_students,
    SUM(fully) AS sumfully,
    SUM(part) AS sumpart,
    SUM(none) AS sumnone,
    MIN(ca1l) AS ca1locked,
    MIN(ca2l) AS ca2locked,
    MIN(ca3l) AS ca3locked,
    MIN(ca4l) AS ca4locked,
    MIN(examl) AS examlocked
  FROM
    (
      SELECT
        BIT_AND(sg.field_exam_score_value > 0) AS fully,
        BIT_OR(sg.field_exam_score_value > 0) AS part,
        BIT_AND(sg.field_exam_score_value = 0) AS none,
        MIN(sg.field_ca1locked_value) AS ca1l,
        MIN(sg.field_ca2locked_value) AS ca2l,
        MIN(sg.field_ca3locked_value) AS ca3l,
        MIN(sg.field_ca4locked_value) AS ca4l,
        MIN(sg.field_examscorelocked_value) AS examl
      FROM {content_type_student_grades} sg, {content_type_student_gpa} gpa, {content_type_program} p
      WHERE
        sg.field_student_gpa_nid=gpa.nid AND
        gpa.field_level_name_gpa_value='%s' AND
        gpa.field_sess_name_gpa_value='%s' AND
        gpa.field_semester_name_gpa_value='%s' AND
        gpa.field_program_ref_gpa_nid=p.nid AND
        p.field_department_name_value='%s'
      GROUP BY sg.field_mat_no_uid
    ) AS eachstudent";

  $summaryrows = db_query($sql, $level, $session, $semester, $department);
  $summaryrow = db_fetch_object($summaryrows);

  $output = '<table class="body-table"><tbody>';
  $output .= '<tr><th valign="top" class="table-label" colspan="2">DEPARTMENTAL SUMMARY RESULTS</th></tr>';

  $output .= '<tr>';
  $output .= '<td valign="top" class="table-label">Total No. of Registered Students</td>';
  $output .= '<td valign="top">' . $summaryrow->number_students . '</td>';
  $output .= '</tr>';

  $output .= '<tr>';
  $output .= '<td valign="top" class="table-label">No. of Students that Completed Exams</td>';
  $output .= '<td valign="top">' . $summaryrow->sumfully . '</td>';
  $output .= '</tr>';

  $output .= '<tr>';
  $output .= '<td valign="top" class="table-label">No. of Students that Partially Completed Exams</td>';
  $output .= '<td valign="top">' . ($summaryrow->sumpart - $summaryrow->sumfully) . '</td>';
  $output .= '</tr>';

  $output .= '<tr>';
  $output .= '<td valign="top" class="table-label">Number of Absent Students</td>';
  $output .= '<td valign="top">' . $summaryrow->sumnone . '</td>';
  $output .= '</tr>';

  $sql = "SELECT DISTINCT p.field_programme_name AS programme
    FROM {content_type_student_gpa} gpa, {content_type_program} p
    WHERE
      gpa.field_level_name_gpa_value='%s' AND
      gpa.field_sess_name_gpa_value='%s' AND
      gpa.field_semester_name_gpa_value='%s' AND
      gpa.field_program_ref_gpa_nid=p.nid AND
      p.field_department_name_value='%s' ORDER BY programme ASC";
  $programmerows = db_query($sql, $level, $session, $semester, $department);
  if (!empty($programmerows)) {
    $output .= '<tr><td colspan="2">View Programme Details...</td></tr>';

    while ($programmerow = db_fetch_object($programmerows)) {
      $output .= '<tr><td colspan="2"><a href="' . $base_url . rawurlencode("gpa?programme={$programmerow->programme}&level={$level}&session={$session}&semester={$semester}") . '">$programme</a></td></tr>';
    }
  }

  $output .= '<tr><td colspan="2"></td></tr>';
  $output .= '</tbody></table>';

  print drupal_to_js(array('data' => $output, 'status' => true));

  exit();
}
?>