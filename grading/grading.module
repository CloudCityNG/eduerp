<?php

/**
 *  Implementation of hook_perm().
 */
function grading_perm() {
  $perms = array();

  // foreach (content_fields() as $field) {
  //   $perms[] = 'edit '. $field['field_name'];
  //   // $perms[] = 'view '. $field['field_name'];
  // }

  $perms[] = 'view grading';
  $perms[] = 'view my grades';

  return $perms;
}


function grading_menu() {
  $items = array();

  $items['grading/viewgrades'] = array(
    'title' => 'View Course Grades',
    'page callback' => 'drupal_goto',
    'page arguments' => array('course'),
    'access arguments' => array('view grading'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['grading/viewgpa'] = array(
    'title' => 'View Programme GPAs',
    'page callback' => 'drupal_goto',
    'page arguments' => array('gpa'),
    'access arguments' => array('view grading'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['grading/viewmygrades'] = array(
    'title' => 'View My Grades',
    'page callback' => 'drupal_goto',
    'page arguments' => array('student'),
    'access arguments' => array('view my grades'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['grading/stats'] = array(
    'title'=>'Grading Departmental Stats',
    'page callback' => 'drupal_get_form',
    'page arguments'=> array('grading_stats_department_form'),
    'access arguments' => array('view grading'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['grading/ahahstats'] = array(
    'page callback' => '_grading_ahah_stats',
    'access arguments' => array('view grading'),
    'type' => MENU_CALLBACK,
  );

  $items['grading/statsuni'] = array(
    'title'=>'Grading University Stats',
    'page callback' => 'drupal_get_form',
    'page arguments'=> array('grading_stats_uni_form'),
    'access arguments' => array('view grading'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['grading/ahahstatsuni'] = array(
    'page callback' => '_grading_ahah_stats_uni',
    'access arguments' => array('view grading'),
    'type' => MENU_CALLBACK,
  );

  $items['grading/eduerpdeanapprovalform'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('approve_grades_dean_form'),
    'access arguments' => array('view grading'),
    'type' => MENU_CALLBACK,
  );

  $items['grading/eduerpregistrarapprovalform'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('approve_grades_registrar_form'),
    'access arguments' => array('view grading'),
    'type' => MENU_CALLBACK,
  );

  $items['grading/eduerpvcapprovalform'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('approve_grades_vc_form'),
    'access arguments' => array('view grading'),
    'type' => MENU_CALLBACK,
  );

  $items['grading/studentdetails'] = array(
    'title'=>'Grading Student Details',
    'page callback' => 'drupal_get_form',
    'page arguments'=> array('grading_student_details_form'),
    'access arguments' => array('view grading'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['grading/ahahstudentdetails'] = array(
    'page callback' => '_grading_ahah_studentdetails',
    'access arguments' => array('view grading'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implementation of hook_field_access().
 *
 * @see content_access().
 */
function grading_field_access($op, $field, $account, $node = NULL) {
  global $user;
  static $locked = array(); // Cache
  static $sg_nids = array();
  static $gpa_nids = array();

  if (is_null($account)) {
    $account = $user;
  }

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  switch ($op) {
    case 'view':
      if (user_access('view grading', $account)) return TRUE; // ALL content types are treated as grading, if more are added these can be differentiated later

      if (empty($node)) return TRUE; // I belive this is for the headings

      // Allow these regardless
      $ci_fields = array('field_course_code', 'field_course_title', 'field_credit_load', 'field_sess_name', 'field_semester_name');
      if (in_array($field['field_name'], $ci_fields)) return TRUE;

      $sg_fields = array('field_ca1forstudent', 'field_ca2forstudent', 'field_ca3forstudent', 'field_ca4forstudent', 'field_examscoreforstudent', 'field_totalscoreforstudent', 'field_gradepointforstudent', 'field_gradeforstudent');
      if (in_array($field['field_name'], $sg_fields)) {
        if (empty($sg_nids)) { // Not cached...
          // Find content that is for this user (assuming they are a student)
          $sql = "SELECT nid FROM {content_type_student_grades} WHERE field_mat_no_uid=%d";
          $nids = db_query($sql, $account->uid);
          while ($nid = db_fetch_object($nids)) {
            $sg_nids[] = $nid->nid;
          }
        }
        if (!empty($node->nid) && in_array($node->nid, $sg_nids)) return TRUE;
      }

      $gpa_fields = array('field_gpaforstudent', 'field_cgpaforstudent');
      if (in_array($field['field_name'], $gpa_fields)) {
        if (empty($gpa_nids)) {
          $sql = "SELECT nid FROM {content_type_student_gpa} WHERE field_student_ref_gpa_uid=%d";
          $nids = db_query($sql, $account->uid);
          while ($nid = db_fetch_object($nids)) {
            $gpa_nids[] = $nid->nid;
          }
        }
        if (!empty($node->nid) && in_array($node->nid, $gpa_nids)) return TRUE;
      }

      return FALSE;
      // return user_access($op .' '. $field['field_name'], $account);
      // return TRUE; // Normal access control determines whether all the content can be viewed or not

    case 'edit':
      $editablegradingfields = array('field_ca1' => 1, 'field_ca2' => 1, 'field_ca3' => 1, 'field_ca4' => 1, 'field_exam_score' => 1, 'field_comment_grades' => 1);
      if (empty($editablegradingfields[$field['field_name']])) {
		return FALSE; // No fields are editable except above ones
        // return user_access($op .' '. $field['field_name'], $account);
      }

      if (empty($node)) return FALSE;

      if (empty($locked)) { // Not cached...
        // Retrieve the locked indicators for all fields for any student_grades in a course that has the current user as a lecturer.
        // (After a number of years this could get big?)
        // Another assumption made here is that none of the fields are reused in other tables so that Drupal will not store them in dedicated tables!
        $sql = "SELECT sg.nid, field_ca1locked_value AS field_ca1, field_ca2locked_value AS field_ca2, field_ca3locked_value AS field_ca3, field_ca4locked_value AS field_ca4, field_examscorelocked_value AS field_exam_score
          FROM {content_type_student_grades} sg, {content_type_course_instance} ci
          WHERE sg.field_course_instance_nid=ci.nid AND (ci.field_lecturer_uid={$account->uid} OR ci.field_lecturer_alternate_uid={$account->uid})";

        $result = db_query($sql);

        while ($row = db_fetch_array($result)) {
          $locked[$row['nid']] = $row;
        }
      }

      if ($field['field_name'] === 'field_comment_grades') $field['field_name'] = 'field_exam_score'; // Assume comment should not be edited if the exam_score is locked

      // Check if this student_grades is owned by this lecturer
      if (empty($locked[$node->nid])) return FALSE;

      // Check if this lock is empty
      if (empty($locked[$node->nid][$field['field_name']])) return TRUE;
      return FALSE;
   }
  return TRUE;
}


function grading_stats_department_form(&$obj) {
  $sql = "SELECT css.semester_id, s.sess_name FROM {current_session_semester} css, {session} s WHERE css.id=1 AND css.session_id=s.session_id";
  $css_rows = db_query($sql);
  $css_row = db_fetch_object($css_rows);
  $sessiondefault = $css_row->sess_name;
  $semesterdefault = $css_row->semester_id;

  if (!empty($_GET['department'])) $departmentdefault = stripslashes($_GET['department']);
  else $departmentdefault = 'Arts and Theology';

  if (!empty($_GET['session'])) $sessiondefault = stripslashes($_GET['session']);

  if (!empty($_GET['semester'])) $semesterdefault = stripslashes($_GET['semester']);

  if (!empty($_GET['level'])) $leveldefault = stripslashes($_GET['level']);
  else $leveldefault = '100';

  $form['department'] = array(
    '#type' => 'select',
    '#default_value' => $departmentdefault,
    '#options' => _grading_department_list(),
    '#title' => 'Department',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstats',
      'wrapper' => 'stats_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['session'] = array(
    '#type' => 'select',
    '#default_value' => $sessiondefault,
    '#options' => _grading_session_list(),
    '#title' => 'Session',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstats',
      'wrapper' => 'stats_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['semester'] = array(
    '#type' => 'select',
    '#default_value' => $semesterdefault,
    '#options' => _grading_semester_list(),
    '#title' => 'Semester',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstats',
      'wrapper' => 'stats_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['level'] = array(
    '#type' => 'select',
    '#default_value' => $leveldefault,
    '#options' => _grading_level_list(),
    '#title' => 'Level',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstats',
      'wrapper' => 'stats_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['updatebutton'] = array(
    '#type' => 'button',
    '#value' => 'Show Grade Statistics and Approval Status for above selection',
    '#ahah' => array(
      'path'    => 'grading/ahahstats',
      'wrapper' => 'stats_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      )
    );

  $form['statshere'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="stats_here">',
    '#value' => ' ',
    '#suffix' => '</div>',
    );

  return $form;
}


function _grading_college_list_any() {
  $names = array();
  $names['0'] = '<Any>';
  $sql = "SELECT DISTINCT field_college_name_value AS name FROM {content_type_program} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[$row->name] = $row->name;
  }
  return $names;
}


function _grading_department_list() {
  $names = array();
  $sql = "SELECT DISTINCT field_department_name_value AS name FROM {content_type_program} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[$row->name] = $row->name;
  }
  return $names;
}


function _grading_department_list_any() {
  $names = array();
  $names['0'] = '<Any>';
  $sql = "SELECT DISTINCT field_department_name_value AS name FROM {content_type_program} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[$row->name] = $row->name;
  }
  return $names;
}


function _grading_programme_list_any() {
  $names = array();
  $names['0'] = '<Any>';
  $sql = "SELECT DISTINCT field_programme_name_value AS name FROM {content_type_program} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[$row->name] = $row->name;
  }
  return $names;
}


function _grading_session_list() {
  $names = array();
  $sql = "SELECT DISTINCT field_sess_name_value AS name FROM {content_type_course_instance} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[$row->name] = $row->name;
  }
  return $names;
}


function _grading_semester_list() {
  $names = array();
  $sql = "SELECT DISTINCT field_semester_name_value AS name FROM {content_type_course_instance} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[$row->name] = $row->name;
  }
  return $names;
}


function _grading_level_list() {
  $names = array();
  $sql = "SELECT DISTINCT field_level_name_value AS name FROM {content_type_course_instance} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[$row->name] = $row->name;
  }
  return $names;
}


function _grading_level_list_any() {
  $names = array();
  $names['0'] = '<Any>';
  $sql = "SELECT DISTINCT field_level_name_value AS name FROM {content_type_course_instance} ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[$row->name] = $row->name;
  }
  return $names;
}


function grading_stats_department_form_submit($form, &$state) {
  drupal_set_message('department: ' . $state['values']['department'] . '<br />');
}


function _grading_ahah_stats() {
  global $user;
  global $base_url;

  $department = stripslashes($_POST['department']);
  $level      = stripslashes($_POST['level']);
  $session    = stripslashes($_POST['session']);
  $semester   = stripslashes($_POST['semester']);

  $departmentenc = rawurlencode($department);
  $sessionenc    = rawurlencode($session);

  // Display statistics on exams completed
  $sql = "SELECT
    COUNT(*) AS number_students,
    SUM(fully) AS sumfully,
    SUM(part) AS sumpart,
    SUM(none) AS sumnone,
    MIN(ca1l) AS ca1locked,
    MIN(ca2l) AS ca2locked,
    MIN(ca3l) AS ca3locked,
    MIN(ca4l) AS ca4locked,
    MIN(examl) AS examlocked
  FROM
    (
      SELECT
        BIT_AND(sg.field_exam_score_value > 0) AS fully,
        BIT_OR(sg.field_exam_score_value > 0) AS part,
        BIT_AND(sg.field_exam_score_value = 0) AS none,
        MIN(sg.field_ca1locked_value) AS ca1l,
        MIN(sg.field_ca2locked_value) AS ca2l,
        MIN(sg.field_ca3locked_value) AS ca3l,
        MIN(sg.field_ca4locked_value) AS ca4l,
        MIN(sg.field_examscorelocked_value) AS examl
      FROM {content_type_student_grades} sg, {content_type_student_gpa} gpa, {content_type_program} p
      WHERE
        sg.field_student_gpa_nid=gpa.nid AND
        gpa.field_level_name_gpa_value='%s' AND
        gpa.field_sess_name_gpa_value='%s' AND
        gpa.field_semester_name_gpa_value='%s' AND
        gpa.field_program_ref_gpa_nid=p.nid AND
        p.field_department_name_value='%s'
      GROUP BY sg.field_mat_no_uid
    ) AS eachstudent";

  $summaryrows = db_query($sql, $level, $session, $semester, $department);
  $summaryrow = db_fetch_object($summaryrows);

  $output = '<br /><table class="body-table"><tbody>';

  $output .= '<tr><th valign="top" class="table-label" colspan="2">DEPARTMENTAL SUMMARY RESULTS</th></tr>';

  $output .= '<tr>';
  $output .= '<td valign="top" class="table-label">Total No. of Registered Students</td>';
  $output .= '<td valign="top">' . $summaryrow->number_students . '</td>';
  $output .= '</tr>';

  $output .= '<tr>';
  $output .= '<td valign="top" class="table-label">No. of Students that Completed Exams</td>';
  $output .= '<td valign="top">' . $summaryrow->sumfully . '</td>';
  $output .= '</tr>';

  $output .= '<tr>';
  $output .= '<td valign="top" class="table-label">No. of Students that Partially Completed Exams</td>';
  $output .= '<td valign="top">' . ($summaryrow->sumpart - $summaryrow->sumfully) . '</td>';
  $output .= '</tr>';

  $output .= '<tr>';
  $output .= '<td valign="top" class="table-label">Number of Absent Students</td>';
  $output .= '<td valign="top">' . $summaryrow->sumnone . '</td>';
  $output .= '</tr>';

  $sql = "SELECT
      p.field_programme_name_value AS programme,
      MIN(sg.field_ca1locked_value) AS ca1l,
      MIN(sg.field_ca2locked_value) AS ca2l,
      MIN(sg.field_ca3locked_value) AS ca3l,
      MIN(sg.field_ca4locked_value) AS ca4l,
      MIN(sg.field_examscorelocked_value) AS examl
    FROM {content_type_student_grades sg}, {content_type_student_gpa} gpa, {content_type_program} p
    WHERE
      sg.field_student_gpa_nid=gpa.nid AND
      gpa.field_level_name_gpa_value='%s' AND
      gpa.field_sess_name_gpa_value='%s' AND
      gpa.field_semester_name_gpa_value='%s' AND
      gpa.field_program_ref_gpa_nid=p.nid AND
      p.field_department_name_value='%s'
    GROUP BY p.field_programme_name_value ORDER BY p.field_programme_name_value";
  $programmerows = db_query($sql, $level, $session, $semester, $department);
  $first = true;
  while ($programmerow = db_fetch_object($programmerows)) {
    if ($first) {
      $output .= '<tr><td colspan="2"><br /></td></tr>';
      $output .= '<tr><td colspan="2">View Programme Details...</td></tr>';
      $first = false;
    }
    $programmeenc = rawurlencode($programmerow->programme);
    $output .= '<tr>';
    $output .= '<td><a href="' . $base_url . "/gpa?programme={$programmeenc}&level={$level}&session={$sessionenc}&semester={$semester}" . '">' . $programmerow->programme . '</a></td><td>';
    if     ($programmerow->ca1l  == 1) $output .= 'Continuous Assessment 1 Ready for Approval by HOD';
    elseif ($programmerow->ca2l  == 1) $output .= 'Continuous Assessment 2 Ready for Approval by HOD';
    elseif ($programmerow->ca3l  == 1) $output .= 'Continuous Assessment 3 Ready for Approval by HOD';
    elseif ($programmerow->ca4l  == 1) $output .= 'Continuous Assessment 1 Ready for Approval by HOD';
    elseif ($programmerow->examl == 1) $output .= 'Semester Exam Ready for Approval by HOD';
    elseif ($programmerow->ca1l  == 0) $output .= 'Waiting on some Lecturer Approvals for Continuous Assessment 1';
    elseif ($programmerow->ca2l  == 0) $output .= 'Waiting on some Lecturer Approvals for Continuous Assessment 2';
    elseif ($programmerow->ca3l  == 0) $output .= 'Waiting on some Lecturer Approvals for Continuous Assessment 3';
    elseif ($programmerow->ca4l  == 0) $output .= 'Waiting on some Lecturer Approvals for Continuous Assessment 4';
    elseif ($programmerow->examl == 0) $output .= 'Waiting on some Lecturer Approvals for Semester Exam';
    else $output .= 'Approved by HOD';
    $output .= '</td></tr>';
  }

  $output .= '<tr><td colspan="2"><br /></td></tr>';
  $output .= '<tr><td colspan="2">Departmental Grading Approval Status...</td></tr>';

  // Find Dean uid
  $sql = "SELECT vs.user_id AS dean_uid
    FROM {content_type_program} p, {veritas_staff} vs, {users_roles} ur, {role} r
    WHERE p.field_department_name_value='%s' AND p.field_department_id_value=vs.department_id AND vs.user_id=ur.uid AND ur.rid=r.rid AND r.name='Dean'";
  $deanresult = db_query($sql, $department);
  $dean_uid = '';
  while ($dean = db_fetch_object($deanresult)) {
    if ($dean_uid === '') $dean_uid = $dean->dean_uid;
    else $dean_uid = $dean_uid . ',' . $dean->dean_uid;
  }
  if (empty($dean_uid)) $dean_uid = 0;

  // Find Registrar uid
  $sql = "SELECT ur.uid AS registrar_uid
    FROM {users_roles} ur, {role} r
    WHERE ur.rid=r.rid AND r.name='Registrar'";
  $registrarresult = db_query($sql);
  $registrar_uid = '';
  while ($registrar = db_fetch_object($registrarresult)) {
    if ($registrar_uid === '') $registrar_uid = $registrar->registrar_uid;
    else $registrar_uid = $registrar_uid . ',' . $registrar->registrar_uid;
  }
  if (empty($registrar_uid)) $registrar_uid = 0;

  // Find VC uid
  $sql = "SELECT ur.uid AS vc_uid
    FROM {users_roles} ur, {role} r
    WHERE ur.rid=r.rid AND r.name='VC'";
  $vcresult = db_query($sql);
  $vc_uid = '';
  while ($vc = db_fetch_object($vcresult)) {
    if ($vc_uid === '') $vc_uid = $vc->vc_uid;
    else $vc_uid = $vc_uid . ',' . $vc->vc_uid;
  }
  if (empty($vc_uid)) $vc_uid = 0;

  $exams[1] = array('lock' => $summaryrow->ca1locked,  'gradestext' => 'Continuous Assessment 1', 'fieldtoapprove' => 'field_ca1locked_value',       'srcfield' => 'field_ca1_value', 'destfield' => 'field_ca1forstudent_value');
  $exams[2] = array('lock' => $summaryrow->ca2locked,  'gradestext' => 'Continuous Assessment 2', 'fieldtoapprove' => 'field_ca2locked_value',       'srcfield' => 'field_ca2_value', 'destfield' => 'field_ca2forstudent_value');
  $exams[3] = array('lock' => $summaryrow->ca3locked,  'gradestext' => 'Continuous Assessment 3', 'fieldtoapprove' => 'field_ca3locked_value',       'srcfield' => 'field_ca3_value', 'destfield' => 'field_ca3forstudent_value');
  $exams[4] = array('lock' => $summaryrow->ca4locked,  'gradestext' => 'Continuous Assessment 4', 'fieldtoapprove' => 'field_ca4locked_value',       'srcfield' => 'field_ca4_value', 'destfield' => 'field_ca4forstudent_value');
  $exams[5] = array('lock' => $summaryrow->examlocked, 'gradestext' => 'Semester Exam',           'fieldtoapprove' => 'field_examscorelocked_value', 'srcfield' => 'NONE', 'destfield' => 'NONE');

  $showdeanform = false;
  $showregistrarform = false;
  $showvcform = false;

  $output .= '<tr><td colspan="2"></td></tr>';

  foreach ($exams as $exam) {
    if ($exam['lock'] == 0) {
      $output .= '<tr><td colspan="2">Waiting on some Lecturer Approvals for ' . $exam['gradestext'] . '</td></tr>';
    }
    elseif ($exam['lock'] == 1) {
      $output .= '<tr><td colspan="2">Waiting on Head of Department to Approve ' . $exam['gradestext'] . ' for some Programmes</td></tr>';
    }
    elseif ($exam['lock'] == 2) {
      $dean_uid_array = explode(',', $dean_uid);
      if (in_array($user->uid, $dean_uid_array)) {
        $showdeanform = true;

        if ($exam['srcfield'] != 'NONE') { // if this is a CA, notification goes to VC also
          if (empty($registrar_uid)) {
            $registrar_uid = $vc_uid;
          }
          elseif (!empty($vc_uid)) {
            $registrar_uid = $registrar_uid . ',' . $vc_uid;
          }
        }
        $_SESSION['eduerpdeanapprovalform']->department_url = $base_url . "/grading/stats?department={$departmentenc}&level={$level}&session={$sessionenc}&semester={$semester}";
        $_SESSION['eduerpdeanapprovalform']->dean_uid = $dean_uid;
        $_SESSION['eduerpdeanapprovalform']->registrar_uid = $registrar_uid;
        $_SESSION['eduerpdeanapprovalform']->department = $department;
        $_SESSION['eduerpdeanapprovalform']->level = $level;
        $_SESSION['eduerpdeanapprovalform']->session = $session;
        $_SESSION['eduerpdeanapprovalform']->semester = $semester;
        $_SESSION['eduerpdeanapprovalform']->gradestext = $exam['gradestext'];
        $_SESSION['eduerpdeanapprovalform']->fieldtoapprove = $exam['fieldtoapprove'];
        $_SESSION['eduerpdeanapprovalform']->srcfield = $exam['srcfield'];
        $_SESSION['eduerpdeanapprovalform']->destfield = $exam['destfield'];
      }
      else {
        $output .= '<tr><td colspan="2">Waiting on Dean to Approve ' . $exam['gradestext'] . '</td></tr>';
      }
      break;
    }
    elseif ($exam['lock'] == 3) { // This is only for final exam, CAs go straight to state 5
      $registrar_uid_array = explode(',', $registrar_uid);
      if (in_array($user->uid, $registrar_uid_array)) {
        $showregistrarform = true;

        $_SESSION['eduerpregistrarapprovalform']->department_url = $base_url . "/grading/stats?department={$departmentenc}&level={$level}&session={$sessionenc}&semester={$semester}";
        $_SESSION['eduerpregistrarapprovalform']->registrar_uid = $registrar_uid;
        $_SESSION['eduerpregistrarapprovalform']->vc_uid = $vc_uid;
        $_SESSION['eduerpregistrarapprovalform']->department = $department;
        $_SESSION['eduerpregistrarapprovalform']->level = $level;
        $_SESSION['eduerpregistrarapprovalform']->session = $session;
        $_SESSION['eduerpregistrarapprovalform']->semester = $semester;
        $_SESSION['eduerpregistrarapprovalform']->gradestext = $exam['gradestext'];
        $_SESSION['eduerpregistrarapprovalform']->fieldtoapprove = $exam['fieldtoapprove'];
        $_SESSION['eduerpregistrarapprovalform']->srcfield = $exam['srcfield'];
        $_SESSION['eduerpregistrarapprovalform']->destfield = $exam['destfield'];
      }
      else {
        $output .= '<tr><td colspan="2">' . $exam['gradestext'] . ' Submitted to Registrar</td></tr>';
      }
      break;
    }
    elseif ($exam['lock'] == 4) {
      $vc_uid_array = explode(',', $vc_uid);
      if (in_array($user->uid, $vc_uid_array)) {
        $showvcform = true;

        $_SESSION['eduerpvcapprovalform']->department_url = $base_url . "/grading/stats?department={$departmentenc}&level={$level}&session={$sessionenc}&semester={$semester}";
        $_SESSION['eduerpvcapprovalform']->vc_uid = $vc_uid;
        $_SESSION['eduerpvcapprovalform']->department = $department;
        $_SESSION['eduerpvcapprovalform']->level = $level;
        $_SESSION['eduerpvcapprovalform']->session = $session;
        $_SESSION['eduerpvcapprovalform']->semester = $semester;
        $_SESSION['eduerpvcapprovalform']->gradestext = $exam['gradestext'];
        $_SESSION['eduerpvcapprovalform']->fieldtoapprove = $exam['fieldtoapprove'];
        $_SESSION['eduerpvcapprovalform']->srcfield = $exam['srcfield'];
        $_SESSION['eduerpvcapprovalform']->destfield = $exam['destfield'];
      }
      else {
        $output .= '<tr><td colspan="2">' . $exam['gradestext'] . ' Submitted to Vice Chancellor</td></tr>';
      }
      break;
    }
    elseif ($exam['lock'] == 5) {
      $output .= '<tr><td colspan="2">' . $exam['gradestext'] . ' Fully Approved</td></tr>';
    }
  }

  $output .= '</tbody></table>';

  if (empty($registrar_uid)) {
    $output .= 'THERE IS NO REGISTRAR, ONE MUST BE ASSIGNED';
  }
  elseif ($showdeanform) {
    // $output .= drupal_get_form('approve_grades_dean_form');
    $output .= '<a href="' . $base_url . '/grading/eduerpdeanapprovalform">Click here to go to a Form for Approval of ' . $_SESSION['eduerpdeanapprovalform']->gradestext . " for level $level</a>";
  }
  elseif (empty($vc_uid)) {
    $output .= 'THERE IS NO VICE CHANCELLOR, ONE MUST BE ASSIGNED';
  }
  elseif ($showregistrarform) {
    // $output .= drupal_get_form('approve_grades_registrar_form');
    $output .= '<a href="' . $base_url . '/grading/eduerpregistrarapprovalform">Click here to go to a Form for Approval of ' . $_SESSION['eduerpregistrarapprovalform']->gradestext . " for level $level</a>";
  }
  elseif ($showvcform) {
    // $output .= drupal_get_form('approve_grades_vc_form');
    $output .= '<a href="' . $base_url . '/grading/eduerpvcapprovalform">Click here to go to a Form for Approval of ' . $_SESSION['eduerpvcapprovalform']->gradestext . " for level $level</a>";
  }


  $output .= '<br /><br /><table class="body-table"><tbody>';

  $output .= '<tr><th valign="top" class="table-label" colspan="8">Approval Details for all Courses taken by Students in this Department...</th></tr>';

  $output .= '<td valign="top" class="table-label">Course URL</td>';
  $output .= '<td valign="top" class="table-label">Programme (for info only, HOD approves Programmes using URLs under "View Programme Details" above)</td>';
  $output .= '<td valign="top" class="table-label">Department (for info only, Department grades are approved using URL under "Departmental Grading Approval Status")</td>';
  $output .= '<td valign="top" class="table-label">Continuous Assessment 1</td>';
  $output .= '<td valign="top" class="table-label">Continuous Assessment 2</td>';
  $output .= '<td valign="top" class="table-label">Continuous Assessment 3</td>';
  $output .= '<td valign="top" class="table-label">Continuous Assessment 4</td>';
  $output .= '<td valign="top" class="table-label">Semester Exam</td>';

  $sql = "SELECT
    ci.field_course_code_value AS coursecode, p0.field_programme_name_value AS programme, p0.field_department_name_value AS department,
      MIN(sg.field_ca1locked_value) AS ca1l,
      MIN(sg.field_ca2locked_value) AS ca2l,
      MIN(sg.field_ca3locked_value) AS ca3l,
      MIN(sg.field_ca4locked_value) AS ca4l,
      MIN(sg.field_examscorelocked_value) AS examl
    FROM {content_type_student_grades sg}, {content_type_course_instance} ci, {content_type_student_gpa} gpa, {content_type_program} p, {content_type_program} p0
    WHERE
      sg.field_student_gpa_nid=gpa.nid AND
      sg.field_course_instance_nid=ci.nid AND
      gpa.field_level_name_gpa_value='%s' AND
      gpa.field_sess_name_gpa_value='%s' AND
      gpa.field_semester_name_gpa_value='%s' AND
      gpa.field_program_ref_gpa_nid=p.nid AND
      p.field_department_name_value='%s' AND
      ci.field_program_ref_course_nid=p0.nid
    GROUP BY ci.field_course_code_value ORDER BY ci.field_course_code_value";
  $courserows = db_query($sql, $level, $session, $semester, $department);
  while ($courserow = db_fetch_object($courserows)) {
    $output .= '<tr>';

    $coursecodeenc = rawurlencode($courserow->coursecode);
    $programmeenc = rawurlencode($courserow->programme);
    $departmentenc = rawurlencode($courserow->department);

    $output .= '<td><a href="' . $base_url . "/course?coursecode={$coursecodeenc}&session={$sessionenc}&semester={$semester}" . '">' . $courserow->coursecode . '</a></td>';
    $output .= '<td>' . $courserow->programme . '</td>';
    $output .= '<td>' . $courserow->department . '</td>';
    //$output .= '<td><a href="' . $base_url . "/gpa?programme={$programmeenc}&level={$level}&session={$sessionenc}&semester={$semester}" . '">' . $courserow->programme . '</a></td>';
    //$output .= '<td><a href="' . $base_url . "/grading/stats?department={$departmentenc}&level={$level}&session={$sessionenc}&semester={$semester}" . '">' . $courserow->department . '</a></td>';

    $approvals = array('Lecturer needs to Approve', 'Approved by Lecturer', 'Approved by HOD', 'Approved by Dean', 'Approved by  Registrar', 'Fully Approved');
    $output .= '<td>' . $approvals[$courserow->ca1l] . '</td>';
    $output .= '<td>' . $approvals[$courserow->ca2l] . '</td>';
    $output .= '<td>' . $approvals[$courserow->ca3l] . '</td>';
    $output .= '<td>' . $approvals[$courserow->ca4l] . '</td>';
    $output .= '<td>' . $approvals[$courserow->examl] . '</td>';

    $output .= '</tr>';
  }

  $output .= '</tbody></table>';

  print drupal_to_js(array('data' => $output, 'status' => true));

  exit();
}


// Put up form to allow Dean to approve grades (relevant locked fields will then become 3 (or 5 if this is a CA) (1 is lecturer approval, 2 is HOD approval)).

function approve_grades_dean_form($form_state) {
  $form['departmentname'] = array('#value' => '<b>Department: ' . $_SESSION['eduerpdeanapprovalform']->department . '</b>');

  $form['comment'] = array(
    '#type' => 'textarea',
    '#title' => 'Enter a comment on the grades for the Registrar',
    '#cols' => 80,
    '#rows' => 5,
    '#required' => TRUE
  );

  $form['department_url'] = array('#type' => 'value', '#value' => $_SESSION['eduerpdeanapprovalform']->department_url);
  $form['dean_uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpdeanapprovalform']->dean_uid);
  $form['registrar_uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpdeanapprovalform']->registrar_uid);
  $form['department'] = array('#type' => 'value', '#value' => $_SESSION['eduerpdeanapprovalform']->department);
  $form['level'] = array('#type' => 'value', '#value' => $_SESSION['eduerpdeanapprovalform']->level);
  $form['session'] = array('#type' => 'value', '#value' => $_SESSION['eduerpdeanapprovalform']->session);
  $form['semester'] = array('#type' => 'value', '#value' => $_SESSION['eduerpdeanapprovalform']->semester);
  $form['fieldtoapprove'] = array('#type' => 'value', '#value' => $_SESSION['eduerpdeanapprovalform']->fieldtoapprove);
  $form['srcfield'] = array('#type' => 'value', '#value' => $_SESSION['eduerpdeanapprovalform']->srcfield);
  $form['destfield'] = array('#type' => 'value', '#value' => $_SESSION['eduerpdeanapprovalform']->destfield);
  $form['gradestext'] = array('#type' => 'value', '#value' => $_SESSION['eduerpdeanapprovalform']->gradestext);

  $form['submit'] = array('#type' => 'submit', '#value' => 'Approve ' . $_SESSION['eduerpdeanapprovalform']->gradestext . ' for level ' . $_SESSION['eduerpdeanapprovalform']->level);

  return $form;
}


function approve_grades_dean_form_validate($form, &$form_state) {
  if (empty($form_state['values']['comment'])) {
    form_set_error('comment', 'You must enter a comment for the Registrar!');
  }
}


function approve_grades_dean_form_submit($form, &$form_state) {
  global $user;

  $department     = $form_state['values']['department'];
  $level          = $form_state['values']['level'];
  $session        = $form_state['values']['session'];
  $semester       = $form_state['values']['semester'];
  $fieldtoapprove = $form_state['values']['fieldtoapprove'];
  $srcfield       = $form_state['values']['srcfield'];
  $destfield      = $form_state['values']['destfield'];
  $comment        = $form_state['values']['comment'];
  $department_url = $form_state['values']['department_url'];
  $dean_uid       = $form_state['values']['dean_uid'];
  $registrar_uid  = $form_state['values']['registrar_uid'];
  $gradestext     = $form_state['values']['gradestext'];

  if ($srcfield != 'NONE') {
    $statetoset = '5'; // This is a CA so make it fully approved
  }
  else {
    $statetoset = '3';
  }

  $sql = "UPDATE {content_type_student_grades} sg, {content_type_student_gpa} gpa, {content_type_program} p
    SET sg.`{$fieldtoapprove}`='{$statetoset}'
    WHERE
      sg.field_student_gpa_nid=gpa.nid AND
      gpa.field_level_name_gpa_value='%s' AND
      gpa.field_sess_name_gpa_value='%s' AND
      gpa.field_semester_name_gpa_value='%s' AND
      gpa.field_program_ref_gpa_nid=p.nid AND
      p.field_department_name_value='%s'";

  db_query($sql, $level, $session, $semester, $department);

  $sql = "SELECT p.field_college_name_value AS college
    FROM {content_type_program} p
    WHERE p.field_department_name_value='%s'
    LIMIT 1";
  $collegeresult = db_query($sql, $department);
  if ($collegerow = db_fetch_object($collegeresult)) {
    $college = $collegerow->college;
  }
  else {
    $college = '';
  }

  profile_load_profile($user);

  $name = '';
  if (!empty($user->profile_first_name) && !empty($user->profile_last_name)) {
    $middle = '';
    if (!empty($user->profile_middle_name)) $middle = $user->profile_middle_name . ' ';
    $name = "$user->profile_first_name {$middle}$user->profile_last_name";
  }

  $firsttime = TRUE;
  $registrar_uid_array = explode(',', $registrar_uid);
  foreach ($registrar_uid_array as $registrar_uid_i) {

    if (!empty($registrar_uid_i)) $destination_user = user_load($registrar_uid_i);
    else $destination_user = NULL;

    $subject = "$gradestext for $department/$level/$session/$semester Approved by $name";

    $body = '';
    if (!empty($destination_user->profile_first_name) && !empty($destination_user->profile_last_name)) {
      $middle = '';
      if (!empty($destination_user->profile_middle_name)) $middle = $destination_user->profile_middle_name . ' ';
      $body .= "Dear $destination_user->profile_first_name {$middle}$destination_user->profile_last_name,\n\n";
    }

    $body .= "I have approved $gradestext\n\n";
    $body .= "URL: $department_url\n";
    $body .= "Department: $department\n";
    $body .= "College: $college\n";
    $body .= "Level: $level\n";
    $body .= "Session: $session\n";
    $body .= "semester: $semester\n\n";
    $body .= "Dean's comment...\n";
    $body .= str_replace('<br />', "\n", $comment);
    $body .= "\n\n{$name}\n";

    if ($firsttime) {
      $node = new stdClass();
      $node->type                            = 'approval';
      $node->uid                             = 1;
      $node->status                          = 1;
      $node->promote                         = 0;
      $node->sticky                          = 0;
      $node->comment                         = 0;
      $node->title                           = $subject;
      $node->body                            = $comment;
      $node->field_url[0]['value']           = $department_url;
      $node->field_approver[0]['uid']        = $user->uid;
      $node->field_destination[0]['value']   = $registrar_uid;
      $node->field_department1[0]['value']   = $department;
      $node->field_college1[0]['value']      = $college;
      $node->field_level1[0]['value']        = $level;
      $node->field_session1[0]['value']      = $session;
      $node->field_semester1[0]['value']     = $semester;
      $node->field_what_approved[0]['value'] = $gradestext;
      $node->field_action[0]['value']        = 'Approved by Dean';
      node_save($node);

      $firsttime = FALSE;
    }

    if (!empty($destination_user)) {
      $message = drupal_mail('grading', 'approval', $destination_user->mail, language_default(), array(), $user->mail, FALSE);
      $message['subject'] = $subject;
      $message['body'] = $body;
      drupal_mail_send($message);
    }
  }

  drupal_set_message('Approval Successfull');
  $_SESSION['eduerpdeanapprovalform'] = NULL; // Just in case they somehow come back to the form

  $departmentenc = rawurlencode($department);
  $sessionenc = rawurlencode($session);
  drupal_goto('grading/stats', "department={$departmentenc}&level={$level}&session={$sessionenc}&semester={$semester}");
}


// Put up form to allow Registrar to approve grades (relevant locked fields will then become 4 (1 is lecturer approval, 2 is HOD approval, 3 is Dean approval)).

function approve_grades_registrar_form($form_state) {
  $form['departmentname'] = array('#value' => '<b>Department: ' . $_SESSION['eduerpregistrarapprovalform']->department . '</b>');

  $form['comment'] = array(
    '#type' => 'textarea',
    '#title' => 'Enter a comment on the grades for the Vice Chancellor',
    '#cols' => 80,
    '#rows' => 5,
    '#required' => TRUE
  );

  $form['department_url'] = array('#type' => 'value', '#value' => $_SESSION['eduerpregistrarapprovalform']->department_url);
  $form['registrar_uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpregistrarapprovalform']->registrar_uid);
  $form['vc_uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpregistrarapprovalform']->vc_uid);
  $form['department'] = array('#type' => 'value', '#value' => $_SESSION['eduerpregistrarapprovalform']->department);
  $form['level'] = array('#type' => 'value', '#value' => $_SESSION['eduerpregistrarapprovalform']->level);
  $form['session'] = array('#type' => 'value', '#value' => $_SESSION['eduerpregistrarapprovalform']->session);
  $form['semester'] = array('#type' => 'value', '#value' => $_SESSION['eduerpregistrarapprovalform']->semester);
  $form['fieldtoapprove'] = array('#type' => 'value', '#value' => $_SESSION['eduerpregistrarapprovalform']->fieldtoapprove);
  $form['srcfield'] = array('#type' => 'value', '#value' => $_SESSION['eduerpregistrarapprovalform']->srcfield);
  $form['destfield'] = array('#type' => 'value', '#value' => $_SESSION['eduerpregistrarapprovalform']->destfield);
  $form['gradestext'] = array('#type' => 'value', '#value' => $_SESSION['eduerpregistrarapprovalform']->gradestext);

  $form['submit'] = array('#type' => 'submit', '#value' => 'Approve ' . $_SESSION['eduerpregistrarapprovalform']->gradestext . ' for level ' . $_SESSION['eduerpregistrarapprovalform']->level);

  return $form;
}


function approve_grades_registrar_form_validate($form, &$form_state) {
  if (empty($form_state['values']['comment'])) {
    form_set_error('comment', 'You must enter a comment for the Vice Chancellor!');
  }
}


function approve_grades_registrar_form_submit($form, &$form_state) {
  global $user;

  $department     = $form_state['values']['department'];
  $level          = $form_state['values']['level'];
  $session        = $form_state['values']['session'];
  $semester       = $form_state['values']['semester'];
  $fieldtoapprove = $form_state['values']['fieldtoapprove'];
  $srcfield       = $form_state['values']['srcfield'];
  $destfield      = $form_state['values']['destfield'];
  $comment        = $form_state['values']['comment'];
  $department_url = $form_state['values']['department_url'];
  $registrar_uid  = $form_state['values']['registrar_uid'];
  $vc_uid         = $form_state['values']['vc_uid'];
  $gradestext     = $form_state['values']['gradestext'];

  $sql = "UPDATE {content_type_student_grades} sg, {content_type_student_gpa} gpa, {content_type_program} p
    SET sg.`{$fieldtoapprove}`='4'
    WHERE
      sg.field_student_gpa_nid=gpa.nid AND
      gpa.field_level_name_gpa_value='%s' AND
      gpa.field_sess_name_gpa_value='%s' AND
      gpa.field_semester_name_gpa_value='%s' AND
      gpa.field_program_ref_gpa_nid=p.nid AND
      p.field_department_name_value='%s'";

  db_query($sql, $level, $session, $semester, $department);

  $sql = "SELECT p.field_college_name_value AS college
    FROM {content_type_program} p
    WHERE p.field_department_name_value='%s'
    LIMIT 1";
  $collegeresult = db_query($sql, $department);
  if ($collegerow = db_fetch_object($collegeresult)) {
    $college = $collegerow->college;
  }
  else {
    $college = '';
  }

  profile_load_profile($user);

  $name = '';
  if (!empty($user->profile_first_name) && !empty($user->profile_last_name)) {
    $middle = '';
    if (!empty($user->profile_middle_name)) $middle = $user->profile_middle_name . ' ';
    $name = "$user->profile_first_name {$middle}$user->profile_last_name";
  }

  $firsttime = TRUE;
  $vc_uid_array = explode(',', $vc_uid);
  foreach ($vc_uid_array as $vc_uid_i) {

    if (!empty($vc_uid_i)) $destination_user = user_load($vc_uid_i);
    else $destination_user = NULL;

    $subject = "$gradestext for $department/$level/$session/$semester Approved by $name";

    $body = '';
    if (!empty($destination_user->profile_first_name) && !empty($destination_user->profile_last_name)) {
      $middle = '';
      if (!empty($destination_user->profile_middle_name)) $middle = $destination_user->profile_middle_name . ' ';
      $body .= "Dear $destination_user->profile_first_name {$middle}$destination_user->profile_last_name,\n\n";
    }

    $body .= "I have approved $gradestext\n\n";
    $body .= "URL: $department_url\n";
    $body .= "Department: $department\n";
    $body .= "College: $college\n";
    $body .= "Level: $level\n";
    $body .= "Session: $session\n";
    $body .= "semester: $semester\n\n";
    $body .= "Registrar's comment...\n";
    $body .= str_replace('<br />', "\n", $comment);
    $body .= "\n\n{$name}\n";

    if ($firsttime) {
      $node = new stdClass();
      $node->type                            = 'approval';
      $node->uid                             = 1;
      $node->status                          = 1;
      $node->promote                         = 0;
      $node->sticky                          = 0;
      $node->comment                         = 0;
      $node->title                           = $subject;
      $node->body                            = $comment;
      $node->field_url[0]['value']           = $department_url;
      $node->field_approver[0]['uid']        = $user->uid;
      $node->field_destination[0]['value']   = $vc_uid;
      $node->field_department1[0]['value']   = $department;
      $node->field_college1[0]['value']      = $college;
      $node->field_level1[0]['value']        = $level;
      $node->field_session1[0]['value']      = $session;
      $node->field_semester1[0]['value']     = $semester;
      $node->field_what_approved[0]['value'] = $gradestext;
      $node->field_action[0]['value']        = 'Approved by Registrar';
      node_save($node);

      $firsttime = FALSE;
    }

    if (!empty($destination_user)) {
      $message = drupal_mail('grading', 'approval', $destination_user->mail, language_default(), array(), $user->mail, FALSE);
      $message['subject'] = $subject;
      $message['body'] = $body;
      drupal_mail_send($message);
    }
  }

  drupal_set_message('Approval Successfull');
  $_SESSION['eduerpregistrarapprovalform'] = NULL; // Just in case they somehow come back to the form

  $departmentenc = rawurlencode($department);
  $sessionenc = rawurlencode($session);
  drupal_goto('grading/stats', "department={$departmentenc}&level={$level}&session={$sessionenc}&semester={$semester}");
}


// Put up form to allow VC to approve grades (relevant locked fields will then become 5)
// Also set the student visible exam score to the values set by the lecturer

function approve_grades_vc_form($form_state) {
  $form['departmentname'] = array('#value' => '<b>Department: ' . $_SESSION['eduerpvcapprovalform']->department . '</b>');

  $form['comment'] = array(
    '#type' => 'textarea',
    '#title' => 'Enter a comment on the grades for the Record',
    '#cols' => 80,
    '#rows' => 5,
    '#required' => TRUE
  );

  $form['department_url'] = array('#type' => 'value', '#value' => $_SESSION['eduerpvcapprovalform']->department_url);
  $form['vc_uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpvcapprovalform']->vc_uid);
  $form['department'] = array('#type' => 'value', '#value' => $_SESSION['eduerpvcapprovalform']->department);
  $form['level'] = array('#type' => 'value', '#value' => $_SESSION['eduerpvcapprovalform']->level);
  $form['session'] = array('#type' => 'value', '#value' => $_SESSION['eduerpvcapprovalform']->session);
  $form['semester'] = array('#type' => 'value', '#value' => $_SESSION['eduerpvcapprovalform']->semester);
  $form['fieldtoapprove'] = array('#type' => 'value', '#value' => $_SESSION['eduerpvcapprovalform']->fieldtoapprove);
  $form['gradestext'] = array('#type' => 'value', '#value' => $_SESSION['eduerpvcapprovalform']->gradestext);

  $form['submit'] = array('#type' => 'submit', '#value' => 'Approve ' . $_SESSION['eduerpvcapprovalform']->gradestext . ' for level ' . $_SESSION['eduerpvcapprovalform']->level);

  return $form;
}


function approve_grades_vc_form_validate($form, &$form_state) {
  if (empty($form_state['values']['comment'])) {
    form_set_error('comment', 'You must enter a comment for the Record!');
  }
}


function approve_grades_vc_form_submit($form, &$form_state) {
  global $user;

  $department     = $form_state['values']['department'];
  $level          = $form_state['values']['level'];
  $session        = $form_state['values']['session'];
  $semester       = $form_state['values']['semester'];
  $fieldtoapprove = $form_state['values']['fieldtoapprove'];
  $comment        = $form_state['values']['comment'];
  $department_url = $form_state['values']['department_url'];
  $vc_uid         = $form_state['values']['vc_uid'];
  $gradestext     = $form_state['values']['gradestext'];

  $sql = "UPDATE {content_type_student_grades} sg, {content_type_student_gpa} gpa, {content_type_program} p
    SET
      sg.`{$fieldtoapprove}`='5',
      sg.`field_examscoreforstudent_value`=sg.`field_exam_score_value`,
      sg.`field_totalscoreforstudent_value`=sg.`field_total_score_value`,
      sg.`field_gradepointforstudent_value`=sg.`field_gradepoint_value`,
      sg.`field_gradeforstudent_value`=sg.`field_grade_value`
    WHERE
      sg.field_student_gpa_nid=gpa.nid AND
      gpa.field_level_name_gpa_value='%s' AND
      gpa.field_sess_name_gpa_value='%s' AND
      gpa.field_semester_name_gpa_value='%s' AND
      gpa.field_program_ref_gpa_nid=p.nid AND
      p.field_department_name_value='%s'";
  db_query($sql, $level, $session, $semester, $department);

  $sql = "UPDATE {content_type_student_gpa} gpa, {content_type_program} p
    SET
      gpa.`field_gpaforstudent_value`=gpa.`field_gpa_value`,
      gpa.`field_cgpaforstudent_value`=gpa.`field_cgpa_value`
    WHERE
      gpa.field_level_name_gpa_value='%s' AND
      gpa.field_sess_name_gpa_value='%s' AND
      gpa.field_semester_name_gpa_value='%s' AND
      gpa.field_program_ref_gpa_nid=p.nid AND
      p.field_department_name_value='%s'";
  db_query($sql, $level, $session, $semester, $department);

  $sql = "SELECT p.field_college_name_value AS college
    FROM {content_type_program} p
    WHERE p.field_department_name_value='%s'
    LIMIT 1";
  $collegeresult = db_query($sql, $department);
  if ($collegerow = db_fetch_object($collegeresult)) {
    $college = $collegerow->college;
  }
  else {
    $college = '';
  }

  profile_load_profile($user);

  $name = '';
  if (!empty($user->profile_first_name) && !empty($user->profile_last_name)) {
    $middle = '';
    if (!empty($user->profile_middle_name)) $middle = $user->profile_middle_name . ' ';
    $name = "$user->profile_first_name {$middle}$user->profile_last_name";
  }

  $subject = "$gradestext for $department/$level/$session/$semester Approved by $name";

  $node = new stdClass();
  $node->type                            = 'approval';
  $node->uid                             = 1;
  $node->status                          = 1;
  $node->promote                         = 0;
  $node->sticky                          = 0;
  $node->comment                         = 0;
  $node->title                           = $subject;
  $node->body                            = $comment;
  $node->field_url[0]['value']           = $department_url;
  $node->field_approver[0]['uid']        = $user->uid;
  $node->field_department1[0]['value']   = $department;
  $node->field_college1[0]['value']      = $college;
  $node->field_level1[0]['value']        = $level;
  $node->field_session1[0]['value']      = $session;
  $node->field_semester1[0]['value']     = $semester;
  $node->field_what_approved[0]['value'] = $gradestext;
  $node->field_action[0]['value']        = 'Approved by VC';
  node_save($node);

  // Queue e-mails for Students
  $sql = "SELECT field_student_ref_gpa_uid FROM {content_type_student_gpa} gpa, {content_type_program} p
    WHERE
      gpa.field_level_name_gpa_value='%s' AND
      gpa.field_sess_name_gpa_value='%s' AND
      gpa.field_semester_name_gpa_value='%s' AND
      gpa.field_program_ref_gpa_nid=p.nid AND
      p.field_department_name_value='%s'";
  $studentresult = db_query($sql, $level, $session, $semester, $department);
  while ($student = db_fetch_object($studentresult)) {
    $student_uid = $student->field_student_ref_gpa_uid;

    db_query("INSERT INTO cron_notification (approver_uid, student_uid, gradestext, programme, instruction) VALUES (%d, %d, '%s', '%s', %d)",
      $user->uid, $student_uid, $gradestext, $department, 3);
  }


  drupal_set_message('Approval Successfull');
  $_SESSION['eduerpvcapprovalform'] = NULL; // Just in case they somehow come back to the form

  $departmentenc = rawurlencode($department);
  $sessionenc = rawurlencode($session);
  drupal_goto('grading/stats', "department={$departmentenc}&level={$level}&session={$sessionenc}&semester={$semester}");
}


function grading_stats_uni_form(&$obj) {
  $sql = "SELECT css.semester_id, s.sess_name FROM {current_session_semester} css, {session} s WHERE css.id=1 AND css.session_id=s.session_id";
  $css_rows = db_query($sql);
  $css_row = db_fetch_object($css_rows);
  $sessiondefault = $css_row->sess_name;
  $semesterdefault = $css_row->semester_id;

  $form['session'] = array(
    '#type' => 'select',
    '#default_value' => $sessiondefault,
    '#options' => _grading_session_list(),
    '#title' => 'Session',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstatsuni',
      'wrapper' => 'stats_here_uni',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['semester'] = array(
    '#type' => 'select',
    '#default_value' => $semesterdefault,
    '#options' => _grading_semester_list(),
    '#title' => 'Semester',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstatsuni',
      'wrapper' => 'stats_here_uni',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['level'] = array(
    '#type' => 'select',
    '#options' => _grading_level_list_any(),
    '#title' => 'Level',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstatsuni',
      'wrapper' => 'stats_here_uni',
      'method'  => 'replace',
      'effect'  => 'fade'
      )
    );

  $form['college'] = array(
    '#type' => 'select',
    '#options' => _grading_college_list_any(),
    '#title' => 'College',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstatsuni',
      'wrapper' => 'stats_here_uni',
      'method'  => 'replace',
      'effect'  => 'fade'
      )
    );

  $form['department'] = array(
    '#type' => 'select',
    '#options' => _grading_department_list_any(),
    '#title' => 'Department',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstatsuni',
      'wrapper' => 'stats_here_uni',
      'method'  => 'replace',
      'effect'  => 'fade'
      )
    );

  $form['programme'] = array(
    '#type' => 'select',
    '#options' => _grading_programme_list_any(),
    '#title' => 'Programme',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstatsuni',
      'wrapper' => 'stats_here_uni',
      'method'  => 'replace',
      'effect'  => 'fade'
      )
    );

  $form['updatebutton'] = array(
    '#type' => 'button',
    '#value' => 'Show Grade Statistics for above selection',
    '#ahah' => array(
      'path'    => 'grading/ahahstatsuni',
      'wrapper' => 'stats_here_uni',
      'method'  => 'replace',
      'effect'  => 'fade'
      )
    );

  $form['statshereuni'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="stats_here_uni">',
    '#value' => ' ',
    '#suffix' => '</div>',
    );

  return $form;
}


function grading_stats_uni_form_submit($form, &$state) {
  drupal_set_message('Submitted<br />');
}


function _grading_ahah_stats_uni() {
  global $user;
  global $base_url;

  $session = stripslashes($_POST['session']);
  $sessionenc = rawurlencode($session);

  $semester = stripslashes($_POST['semester']);

  if (!empty($_POST['level'])) {
    $levelparm = stripslashes($_POST['level']);
  }
  else {
    $levelparm = 'All';
  }

  if (!empty($_POST['college'])) {
    $college = stripslashes($_POST['college']);
  }
  else {
    $college = 'All';
  }

  if (!empty($_POST['department'])) {
    $department = stripslashes($_POST['department']);
  }
  else {
    $department = 'All';
  }

  if (!empty($_POST['programme'])) {
    $programme = stripslashes($_POST['programme']);
  }
  else {
    $programme = 'All';
  }

  if ($programme !== 'All') {
    $title = 'PROGRAMME';
    $queryvalue = $programme;
    $querywhere = "AND p.field_programme_name_value='%s'";
  }
  elseif ($department !== 'All') {
    $title = 'DEPARTMENTAL';
    $queryvalue = $department;
    $querywhere = "AND p.field_department_name_value='%s'";
  }
  elseif ($college !== 'All') {
    $title = 'COLLEGE';
    $queryvalue = $college;
    $querywhere = "AND p.field_college_name_value='%s'";
  }
  else {
    $title = 'UNIVERSITY';
    $queryvalue = FALSE;
    $querywhere = '';
  }

  $output = '<br /><table class="body-table"><tbody>';
  $output .= '<tr><th valign="top" class="table-label" colspan="5">' . $title . ' SUMMARY RESULTS</th></tr>';

  $output .= '<tr>';
  $output .= '<td valign="top" class="table-label">LEVEL</td>';
  $output .= '<td valign="top" class="table-label">Total No. of Registered Students</td>';
  $output .= '<td valign="top" class="table-label">No. of Students that Completed Exams</td>';
  $output .= '<td valign="top" class="table-label">No. of Students that Partially Completed Exams</td>';
  $output .= '<td valign="top" class="table-label">No. of Absent Students</td>';
  $output .= '</tr>';

  $levels = _grading_level_list();

  foreach ($levels as $level) {
    if (($levelparm === All) || ($levelparm == $level)) {

      // Display statistics on exams completed
      $sql = "SELECT
        COUNT(*) AS number_students,
        SUM(fully) AS sumfully,
        SUM(part) AS sumpart,
        SUM(none) AS sumnone,
        MIN(ca1l) AS ca1locked,
        MIN(ca2l) AS ca2locked,
        MIN(ca3l) AS ca3locked,
        MIN(ca4l) AS ca4locked,
        MIN(examl) AS examlocked
      FROM
        (
          SELECT
            BIT_AND(sg.field_exam_score_value > 0) AS fully,
            BIT_OR(sg.field_exam_score_value > 0) AS part,
            BIT_AND(sg.field_exam_score_value = 0) AS none,
            MIN(sg.field_ca1locked_value) AS ca1l,
            MIN(sg.field_ca2locked_value) AS ca2l,
            MIN(sg.field_ca3locked_value) AS ca3l,
            MIN(sg.field_ca4locked_value) AS ca4l,
            MIN(sg.field_examscorelocked_value) AS examl
          FROM {content_type_student_grades} sg, {content_type_student_gpa} gpa, {content_type_program} p
          WHERE
            sg.field_student_gpa_nid=gpa.nid AND
            gpa.field_level_name_gpa_value='%s' AND
            gpa.field_sess_name_gpa_value='%s' AND
            gpa.field_semester_name_gpa_value='%s' AND
            gpa.field_program_ref_gpa_nid=p.nid
            {$querywhere}
          GROUP BY sg.field_mat_no_uid
        ) AS eachstudent";
      if ($queryvalue) $summaryrows = db_query($sql, $level, $session, $semester, $queryvalue);
      else             $summaryrows = db_query($sql, $level, $session, $semester);
      $summaryrow = db_fetch_object($summaryrows);

      $output .= '<tr>';
      $output .= '<td valign="top" class="table-label">' . $level . '</td>';
      $output .= '<td valign="top">' . $summaryrow->number_students . '</td>';
      $output .= '<td valign="top">' . $summaryrow->sumfully . '</td>';
      $output .= '<td valign="top">' . ($summaryrow->sumpart - $summaryrow->sumfully) . '</td>';
      $output .= '<td valign="top">' . $summaryrow->sumnone . '</td>';
      $output .= '</tr>';
    }
  }

  foreach ($levels as $level) {
    if (($levelparm === All) || ($levelparm == $level)) {

      $sql = "SELECT DISTINCT p.field_department_name_value AS department
        FROM {content_type_student_gpa} gpa, {content_type_program} p
        WHERE
          gpa.field_level_name_gpa_value='%s' AND
          gpa.field_sess_name_gpa_value='%s' AND
          gpa.field_semester_name_gpa_value='%s' AND
          gpa.field_program_ref_gpa_nid=p.nid
          {$querywhere}
          ORDER BY department ASC";
      if ($queryvalue) $programmerows = db_query($sql, $level, $session, $semester, $queryvalue);
      else             $programmerows = db_query($sql, $level, $session, $semester);

      $first = true;
      while ($programmerow = db_fetch_object($programmerows)) {
        if ($first) {
          $output .= '<tr><td colspan="5"><br /></td></tr>';
          $output .= '<tr><td colspan="5">View Department Details (for level ' . $level . ')...</td></tr>';
          $first = false;
        }
        $departmentenc = rawurlencode($programmerow->department);
        $output .= '<tr><td colspan="5"><a href="' . $base_url . "/grading/stats?department={$departmentenc}&level={$level}&session={$sessionenc}&semester={$semester}" . '">' . $programmerow->department . '</a></td></tr>';
      }
    }
  }

  $output .= '</tbody></table>';

  print drupal_to_js(array('data' => $output, 'status' => true));

  exit();
}


function grading_student_details_form(&$obj) {

  $form['studentname'] = array(
    '#type' => 'select',
    '#options' => _grading_student_list(),
    '#title' => 'Student Name',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstudentdetails',
      'wrapper' => 'studentdata_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['studentmat'] = array(
    '#type' => 'select',
    '#options' => _grading_mat_list(),
    '#title' => 'Student Matriculation Number',
    '#ahah' =>array(
      'event'   => 'change',
      'path'    => 'grading/ahahstudentdetails',
      'wrapper' => 'studentdata_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      ),
    '#required' => true
    );

  $form['updatestudentbutton'] = array(
    '#type' => 'button',
    '#value' => "Show all of the selected Student's Courses",
    '#ahah' => array(
      'path'    => 'grading/ahahstudentdetails',
      'wrapper' => 'studentdata_here',
      'method'  => 'replace',
      'effect'  => 'fade'
      )
    );

  $form['studentdatahere'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="studentdata_here">',
    '#value' => ' ',
    '#suffix' => '</div>',
    );

  return $form;
}


function _grading_student_list() {
  $names = array();
  $names[0] = '';
  $sql = "SELECT CONCAT(pv0.value, ', ', pv1.value, ' ', pv2.value, ' (', u.name, ' ', u.mail, ' ', u.uid, ')') AS name, u.uid FROM users u, users_roles ur, role r, profile_fields pf0, profile_values pv0, profile_fields pf1, profile_values pv1, profile_fields pf2, profile_values pv2 WHERE u.uid=ur.uid AND ur.rid=r.rid AND r.name='Student' AND u.uid=pv0.uid AND pv0.fid=pf0.fid AND pf0.name='profile_last_name' AND u.uid=pv1.uid AND pv1.fid=pf1.fid AND pf1.name='profile_first_name' AND u.uid=pv2.uid AND pv2.fid=pf2.fid AND pf2.name='profile_middle_name' ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[$row->uid] = $row->name;
  }
  return $names;
}


function _grading_mat_list() {
  $names = array();
  $names[0] = '';
  $sql = "SELECT CONCAT(u.name, ' (', pv0.value, ', ', pv1.value, ' ', pv2.value, ' ', u.mail, ' ', u.uid, ')') AS name, u.uid FROM users u, users_roles ur, role r, profile_fields pf0, profile_values pv0, profile_fields pf1, profile_values pv1, profile_fields pf2, profile_values pv2 WHERE u.uid=ur.uid AND ur.rid=r.rid AND r.name='Student' AND u.uid=pv0.uid AND pv0.fid=pf0.fid AND pf0.name='profile_last_name' AND u.uid=pv1.uid AND pv1.fid=pf1.fid AND pf1.name='profile_first_name' AND u.uid=pv2.uid AND pv2.fid=pf2.fid AND pf2.name='profile_middle_name' ORDER BY name ASC";
  $rows = db_query($sql);
  while ($row = db_fetch_object($rows)) {
    $names[$row->uid] = $row->name;
  }
  return $names;
}


function grading_student_details_form_submit($form, &$state) {
  drupal_set_message('Student: ' . $state['values']['studentname'] . '<br />');
}


function _grading_ahah_studentdetails() {
  global $base_url;

  if (empty($_POST['studentname']) && empty($_POST['studentmat'])) {
    print drupal_to_js(array('data' => 'You must select either a Student Name or Matriculation Number', 'status' => true));
    exit();
  }
  elseif (!empty($_POST['studentname'])) $uid = (int)$_POST['studentname'];
  else                                   $uid = (int)$_POST['studentmat'];

  $output = '<br /><table class="body-table"><tbody>';
  $output .= '<tr><th valign="top" class="table-label" colspan="14">Courses for this Student</th></tr>';

  $output .= '<tr>';
  $output .= '<td valign="top" class="table-label">Course</td>';
  $output .= '<td valign="top" class="table-label">Programme</td>';
  $output .= '<td valign="top" class="table-label">Department</td>';
  $output .= '<td valign="top" class="table-label">Session</td>';
  $output .= '<td valign="top" class="table-label">Semester</td>';
  $output .= '<td valign="top" class="table-label">Level</td>';
  $output .= '<td valign="top" class="table-label">CA1</td>';
  $output .= '<td valign="top" class="table-label">CA2</td>';
  $output .= '<td valign="top" class="table-label">CA3</td>';
  $output .= '<td valign="top" class="table-label">CA4</td>';
  $output .= '<td valign="top" class="table-label">Exam</td>';
  $output .= '<td valign="top" class="table-label">Total</td>';
  $output .= '<td valign="top" class="table-label">Grade</td>';
  $output .= '<td valign="top" class="table-label">Comment</td>';
  $output .= '</tr>';

  $sql = "SELECT ci.field_course_code_value AS coursecode, p.field_programme_name_value AS programme, p.field_department_name_value AS department, ci.field_sess_name_value AS session, ci.field_semester_name_value AS semester, ci.field_level_name_value AS level,
      sg.field_ca1_value AS ca1,
      sg.field_ca2_value AS ca2,
      sg.field_ca3_value AS ca3,
      sg.field_ca4_value AS ca4,
      sg.field_exam_score_value AS exam,
      sg.field_total_score_value AS total,
      sg.field_grade_value AS grade,
      sg.field_comment_grades_value AS comment
    FROM content_type_student_grades sg, content_type_course_instance ci, content_type_program p
    WHERE sg.field_mat_no_uid=%d AND sg.field_course_instance_nid=ci.nid AND ci.field_program_ref_course_nid=p.nid ORDER BY session ASC, semester ASC, coursecode ASC";
  $rows = db_query($sql, $uid);
  while ($row = db_fetch_object($rows)) {
    $coursecodeenc = rawurlencode($row->coursecode);
    $programmeenc = rawurlencode($row->programme);
    $departmentenc = rawurlencode($row->department);
    $sessionenc = rawurlencode($row->session);

    $output .= '<tr>';
    $output .= '<td><a href="' . $base_url . "/course?coursecode={$coursecodeenc}&session={$sessionenc}&semester={$row->semester}" . '">' . $row->coursecode . '</a></td>';
    $output .= '<td><a href="' . $base_url . "/gpa?programme={$programmeenc}&level={$row->level}&session={$sessionenc}&semester={$row->semester}" . '">' . $row->programme . '</a></td>';
    $output .= '<td><a href="' . $base_url . "/grading/stats?department={$departmentenc}&level={$row->level}&session={$sessionenc}&semester={$row->semester}" . '">' . $row->department . '</a></td>';
    $output .= "<td>{$row->session}</td>";
    $output .= "<td>{$row->semester}</td>";
    $output .= "<td>{$row->level}</td>";
    $output .= "<td>{$row->ca1}</td>";
    $output .= "<td>{$row->ca2}</td>";
    $output .= "<td>{$row->ca3}</td>";
    $output .= "<td>{$row->ca4}</td>";
    $output .= "<td>{$row->exam}</td>";
    $output .= "<td>{$row->total}</td>";
    $output .= "<td>{$row->grade}</td>";
    $output .= '<td>';
    if (!empty($row->comment)) echo check_plain($row->comment);
    $output .= '</td>';
    $output .= '</tr>';
  }
  $output .= '</tbody></table>';

  $output .= '<br /><br />';

  $output .= '<br /><table class="body-table"><tbody>';
  $output .= '<tr><th valign="top" class="table-label" colspan="9">GPAs for this Student</th></tr>';

  $output .= '<tr>';
  $output .= '<td valign="top" class="table-label">Programme</td>';
  $output .= '<td valign="top" class="table-label">Department</td>';
  $output .= '<td valign="top" class="table-label">Session</td>';
  $output .= '<td valign="top" class="table-label">Semester</td>';
  $output .= '<td valign="top" class="table-label">Level</td>';
  $output .= '<td valign="top" class="table-label">Credit Load Registered</td>';
  $output .= '<td valign="top" class="table-label">Credit Load Completed</td>';
  $output .= '<td valign="top" class="table-label">GPA</td>';
  $output .= '<td valign="top" class="table-label">cGPA</td>';
  $output .= '</tr>';

  $sql = "SELECT p.field_programme_name_value AS programme, p.field_department_name_value AS department,
      g.field_sess_name_gpa_value AS session,
      g.field_semester_name_gpa_value AS semester,
      g.field_level_name_gpa_value AS level,
      g.field_credit_load_registered_value AS credit_load_registered,
      g.field_credit_load_completed_value AS credit_load_completed,
      g.field_gpa_value AS gpa,
      g.field_cgpa_value AS cgpa
    FROM content_type_student_gpa g, content_type_program p
    WHERE field_student_ref_gpa_uid=%d AND g.field_program_ref_gpa_nid=p.nid ORDER BY session ASC, semester ASC, programme ASC";
  $rows = db_query($sql, $uid);
  while ($row = db_fetch_object($rows)) {
    $programmeenc = rawurlencode($row->programme);
    $departmentenc = rawurlencode($row->department);
    $sessionenc = rawurlencode($row->session);

    $output .= '<tr>';
    $output .= '<td><a href="' . $base_url . "/gpa?programme={$programmeenc}&level={$row->level}&session={$sessionenc}&semester={$row->semester}" . '">' . $row->programme . '</a></td>';
    $output .= '<td><a href="' . $base_url . "/grading/stats?department={$departmentenc}&level={$row->level}&session={$sessionenc}&semester={$row->semester}" . '">' . $row->department . '</a></td>';
    $output .= "<td>{$row->session}</td>";
    $output .= "<td>{$row->semester}</td>";
    $output .= "<td>{$row->level}</td>";
    $output .= "<td>{$row->credit_load_registered}</td>";
    $output .= "<td>{$row->credit_load_completed}</td>";
    $output .= "<td>{$row->gpa}</td>";
    $output .= "<td>{$row->cgpa}</td>";
    $output .= '</tr>';
  }
  $output .= '</tbody></table>';

  print drupal_to_js(array('data' => $output, 'status' => true));

  exit();
}


function grading_cron() {
  global $base_url;

  $notifications = db_query("SELECT * FROM cron_notification LIMIT 20");
  while ($notification = db_fetch_object($notifications)) {
    if ($notification->instruction == 3) {

      $source_user = user_load($notification->approver_uid);
      $name = '';
      if (!empty($source_user->profile_first_name) && !empty($source_user->profile_last_name)) {
        $middle = '';
        if (!empty($source_user->profile_middle_name)) $middle = $source_user->profile_middle_name . ' ';
        $name = "$source_user->profile_first_name {$middle}$source_user->profile_last_name";
      }

      $destination_user = user_load($notification->student_uid);
      $gradestext = $notification->gradestext;
      $programme = $notification->programme;
      $subject = "$gradestext for $programme Approved";

      $body = '';
      if (!empty($destination_user->profile_first_name) && !empty($destination_user->profile_last_name)) {
        $middle = '';
        if (!empty($destination_user->profile_middle_name)) $middle = $destination_user->profile_middle_name . ' ';
        $body .= "Dear $destination_user->profile_first_name {$middle}$destination_user->profile_last_name,\n\n";
      }
      $body .= "I have approved the $gradestext for $programme\n\n";
      $body .= "To view your grades go to $base_url/student\n";
      $body .= "You will have to login first.\n\n";
      $body .= "{$name}\n";

      $message = drupal_mail('grading', 'notifystudent', $destination_user->mail, language_default(), array(), $source_user->mail, FALSE);
      $message['subject'] = $subject;
      $message['body'] = $body;
      drupal_mail_send($message);
    }
    if ($notification->instruction == 1 || $notification->instruction == 3) {
      // Placeholder to send SMS
    }
    db_query("DELETE FROM cron_notification WHERE approver_uid=%d AND student_uid=%d AND gradestext='%s' AND programme='%s'", $notification->approver_uid, $notification->student_uid, $notification->gradestext, $notification->programme);
  }
}
?>