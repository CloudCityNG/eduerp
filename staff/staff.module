<?php
include(drupal_get_path('module', 'veritas') . '/veritas_global.inc');

function staff_menu() {
  $items['staff/semester'] = array(
    'title' => 'Semester Administration',
    'page callback' => 'semester_admin',
    'access arguments' => array('staff register course'),
    'type' => MENU_NORMAL_ITEM
  );

  $items['staff/list']=array(
    'title'=>'Staff List',
    'page callback' => 'search_staff_list',
    'access arguments' => array('staff list'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/department']=array(
    'title'=>'Staff List',
    'page callback' => 'staff_department_list',
    'access arguments' => array('staff department list'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/viewlecturer']=array(
    'title'=>'Staff List',
    'page callback' => 'staff_course_list',
    'access arguments' => array('staff view lecturer'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/registrablecourse']=array(
    'title'=>'Course Program Assign',
    'page callback' => 'staff_course_assign',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/view']=array(
    'title'=>'Staff Summary',
    'page callback' => 'drupal_get_form',
    'page arguments'=>array('staff_view_form'),
    'access arguments' => array('staff list'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/assignrole'] = array(
    'title' => 'Staff Roles',
    'page callback' => 'staff_assign_role',
    'access arguments' => array('staff assign role'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/clearance']=array(
    'title'=>'Clearance',
    'page callback' => '_staff_clearance',
    'access arguments' => array('staff clearance'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/begin_clearance']=array(
    'title'=>'Begin Clearance',
    'page callback' => 'drupal_get_form',
    'page arguments'=>array('staff_begin_clearance_form'),
    'access arguments' => array('staff clearance'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/viewstudent']=array(
    'title' => 'View Student',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('view_student_form'),
    'access arguments' => array('student data'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/staffsearch']=array(
    'title' => 'Staff Search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_staff_form'),
    'access arguments' => array('staff data'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/studentpayments']=array(
    'title' => 'View Student Payments',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('view_student_payments_form'),
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/download_studentpayments']=array(
    'title' => 'Download Student Payments',
    'page callback' => 'download_student_payments',
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/cleared']=array(
    'page callback' => 'staff_cleared_student',
    'access arguments' => array('staff clearance'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/not_cleared']=array(
    'page callback' => 'staff_notcleared_student',
    'access arguments' => array('staff clearance'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/ajax']=array(
    'title' => 'AJAX Routines',
    'page callback' => '_staff_ajax',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );/*
  $items['staff/editfacultydept'] = array(
    'title' => 'Create Faculty/Department',
    'page callback' => 'staff_edit_faculty_department',
    'access arguments' => array('staff register course'),
    'type' => MENU_NORMAL_ITEM
  );*/
  $items['staff/createeditfaculty'] = array(
    'title' => 'Create/Modify Faculty',
    'page callback' => 'staff_create_edit_faculty',
    'access arguments' => array('staff register course'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['staff/createeditdept'] = array(
    'title' => 'Create/Modify Department',
    'page callback' => 'staff_create_edit_dept',
    'access arguments' => array('staff register course'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['staff/createeditcourse']=array(
    'title'=>'Create/Modify a Course',
    'page callback' => 'staff_create_edit_course',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  
  
  return $items; 
}


function _staff_ajax() {
  $task = arg(2);

  switch ($task):
    case 'course':
      $courses[""] = "";

      $program = $_POST['programme_id'];
      $level = $_POST['level'];

      // Retrieve available courses that have not been assigned
      $sql = "SELECT c.nid AS course_id, c.field_coursetitle_value AS course_title FROM {content_type_course} c
        WHERE c.nid NOT IN (SELECT pc.course_id FROM {program_course} pc WHERE pc.programme_id=%d AND pc.level='%s' AND pc.historical=0)
        ORDER BY c.field_code_value ASC";
      $rs = db_query($sql, $program, $level);
      while ($row = db_fetch_object($rs)) {
        $courses[$row->course_id] = $row->course_title;
      }

      $form['course_id'] = array(
        '#type' => 'select',
        '#title' => 'Course',
        '#options' => $courses,
        '#attributes' => array('style' => 'width:100px'),
        '#required' => TRUE);

      $output = _staff_ahah_render($form, 'staff-course-assign-form1');
      print drupal_to_js(array('data' => $output, 'status' => true));
      break;
    case 'delete':
      $allocation_id = arg(3);

      // Delete this allocation
      $sql = "UPDATE {program_course} SET historical=1 WHERE program_course_id=%d";
      $rs = db_query($sql, $allocation_id);

      if (db_affected_rows() > 0) echo "OK";
      else echo "FAIL";
      break;
  endswitch;
  exit();
}


function staff_course_assign_form1_validate($form, &$form_state) {
  return true;
}
/*
  This function is largely based on the poll module, its been simplified for reuse.
  $fields is the specific form elements you want to attach via ahah,
  $name is the form fields array key... e.g. the name for $form['title'] is "title"
*/
function _staff_ahah_render($fields, $name) {

  drupal_alter('form', $fields, array(), 'staff_course_form');

  $form_state = array('submitted' => FALSE,'#values'=>$_POST);
  $form_build_id = $_POST['form_build_id'];
  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  $form = form_get_cache($form_build_id, $form_state);
  if($form[$name]['#required'] == true){
    $fields['#required'] =  true;
  }
  $form[$name] = $fields;
  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
   $form_state = array('submitted' => FALSE);

  // Rebuild the form.
  $form = form_builder($_POST['form_id'], $form, $form_state);

  // Render the new output.
  $new_form = $form[$name];
  return drupal_render($new_form);
}


/*Function to get the staff permission.*/
function staff_perm() {
  return array('staff register','staff clearance','staff assign role','staff register course','staff view lecturer','staff department list','staff list', 'student data', 'staff data', 'student payments');
}


function staff_assign_role() {
  global $user;
  if (!staff_has_eduerp_role($user->uid, 0, 0, array('Role Assigner'))) {
      drupal_set_message('You are not authorized to access this page.');
      drupal_goto('user');
  }

  $_SESSION['eduerpassignrole']->uid = arg(2);

  $user_profile = new UserProfile($_SESSION['eduerpassignrole']->uid);
  $staffname = '';
  if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
    $middle = '';
    if (!empty($user_profile->profile_middle_name)) $middle = ' ' . $user_profile->profile_middle_name;
    $staffname = "{$user_profile->profile_last_name}, {$user_profile->profile_first_name}{$middle}";
  }
  $_SESSION['eduerpassignrole']->name = $staffname;
  if (!empty($user_profile->profile_department_id)) {
    $_SESSION['eduerpassignrole']->department_id = $user_profile->profile_department_id;
    $result = db_query("SELECT field_college_id_nid FROM {content_type_department} WHERE nid=%d");
    $row = db_fetch_object($result, $user_profile->profile_department_id);
    $_SESSION['eduerpassignrole']->college_id = $row->field_college_id_nid;
  }
  else {
    $_SESSION['eduerpassignrole']->department_id = 0;
    $_SESSION['eduerpassignrole']->college_id = 0;
  }

  ob_start();

  echo "<b>Assign Roles or move Home Department for {$staffname}...</b><br />";

  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('department_role_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('faculty_role_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('university_role_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('current_roles_list_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('move_department_form');
  echo '<br /><br /><hr />';

  describeroles();

  return ob_get_clean();
}


function department_role_form($form_state) {
  $form['top'] = array('#value' => "Give another Department role to {$_SESSION['eduerpassignrole']->name}:");

  $form['role'] = array(
    '#type' => 'select',
    '#options' => eduerp_department_roles(),
    '#title' => 'Role',
    '#default_value' => 'Department Examination Viewer',
    '#required' => TRUE);

  $form['department'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department',
    '#default_value' => $_SESSION['eduerpassignrole']->department_id,
    '#required' => TRUE);
    if (empty($_SESSION['eduerpassignrole']->department_id)) unset($form['department']['#default_value']);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Assign new role to {$_SESSION['eduerpassignrole']->name}");
  return $form;
}


function faculty_role_form($form_state) {
  $form['top'] = array('#value' => "Give another Faculty role to {$_SESSION['eduerpassignrole']->name}:");

  $form['role'] = array(
    '#type' => 'select',
    '#options' => eduerp_faculty_roles(),
    '#title' => 'Role',
    '#default_value' => 'Faculty Examination Viewer',
    '#required' => TRUE);

  $form['faculty'] = array(
    '#type' => 'select',
    '#options' => faculty(),
    '#title' => 'Faculty',
    '#default_value' => $_SESSION['eduerpassignrole']->college_id,
    '#required' => TRUE);
    if (empty($_SESSION['eduerpassignrole']->college_id)) unset($form['faculty']['#default_value']);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Assign new role to {$_SESSION['eduerpassignrole']->name}");
  return $form;
}


function university_role_form($form_state) {
  $form['top'] = array('#value' => "Give another University role to {$_SESSION['eduerpassignrole']->name}:");

  $form['role'] = array(
    '#type' => 'select',
    '#options' => eduerp_university_roles(),
    '#title' => 'Role',
    '#default_value' => 'University Examination Viewer',
    '#required' => TRUE);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Assign new role to {$_SESSION['eduerpassignrole']->name}");
  return $form;
}


function eduerp_department_roles() {
  $options = array(
    'Department Examination Viewer' => 'Department Examination Viewer',
    'Department Examination Officer' => 'Department Examination Officer',
    'Head of Department' => 'Head of Department'
  );
  return $options;
}


function eduerp_faculty_roles() {
  $options = array(
    'Faculty Examination Viewer' => 'Faculty Examination Viewer',
    'Faculty Examination Officer' => 'Faculty Examination Officer',
    'Dean of Faculty' => 'Dean of Faculty',
    'Faculty Registry Officer' => 'Faculty Registry Officer'
  );
  return $options;
}


function eduerp_university_roles() {
  $options = array(
    'Non-Academic Staff' => 'Non-Academic Staff',
    'Academic Staff' => 'Academic Staff',
    'University Examination Viewer' => 'University Examination Viewer',
    'University Examination Officer' => 'University Examination Officer',
    'Bursar' => 'Bursar',
    'Bursary' => 'Bursary',
    'Registry' => 'Registry',
    'Registrar' => 'Registrar',
    'Vice-Chancellor' => 'Vice-Chancellor',
    'Student Affairs Officer' => 'Student Affairs Officer',
    'Role Assigner' => 'Role Assigner'
  );
  return $options;
}


function staff_has_eduerp_role($uid, $department_id, $faculty_id, $roles) {
  $result = db_query("SELECT er.role FROM {eduerp_roles} er WHERE er.uid=%d AND er.department_id=%d AND er.college_id=%d", $uid, $department_id, $faculty_id);

  while ($row = db_fetch_object($result)) {
    if (in_array($row->role, $roles)) return TRUE;
  }
  return FALSE;
}


function faculty() {
  static $options;
  if (!$options) {
    $options = array();
    $r = db_query("SELECT nid, field_college_name_value AS value FROM {content_type_college} ORDER BY field_college_name_value");
    while ($f = db_fetch_object($r))
      $options[$f->nid] = $f->value;
  }
  return  $options;
}


function current_roles_list_form($form_state) {
  $form['top'] = array('#value' => "All current roles for {$_SESSION['eduerpassignrole']->name}:<br />");

  $result = db_query("SELECT er.eduerp_role_id,
      CONCAT(er.role, IFNULL(CONCAT(' (', d.field_department_name_value, ')'), IFNULL(CONCAT(' (', c.field_college_name_value, ')'), ''))) AS name
    FROM {eduerp_roles} er
    LEFT JOIN {content_type_department} d ON er.department_id=d.nid
    LEFT JOIN {content_type_college}    c ON er.college_id=c.nid
    WHERE er.uid=%d ORDER BY er.role", $_SESSION['eduerpassignrole']->uid);

  $form['roles'] = array('#tree' => TRUE);
  $found = FALSE;
  while ($row = db_fetch_object($result)) {
    $found = TRUE;
    $form['roles'][$row->eduerp_role_id] = array(
      '#type' => 'checkbox',
      '#title' => $row->name,
      '#default_value' => TRUE
    );
  }

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  if ($found) {
    $form['submit'] = array('#type' => 'submit', '#value' => "Remove any roles unchecked above from {$_SESSION['eduerpassignrole']->name}");
  }
  else {
    $form['noroles'] = array('#value' => '<br />No Roles Assigned<br />');
  }
  return $form;
}


function move_department_form($form_state) {
  $form['top'] = array('#value' => "Move {$_SESSION['eduerpassignrole']->name} to a new department:");

  $form['department'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department',
    '#default_value' => $_SESSION['eduerpassignrole']->department_id,
    '#required' => TRUE);
    if (empty($_SESSION['eduerpassignrole']->department_id)) unset($form['department']['#default_value']);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Move {$_SESSION['eduerpassignrole']->name} to the above department");
  return $form;
}


function department_role_form_submit($form, &$form_state) {
  addrole($form_state['values']['uid'], $form_state['values']['department'], 0, $form_state['values']['role']);
}


function faculty_role_form_submit($form, &$form_state) {
  addrole($form_state['values']['uid'], 0, $form_state['values']['faculty'], $form_state['values']['role']);
}


function university_role_form_submit($form, &$form_state) {
  addrole($form_state['values']['uid'], 0, 0, $form_state['values']['role']);
}


function addrole($uid, $department_id, $college_id, $role) {
  $result = db_query("SELECT 1 FROM {eduerp_roles} er WHERE er.uid=%d AND er.department_id=%d AND er.college_id=%d AND er.role='%s'",
    $uid, $department_id, $college_id, $role);
  if (!db_fetch_object($result)) {
    db_query("INSERT INTO {eduerp_roles} SET uid=%d, department_id=%d, college_id=%d, role='%s'",
      $uid, $department_id, $college_id, $role);
    drupal_set_message('Role Assigned');
  }

  if ($role === 'Registry' || $role === 'Registrar' || $role === 'Vice-Chancellor') {
    assign_drupal_role($uid, 'Registry');
  }
  if ($role === 'Bursary' || $role === 'Bursar' || $role === 'Vice-Chancellor') {
    assign_drupal_role($uid, 'Bursary');
  }
  if ($role === 'Student Affairs Officer') {
    assign_drupal_role($uid, 'SA');
  }
  if ($role === 'Academic Staff' || $role === 'Non-Academic Staff') {
    // 'Staff' role allocation is now a manual admin process
    // assign_drupal_role($uid, 'Staff');
  }
}


function assign_drupal_role($uid, $role) {
  $result = db_query("SELECT rid FROM {role} WHERE name='%s'", $role);
  $row = db_fetch_object($result);

  $staff_user = user_load($uid);
  $roles = $staff_user->roles;
  $roles[$row->rid] = $role; // If it is new, it will be added, ($role is not relevent, must be something)

  user_save($staff_user, array('roles' => $roles));
}


function current_roles_list_form_submit($form, &$form_state) {
  $i = 0;
  if (!empty($form_state['values']['roles'])) {
    foreach ($form_state['values']['roles'] as $eduerp_role_id => $checked) {
      if (!$checked) {
        droprole($form_state['values']['uid'], $eduerp_role_id);
        $i++;
      }
    }
  }

  if ($i == 1) drupal_set_message('Role Removed');
  else drupal_set_message("$i Roles Removed");
}


function droprole($uid, $eduerp_role_id) {
  $result = db_query("SELECT role FROM {eduerp_roles} WHERE eduerp_role_id=%d", $eduerp_role_id);
  if ($row = db_fetch_object($result)) {
    db_query("DELETE FROM {eduerp_roles} WHERE eduerp_role_id=%d", $eduerp_role_id);
  }

  if (!staff_has_eduerp_role($uid, 0, 0, array('Registry', 'Registrar', 'Vice-Chancellor'))) {
    drop_drupal_role($uid, 'Registry');
  }
  if (!staff_has_eduerp_role($uid, 0, 0, array('Bursary', 'Bursar', 'Vice-Chancellor'))) {
    drop_drupal_role($uid, 'Bursary');
  }
  if (!staff_has_eduerp_role($uid, 0, 0, array('Student Affairs Officer'))) {
    drop_drupal_role($uid, 'SA');
  }
  if (!staff_has_eduerp_role($uid, 0, 0, array('Academic Staff', 'Non-Academic Staff'))) {
    // 'Staff' role allocation is now a manual admin process
    // drop_drupal_role($uid, 'Staff');
  }
}


function drop_drupal_role($uid, $role) {
  $result = db_query("SELECT rid FROM {role} WHERE name='%s'", $role);
  $row = db_fetch_object($result);

  $staff_user = user_load($uid);
  $roles = $staff_user->roles;
  unset($roles[$row->rid]);

  user_save($staff_user, array('roles' => $roles));
}


function move_department_form_submit($form, &$form_state) {
  $user_profile = new UserProfile($form_state['values']['uid']);
  $user_profile->profile_department_id = $form_state['values']['department'];
  $user_profile->save();

  drupal_set_message("Department Moved");
}


function search_staff_list() {
  ob_start();

//  echo  drupal_get_form('staff_search_form');

  staff_search_list();

  return ob_get_clean();
}


function staff_course_list() {
  ob_start();
  $query = "SELECT courses.*, CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS staff_name
    FROM
      (SELECT
        c.field_coursetitle_value AS course_title,
        ci.field_lecturer_uid AS uid
      FROM {content_type_course} c, {content_type_course_instance} ci
      WHERE
        c.field_department_nid_nid=%d AND c.nid=ci.field_course_id_nid
      ) AS courses
    LEFT JOIN {node} npro ON courses.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid";
  $result = db_query($query, arg(2));
?>
    <table border='1' align='center'  cellpadding="5" cellspacing="5">
    <tr bgcolor='#ACCFCC'><td><b>Lecturer</b></td><td><b>Course</b></td></tr>
<?php
  while ($f=db_fetch_object($result)) {
?>
      <tr>
      <td><a href="view/<?php echo $f->uid?>"><? echo $f->staff_name; ?></a></td>
      <td><? echo $f->course_title; ?></td>
      </tr>
<?php
  }
?>
    </table>
<?php
  return ob_get_clean();
}


function staff_department_list() {
  ob_start();
  $r = db_query("SELECT
      d.nid AS department_id,
      d.field_department_name_value AS department_name,
      er.uid AS hod_uid,
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS hod_name
    FROM {content_type_department} d
    LEFT JOIN {eduerp_roles} er ON d.nid=er.department_id AND er.role='Head of Department'
    LEFT JOIN {node} npro ON er.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
    ORDER BY department_name");
?>
    <table border='1' align='center'  cellpadding="5" cellspacing="5">
    <tr bgcolor='#ACCFCC'><td><b>Department</b></td><td><b>HOD</b></td><td><b>Action</b></td></tr>
<?php
  while ($f = db_fetch_object($r)) {
?>
      <tr>
      <td><? echo $f->department_name; ?></td>
      <td><a href="view/<?php echo $f->hod_uid?>"><? echo $f->hod_name; ?></a></td>
      <td><a href="viewlecturer/<? echo $f->department_id; ?>">View Courses/Lecturers</a></td>
      </tr>
<?php
  }
?>
    </table>
<?php
  return ob_get_clean();
}


function staff_search_list() {
  /*
  $search_keys = array('gender', 'department_id', 'staff_type_id', 'grade_level_id', 'state');
  $search_values = array(
    'gender' => '',
    'department_id',
    'staff_type_id',
    'grade_level_id',
    'state');
  $data = array_filter($_POST);
  $condition = array();
  foreach ($search_keys as $value) {
    if (isset($data['$value'])) {
      $condition[] = "s .". $value ."='". $data[$value] ."'";
    }
  }
  if (implode(' and ', $condition) != '') {
    $condition = " where ". implode(' and ', $condition);
  }
  else {*/
    $condition  = '';
  /*}*/
  $query = "SELECT ur.uid,
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS name,
      GROUP_CONCAT(CONCAT(er.role, IFNULL(CONCAT('(', d.field_department_name_value, ')'), ''), IFNULL(CONCAT('(', c.field_college_name_value, ')'), '')) ORDER BY er.role SEPARATOR ', ') AS role_name
    FROM {users_roles} ur
    INNER JOIN {role} r ON ur.rid=r.rid AND name='Staff'
    LEFT JOIN {node} npro ON ur.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
    LEFT JOIN {eduerp_roles} er ON ur.uid=er.uid
    LEFT JOIN {content_type_department} d ON er.department_id=d.nid
    LEFT JOIN {content_type_college} c ON er.college_id=c.nid
    $condition
    GROUP BY ur.uid ORDER BY name";
  $result = db_query($query);
?>
    <table border='1' align='center'>
    <tr bgcolor='#ACCFCC'><td colspan='4'><b>Staff List</b></td></tr>
    <tr><td><b>Name</b></td><td><b>Roles</b></td><td><b>View</b></td><td><b>Action</b></td></tr>
<?php
  while ($f = db_fetch_object($result)) {
?>
      <tr>
      <td><?php echo $f->name ?></td>
      <td><? echo $f->role_name; ?></td>
      <td><a href="view/<? echo $f->uid; ?>">View</a></td>
      <td><a href="<?php echo url('staff/assignrole/'. $f->uid)?>">Assign Roles</a></td>
      </tr>
<?php
  }
?>
    </table>
<?php
  describeroles();
}


function describeroles() {
  echo "<br />
<b>Description of roles</b><br />
Note any combination of roles can be assigned to the one staff member.<br />
<br />
<b>Department roles...</b><br />
<br />
Note these roles can be given to a staff member for more than one department and it is not necessarily for their \"own\" department.<br />
<br />
<b><i>'Department Examination Viewer'</i></b> allows a staff member to see grades for all courses in the specified department (and all grades for students in that department who have taken courses in other departments).<br />
They will also be able to see GPA and cGPA for all students in the specified department.<br />
<br />

<b><i>'Department Examination Officer'</i></b> has the same rights as <b><i>'Department Examination Viewer'</i></b>.<br />
Additionally will have the same rights as a course lecturer to edit and submit any grades for all courses in the specified department.<br />
They will be notified when a lecturer submits grades for a course in the specified department.<br />
They can also approve grades for all courses in the specified department.<br />
They can also unlock grades to allow a lecturer (or themselves) re-edit and re-submit changes.<br />
They can create or modify courses for the specified department.<br />
They can create or modify programmes for the specified department.<br />
<br />

<b><i>'Head of Department'</i></b> has the same rights as <b><i>'Department Examination Viewer'</i></b>.<br />
Additionally they will be notified when a lecturer submits grades for a course in the specified department.<br />
They can also approve grades for all courses in the specified department.<br />
They can also unlock grades to allow a lecturer re-edit and re-submit changes.<br />
They can create or modify courses for the specified department.<br />
They can create or modify programmes for the specified department.<br />
<br />

<b>Faculty roles...</b><br />
<br />
Note these roles can be given to a staff member for more than one faculty and it is not necessarily for their \"own\" faculty.<br />
<br />

<b><i>'Faculty Examination Viewer'</i></b> allows a staff member to see grades for all courses in the specified faculty (and all grades for students in that faculty who have taken courses in other faculties).<br />
They will also be able to see GPA and cGPA for all students in the specified faculty.<br />
<br />

<b><i>'Faculty Examination Officer'</i></b> has the same rights as <b><i>'Faculty Examination Viewer'</i></b>.<br />
Additionally will have the same rights as a course lecturer to edit and submit any grades for all courses in the specified faculty.<br />
They will be notified when a lecturer submits grades for a course in the specified faculty.<br />
They can also approve grades for all courses in the specified faculty.<br />
They can also unlock grades to allow a lecturer (or themselves) re-edit and re-submit changes.<br />
They will be notified when grades are approved for a course in the specified faculty.<br />
They can also second level approve grades for all courses in the specified faculty.<br />
<br />

<b><i>'Dean of Faculty'</i></b> has the same rights as <b><i>'Faculty Examination Viewer'</i></b>.<br />
Additionally they will be notified when grades are approved for a course in the specified faculty.<br />
They can also second level approve grades for all courses in the specified faculty.<br />
<br />

<b><i>'Faculty Registry Officer'</i></b> allows a staff member clear student applications for the specified faculty.<br />
<br />

<b>University roles...</b><br />
<br />
<b><i>'University Examination Viewer'</i></b> allows a staff member to see grades for all courses.<br />
They will also be able to see GPA and cGPA for all students.<br />
<br />

<b><i>'University Examination Officer'</i></b> has the same rights as <b><i>'University Examination Viewer'</i></b>.<br />
Additionally will have the same rights as a course lecturer to edit and submit any grades for all courses.<br />
They will be notified when a lecturer submits grades for a course.<br />
They can also approve grades for all courses.<br />
They can also unlock grades to allow a lecturer (or themselves) re-edit and re-submit changes.<br />
They will be notified when grades are approved for a course.<br />
They can also second level approve grades for all courses.<br />
They can also approve grades for all departments in place of the <b><i>'Registrar'</i></b> (if the <b><i>'Registrar'</i></b> does approve grades in this university).<br />
They can also finally approve grades for all departments in place of the Vice-Chancellor.<br />
They can edit a students's exam results even after then have been finally approved by the <b><i>'Vice-Chancellor'</i></b>. The student's GPA and cGPA will be appropriately adjusted without any further approval or notification. A record will be kept that a change has been made (as happens also for all approvals).<br />
<br />

<b><i>'Registrar'</i></b> has the same rights as <b><i>'University Examination Viewer'</i></b>.<br />
Additionally they can approve grades for all departments (if the Registrar is part of the approval chain in this university).<br />
They can perform any actions on the Semester/Programmes Admin Screen.<br />
They also can do all the same things as <b><i>'Registry'</i></b>.<br />
<br />

<b><i>'Registry'</i></b><br />
They can perform manual additions of course registrations for a particular student including the 3rd Semester.<br />
They can mark a particular course registration for a specific student as dropped (so the student is not required to take the exam).<br />
They can view all fully approved grading.<br />
They can see all student profiles.<br />
They can perform clearances of student applications to the university.<br />
They can see all staff profile data (except pay).<br />
<br />

<b><i>'Bursary'</i></b><br />
They can see all staff profile data (except pay).<br />
They can see all student payments.<br />
<br />

<b><i>'Bursar'</i></b> has the same rights as <b><i>'Bursary'</i></b>.<br />
They can see all staff profile data (including pay).<br />
<br />

<b><i>'Vice-Chancellor'</i></b> has the same rights as <b><i>'University Examination Viewer'</i></b>.<br />
Additionally they can finally approve grades for all departments.<br />
They also can do all the same things as <b><i>'Registry'</i></b>.<br />
They also can do all the same things as <b><i>'Bursary'</i></b>.<br />
<br />

<b><i>'Student Affairs Officer'</i></b> can see student profile data.<br />
<br />

<b><i>'Non-Academic Staff'</i></b> does not actually provide anything. (Any registered Staff Drupal user does however have some basic access to the system).<br />
<br />

<b><i>'Academic Staff'</i></b> can view all fully approved grading.<br />
<br />

<b><i>'Role Assigner'</i></b> can assign any of the above roles to any Staff Drupal user.";
}


function staff_view_form(&$obj) {
  $query = "SELECT
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS staff_name,
      GROUP_CONCAT(er.role SEPARATOR ', ') AS role_name,
      d.field_department_name_value,
      stpro.field_profile_staff_no_value AS staff_no,
      stpro.field_profile_room_value AS room_number,
      DATE_FORMAT(stpro.field_profile_appointment_date_value, '%%D %%b %%Y') AS appointment_date
    FROM {eduerp_roles} er
    INNER JOIN {node} npro ON er.uid=npro.uid AND npro.type='profile'
    INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
    INNER JOIN {node} nstpro ON er.uid=nstpro.uid AND nstpro.type='staff_profile'
    INNER JOIN {content_type_staff_profile} stpro ON nstpro.vid=stpro.vid
    LEFT  JOIN {content_type_department} d ON pro.field_profile_department_id_nid=d.nid
    WHERE er.uid=%d GROUP BY er.uid";
  $result = db_query($query, arg(2));
  $data = db_fetch_object($result);

  $form['staff_name'] = array(
    '#type' => 'item',
    '#title' => 'Staff Name',
    '#value' => $data->staff_name);
  $form['staff_number'] = array(
  '#title' => 'Staff Number',
    '#type' => 'item',
    '#size' => 20,
    '#value' => $data->staff_no);
  $form['staff_department'] = array(
    '#type' => 'item',
    '#title' => 'Department',
    '#value' => $data->field_department_name_value);
  $form['staff_room'] = array(
    '#title' => 'Room',
    '#type' => 'item',
    '#size' => 20,
    '#value' => $data->room_number);
  $form['appointment_date'] = array(
    '#type' => 'item',
    '#title' => 'Appointment date',
    '#value' => $data->appointment_date);
  $form['staff_role'] = array(
    '#value' => '<b>Roles:</b><br />' . $data->role_name);
  return $form;
}


function staff_course_assign() {
  global $user;
  global $user_profile;
  $user_profile = new UserProfile($user->uid);

  $delete_assignment_js =<<< EOD
function delete_course(id) {
  if (confirm('Are you sure you want to delete this course assignment?')) {
    $.get('/staff/ajax/delete/'+id, function(data) { location.href='/staff/registrablecourse'; });
  }
}
EOD;
  drupal_add_js($delete_assignment_js, 'inline');

  ob_start();

  if (empty($user_profile->profile_department_id)) {
    echo 'You are not a member of a Department, so cannot list courses for your department.';
  }
  else {
    echo  drupal_get_form('staff_course_assign_form1');
    echo "<div id='assigned_courses'>";
    course_assign_list();
    echo "</div>";
  }
  return ob_get_clean();
}


function staff_course_assign_form1(&$obj) {
  $form = array(
    '#theme' => 'form_panel_table',
    '#form_panel_table_attributes' => array('border' => 0));
  $form['title_test'] = array(
    '#type' => 'item',
    '#value' => '<b>Course</b>',
    '#required' => TRUE,
    '#form_panel_col' => 1,
    '#form_panel_row' => 1);
  $form['programme_id'] = array(
    '#type' => 'select',
    '#options' => staff_prg(),
    '#title' => 'Programme',
    '#attributes' => array(
      'style' => 'width:100px'),
    '#required' => TRUE,
    '#form_panel_col' => 1,
    '#form_panel_row' => 2);
  $form['level'] = array(
    '#type' => 'select',
    '#options' => staff_level(),
    '#title' => 'Level',
    '#required' => TRUE,
    '#ahah' => array('path' => 'staff/ajax/course', 'event' => 'change', 'method' => 'replace', 'wrapper' => 'courses'),
    '#form_panel_col' => 2,
    '#form_panel_row' => 2);
  $form['course_id'] = array(
    '#type' => 'select',
    '#title' => 'Course',
    '#options' => staff_course(),
    '#attributes' => array(
      'style' => 'width:100px'),
    '#prefix' => "<div id='courses'>",
    '#suffix' => "</div>",
    '#required' => TRUE,
    '#disabled' => TRUE,
    '#form_panel_col' => 3,
    '#form_panel_row' => 2);
  $form['course_type_id'] = array(
    '#type' => 'select',
    '#options' => array( 1 => 'Core', 2 => 'Elective'),
    '#title' => 'Course Type',
    '#required' => TRUE,
    '#form_panel_col' => 4,
    '#form_panel_row' => 2);
  $form['user_id'] = array(
    '#type' => 'select',
    '#options' => lecturer(),
    '#title' => 'Lecturer',
    '#required' => FALSE,
    '#form_panel_col' => 5,
    '#form_panel_row' => 2);
  $form['min_credit_load'] = array(
    '#type' => 'textfield',
    '#title' => 'Min Credit',
    '#required' => TRUE,
    '#default_value' => ($_SESSION['staff']['min_load']) ? $_SESSION['staff']['min_load'] : "",
    '#size' => 10,
    '#form_panel_col' => 1,
    '#form_panel_row' => 3);
  $form['max_credit_load'] = array(
    '#type' => 'textfield',
    '#title' => 'Max Credit',
    '#required' => TRUE,
    '#default_value' => ($_SESSION['staff']['max_load']) ? $_SESSION['staff']['max_load'] : "",
    '#size' => 10,
    '#form_panel_col' => 2,
    '#form_panel_row' => 3);
  $form['jambsubn'] = array(
    '#id' => 'edit-next',
    '#value' => 'Add',
    '#type' => 'submit',
    '#form_panel_col' => 1,
    '#form_panel_row' => 4);
  $form['sep'] = array(
    '#type' => 'item',
    '#value' => '',
    '#form_panel_col' => 1,
    '#form_panel_row' => 5);
  return $form;
}


function course_assign_list() {
  global $user_profile;

  $query = "
    SELECT courses.*, CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS staff_name
    FROM
      (SELECT
        pc.program_course_id,
        pc.course_type,
        pc.level AS level_name,
        pc.lecturer_id AS uid,
        p.field_programme_name_value AS programme_name,
        c.field_coursetitle_value AS course_title
      FROM {program_course} pc, {content_type_program} p, {content_type_course} c
      WHERE pc.programme_id=p.nid AND pc.course_id=c.nid AND p.field_department_id_nid=%d AND pc.historical=0
      ) AS courses
    LEFT JOIN {node} npro ON courses.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
    ORDER BY programme_name, level_name, course_title";
  $r = db_query($query, $user_profile->profile_department_id);
  $html = "<tr><th>Programme</th><th>Level</th><th>Course</th><th>Course Type</th><th>Lecturer</th><th>Actions</th></tr>";
  while ($f = db_fetch_object($r)) {
    $course_type = array('1' => 'Core', 2 => 'Elective');
    $html .=<<<EOD
<tr>
  <td>{$f->programme_name}</td><td>{$f->level_name}&nbsp;</td>
  <td>{$f->course_title}</td><td>{$course_type[$f->course_type]}</td>
  <td>{$f->staff_name}</td>
  <td><input type="button" class="delete_btn" value="Delete" onClick="delete_course({$f->program_course_id});" /></td>
</tr>
EOD;
  }
?>
<table border ="1">
<?php echo  $html; ?>
</table>
<?php
}


function staff_course_assign_form1_submit(&$form, &$state) {
  $values = $state['values'];

  // Semester is 1 below here because the form does not support semester yet
  $query = "SELECT program_course_id FROM {program_course} WHERE course_id=%d, programme_id=%d, level='%s', semester='%s'";
  $result = db_query($query, $values['course_id'], $values['programme_id'], $values['level'], '1');

  if ($row = db_fetch_object($result)) {
    $query = "UPDATE {program_course}
      SET course_id=%d, programme_id=%d, level='%s', semester='%s', course_type=%d, lecturer_id=%d, historical=0
      WHERE program_course_id=%d";
    db_query($query, $values['course_id'], $values['programme_id'], $values['level'], '1', $values['course_type_id'], $values['user_id'], $row->program_course_id);
  }
  else {
    $query = "INSERT INTO {program_course}
      SET course_id=%d, programme_id=%d, level='%s', semester='%s', course_type=%d, lecturer_id=%d, historical=0";
    db_query($query, $values['course_id'], $values['programme_id'], $values['level'], '1', $values['course_type_id'], $values['user_id']);
  }

  drupal_set_message("Course Added to Programme");
  drupal_goto("staff/registrablecourse");
}

function lecturer() {
  global $user_profile;

  $titles[''] = 'Select';
  $r = db_query("SELECT er.uid, CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS staff_name
    FROM {eduerp_roles} er
    INNER JOIN {node} npro ON er.uid=npro.uid AND npro.type='profile'
    INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
    WHERE pro.field_profile_department_id_nid=%d
    GROUP BY er.uid
    ORDER BY staff_name", $user_profile->profile_department_id);
  while ($f = db_fetch_object($r))
    $titles[$f->uid] = $f->staff_name;
  return  $titles;
}


function staff_prg() {
  global $user_profile;
  $titles[''] = '';
  $sql = "SELECT nid, field_programme_name_value AS value FROM {content_type_program} WHERE field_department_id_nid=%d ORDER BY field_programme_name_value";
  $rows = db_query($sql, $user_profile->profile_department_id);
  while ($row = db_fetch_object($rows)) {
    $titles[$row->nid] = $row->value;
  }
  return $titles;
}
function staff_level() {
  $titles['']="";
  $r=db_query("select * from `level` order by level_name");
    while ($f=db_fetch_object($r))
      $titles[$f->level_name] = $f->level_name;
  return  $titles;
}
function staff_course() {
  $titles[''] = '';
  $r = db_query("SELECT nid, field_coursetitle_value AS value FROM {content_type_course} ORDER BY field_coursetitle_value");
  while ($f = db_fetch_object($r))
    $titles[$f->nid] = $f->value;
  return  $titles;
}


function department($department_nid=0) {
  
    $titles = array();
    if($department_nid !=0)
      $r = db_query("SELECT nid, field_department_name_value AS value FROM {content_type_department} WHERE nid=%d ORDER BY field_department_name_value", $department_nid);
    else
      $r = db_query("SELECT nid, field_department_name_value AS value FROM {content_type_department} ORDER BY field_department_name_value");
    while ($f = db_fetch_object($r))
      $titles[$f->nid] = $f->value;
  
  return  $titles;
}
function course($department_nid) {
  
  $course = array();
  $r = db_query("SELECT nid, field_code_value AS value FROM {content_type_course} WHERE field_department_nid_nid=%d ORDER BY field_level_value, field_code_value", $department_nid);
  if (db_affected_rows($r) > 0) {
    while ($f = db_fetch_object($r))
      $course[$f->nid] = $f->value;
  }
  else
    $course[] = strip_tags(Error_Types(106));
 
  return  $course;
}
function staff_begin_clearance_form(&$obj) {
  if (arg(2)) {
    //echo "<br>2 ".arg(2);
    $_SESSION['staff']['mat']=arg(2);
    //$_SESSION['staff']['mat'];
    $obj['storage']['step']=2;
    return view_student_form2(TRUE);
  }
  if (!$obj['storage']['step'])
    $obj['storage']['step']=1;
  $st=$obj['storage']['step'];
  if ($st == 1)
    return staff_begin_clearance_form1($obj);
  else if ($st == 2)
    return view_student_form2(TRUE);
  //else if ($st==3)
    //return staff_begin_clearance_form3($obj);
  //else if ($st==4)
    //return staff_begin_clearance_form($obj);
}


function view_student_form(&$obj) {
  if (!$obj['storage']['step'])
    $obj['storage']['step']=1;
  $st=$obj['storage']['step'];
  if ($st == 1 or $st == 3)
    return view_student_form1($obj);
  else if ($st == 2)
    return view_student_form2(FALSE);
}
function search_staff_form(&$obj) {
  if (!$obj['storage']['step'])
    $obj['storage']['step']=1;
  $st=$obj['storage']['step'];
  if ($st == 1 or $st == 3)
    return search_staff_form1($obj);
  else if ($st == 2)
    return search_staff_form2($obj);
}
function view_student_payments_form(&$obj) {
  if (!$obj['storage']['step'])
    $obj['storage']['step']=1;
  $st=$obj['storage']['step'];
  if ($st == 1 or $st == 3)
    return view_student_payments_form1($obj);
  else if ($st == 2)
    return view_student_payments_form2($obj);
}


function _staff_clearance() {
  ob_start();

  $qry2 = "SELECT a.*, d.field_department_name_value AS department_name, c.field_college_name_value AS college_name
    FROM {admitted_student} a, {content_type_program} p, {content_type_department} d, {content_type_college} c
    WHERE a.first_choice=p.nid AND p.field_department_id_nid=d.nid AND d.field_college_id_nid=c.nid AND a.clearance_status=1 ORDER BY a.last_name ASC";
  $result2 = db_query($qry2);
  $found = FALSE;
?>
  <table border='1' align='center'>
  <tr bgcolor='#ACCFCC'><td colspan='7'><b>Cleared Student List</b></td></tr>
  <tr><td><b>Last Name</b></td><td><b>Middle Name</b></td><td><b>First Name</b></td><td><b>Mat. No.</b></td><td><b>College</b></td><td><b>Department</b></td><td><b>Clearance Date</b></td></tr>
<?php
  while ($f = db_fetch_object($result2)) {
    $found = TRUE;
?>
    <tr>
    <td><?php echo $f->last_name; ?></td>
    <td><?php echo $f->middle_name; ?></td>
    <td><?php echo $f->first_name; ?></td>
    <td><?php echo $f->matriculation_no; ?></td>
    <td><?php echo $f->college_name; ?></td>
    <td><?php echo $f->department_name; ?></td>
    <td><?php echo $f->clearance_date; ?></td>
    </tr>
<?php
  }
?>
  </table>
<?php
  if (!$found) {
    drupal_set_message('No students found.');
  }
  return ob_get_clean();
}


function staff_begin_clearance_form1(&$obj) {
  if (isset($_SESSION['staff']['mat'])) {
    unset($_SESSION['staff']['mat']);
  }
  if (isset($_SESSION['staff']['jamb'])) {
    unset($_SESSION['staff']['jamb']);
  }
  $form['#title'] = t('Begin Clearance');
  $form['matno'] = array(
    '#title' => 'Matriculation No .',
    '#type' => 'textfield',
    '#default_value' => $_POST['matno'],
    '#size' => 20);
  $form['lbl_or'] = array(
    '#type' => 'fieldset',
    '#title' => 'Or');
  $form['lbl_or']['jambno'] = array(
    '#title' => 'JAMB No .',
    '#default_value' => $_POST['jambno'],
    '#type' => 'textfield',
    '#size' => 20);
  $form['submit'] = array(
    '#value' => 'Next',
    '#type' => 'submit',
    '#id' => 'edit-next');
  return $form;
}
     /* Code adding ended on 27/02/2009 for student clearance page. */

    /* Code adding started on 27/02/2009 for student clearance page validation. */
function staff_begin_clearance_form_submit($form, &$state) {
  if ($state['clicked_button']['#id'] == 'edit-previous') {
    $state['storage']['step']--;
   // $state['#rebuild']=true;
    return;
  }
  elseif ($state['clicked_button']['#id'] == 'edit-next') {
    /*$values=$form['verify']['#post'];
if ($values['result']=='yes') {

//die;
 //echo $values['result'];
 $state['storage']['step']= 2;
}else if ($values['result']=='no') {

 $state['storage']['step']= 3;
}*/
    $state['storage']['values'][$state['storage']['step']]=$state['values'];
    $state['storage']['step']++;
    $state['#rebuild']=TRUE;
  }
  else
    return;
}
function staff_begin_clearance_form_validate($form, &$state) {
  global $user;

  if ($state['storage']['step'] == 1) {
    //print_R($form);
    $values=$form['lbl_or']['#post'];
    $jambno=$values['jambno'];
    if ($form['#post']['matno'] != '' && $jambno!='') {
      drupal_set_message('Please enter either Matriculation no or JAMB no.');
    }
    else {
      if ($jambno != '' && $form['#post']['matno']=='') {
        $qry = "select * from {admitted_student} where jambno='%s'";
        $res = db_query($qry, $jambno);
        if ($res && ($result = db_fetch_object($res))) {
          $_SESSION['staff']['mat']=$result->matriculation_no;
          $_SESSION['staff']['jamb']=$jambno;
        }
        else {
          form_set_error('jambno', "Jamb number not valid.");
        }
        if ($result->clearance_status == 1 && $result->verify_status == 1) form_set_error('jambno', 'This student has already been cleared');
      }
      else {
        $qry = "select * from {admitted_student} where matriculation_no='%s'";
        $res = db_query($qry, $form['#post']['matno']);
        if ($res && ($result = db_fetch_object($res))) {
          $_SESSION['staff']['mat']=$result->matriculation_no;
        }
        else {
          form_set_error('matno', "Matriculation number not valid.");
        }
        if ($result->clearance_status == 1 && $result->verify_status == 1) form_set_error('matno', 'This student has already been cleared');
      }
    }
  }
  if ($state['storage']['step'] == 2) {
    $results=$form['verify']['#post'];
    $results1=$form['clear']['#post'];
    $results2=$form['approve']['#post'];
    if (!veritas_has_role($user, 'Registry')) {
      if ($results['result'] == '' && $results1['cleared']=='') {
        drupal_set_message('Please specify verify and clearance status');
      }
      if ($results1['cleared'] == 'no' && $results1['reject'] == '') {
        drupal_set_message('Please explain reason for rejection.');
      }
      if ($results1['cleared'] == 'no' && $results['result'] == 'no') {
        $dt = date('Y-m-d');
        $qry = "update {admitted_student} set clearance_status=0, verify_status=0, clearance_date='". $dt ."' where student_id='". $_SESSION['staff']['stud_info'] ."'";
        $res = db_query($qry);
        if ($res && db_affected_rows()>0) {
          $_SESSION['staff']['msg']= sprintf('Student status updated sucessfully. <a href="%s">Continue Clearance</a>', url('staff/begin_clearance'));
          //drupal_set_message('Student status updated sucessfully.');
          drupal_goto('staff/cleared');
        }
      }
      if ($results1['cleared'] == 'yes' && $results['result'] == 'yes') {
        $dt = date('Y-m-d');
        $qry = "update {admitted_student} set clearance_status=1, verify_status=1, clearance_date='". $dt ."' where student_id='". $_SESSION['staff']['stud_info'] ."'";
        $res = db_query($qry);
        if ($res && db_affected_rows()>0) {
          $_SESSION['staff']['msg']= sprintf('Student status updated sucessfully. <a href="%s">Continue Clearance</a>', url('staff/begin_clearance'));
          drupal_set_message(sprintf('Student status updated sucessfully. <a href="%s">Continue Clearance</a>', url('staff/begin_clearance')));
          $userid = db_fetch_object(db_query("SELECT user_id FROM {admitted_student} WHERE student_id=%d", $_SESSION['staff']['stud_info']));
          $user_account = user_load($userid->user_id);
          veritas_set_role($user_account, 'Student');
          drupal_goto('staff/cleared');
        }
      }
      if ($results1['cleared'] == 'no' && $results['result'] == 'yes') {
        $dt = date('Y-m-d');
        $qry = "update {admitted_student} set clearance_status=0, verify_status=1, clearance_date='". $dt ."' where student_id='". $_SESSION['staff']['stud_info'] ."'";
        $res = db_query($qry);
        if ($res && db_affected_rows()>0) {
          $_SESSION['staff']['msg']= sprintf('Student status updated sucessfully. <a href="%s">Continue Clearance</a>', url('staff/begin_clearance'));
          //drupal_set_message('Student status updated sucessfully.');
          drupal_goto('staff/cleared');
        }
      }
      if ($results['result'] == 'yes') {
        $dt = date('Y-m-d');
        $qry = "update {admitted_student} set verify_status=1, clearance_date='". $dt ."' where student_id='". $_SESSION['staff']['stud_info'] ."'";
        $res = db_query($qry);
        if ($res && db_affected_rows()>0) {
          $_SESSION['staff']['msg']= sprintf('Student status updated sucessfully. <a href="%s">Continue Clearance</a>', url('staff/begin_clearance'));
          //drupal_set_message('Student status updated sucessfully.');
          drupal_goto('staff/cleared');
        }
      }
      if ($results['result'] == 'no') {
        $dt = date('Y-m-d');
        $qry = "update {admitted_student} set verify_status=0, clearance_date='" . $dt ."' where student_id='". $_SESSION['staff']['stud_info'] ."'";
        $res = db_query($qry);
        if ($res && db_affected_rows()>0) {
          $_SESSION['staff']['msg']= sprintf('Student status updated sucessfully. <a href="%s">Continue Clearance</a>', url('staff/begin_clearance'));
          //drupal_set_message('Student status updated sucessfully.');
          drupal_goto('staff/cleared');
        }
      }
      if ($results1['cleared'] == 'yes' && $results['result'] == 'no') {
          $_SESSION['staff']['msg']= sprintf('Students can only be cleared when their data are verified. <a href="%s">Continue Clearance</a>', url('staff/begin_clearance'));
        drupal_set_message(sprintf('Students can only be cleared when their data are verified. <a href="%s">Continue Clearance</a>', url('staff/begin_clearance')));
      }
    }
    if (veritas_has_role($user, 'Registry')) {
      if ($results2['accept'] == 'no') {
        $dt1 = date('Y-m-d');
        $qry_rej = "update {admitted_student} set clearance_status=0, verify_status=0, clearance_date='". $dt1 ."' where student_id='". $_SESSION['staff']['stud_info'] ."'";
        $res_rej = db_query($qry_rej);
        if ($res_rej && db_affected_rows()>0) {
          $_SESSION['staff']['msg']= sprintf('Student status updated sucessfully. <a href="%s">Continue Clearance</a>', url('staff/begin_clearance'));
          //drupal_set_message('Student status updated sucessfully.');
          drupal_goto('staff/cleared');
        }
      }
      if ($results2['accept'] == 'yes') {
        $dt2 = date('Y-m-d');
        $qry_acc = "update {admitted_student} set clearance_status=2, clearance_date='". $dt2 ."' where student_id='". $_SESSION['staff']['stud_info'] ."'";
        $res_acc = db_query($qry_acc);
        if ($res_acc && db_affected_rows()>0) {
          $_SESSION['staff']['msg']= sprintf('Student status updated sucessfully. <a href="%s">Continue Clearance</a>', url('staff/begin_clearance'));
          //drupal_set_message('Student status updated sucessfully.');
          drupal_goto('staff/cleared');
        }
      }
    }
  }
}
    /* Code adding ended on 27/02/2009 for student clearance page validation. */

function load_image() {
  global $result;
  $qry9 = "select a . pic_id, b . filepath from `admitted_student` as a join files as b on a . pic_id=b . fid where a . student_id='". $_SESSION['staff']['stud_info'] ."'";
  $res9=db_query($qry9);
  if ($res9 && ($result9=db_fetch_object($res9))) {
    //print_R($result9);
    $pic_path=$result9->filepath;
    /*$host=$_SERVER['HTTP_HOST'];
    $repalce=$_SERVER['DOCUMENT_ROOT'];
    $file_path='http://';
    $file_path .=str_replace($repalce, $host, $pic_path);
    $file_path=strip_tags($file_path);*/
    $file_path = file_create_url($pic_path);
    //$path='<img src="'.$file_path.'" />';
  }
  else {
    //$path='No Images Available';
    // TODO: Fix this situation
  }
  return $file_path;
}
function load_signature() {
  //global $result;
  $qry10 = "select a . signature_pic_id, b . filepath from `admitted_student` as a join files as b on a . signature_pic_id=b . fid where a . student_id='". $_SESSION['staff']['stud_info'] ."'";
  $res10=db_query($qry10);
  if ($res10 && ($result10=db_fetch_object($res10))) {
    //print_R($result10);
   //echo $_SESSION['staff']['stud_info'];
    $pic_path=$result10->filepath;
/*    $host=$_SERVER['HTTP_HOST'];
    $repalce=$_SERVER['DOCUMENT_ROOT'];
    $file_path='http://';
    $file_path .=str_replace($repalce, $host, $pic_path);
    $file_path = strip_tags($file_path);*/
    $file_path = file_create_url($pic_path);
    //$path='<img src="'.$file_path.'" />';
  }
  else {
    //$path='No Images Available';
  }
  return $file_path;
}
function staff_begin_clearance_form4(&$obj) {
  $message=drupal_mail(
    'staff',
    'rejection',
    $_SESSION['student']['data']->email_address,
    language_default(),
    array(),
    NULL,
    FALSE);
  $message['body']=veritas_student_receipt($f, TRUE);
  $message['subject']='Transaction Receipt';
  $message['headers'] = array_merge(
    $message['headers'],
    array( 'MIME-Version' => '1.0',
      'Content-Type'  => 'text/html;
 charset=UTF-8'));
  drupal_mail_send($message);
}
function staff_cleared_student() {
  $msg=$_SESSION['staff']['msg'];
  ob_start();
?>
  <center><h5><? echo $msg; ?></h5>
<?php
  $d=ob_get_clean();
  return $d;
}
function staff_notcleared_student() {
  global $user;

  if (!veritas_has_role($user, 'Registry')) {
    $_SESSION['staff']['msg']='You are not authorized to access this page.';
    drupal_goto('staff/cleared');
  }
  ob_start();
  if (isset($_SESSION['staff']['mat'])) {
    unset($_SESSION['staff']['mat']);
  }
  /*Query to fetch all the data's from student, department and college table.*/
  $qry2 = "
    SELECT `as`.*, d.field_department_name_value AS department_name, c.field_college_name_value AS college_name
    FROM {admitted_student} `as`, {content_type_program} p, {content_type_department} d, {content_type_college} c
    WHERE as.first_choice=p.nid AND p.field_department_id_nid=d.nid AND d.field_college_id_nid=c.nid AND as.clearance_status=2 ORDER BY a.last_name ASC";
  $result2 = db_query($qry2);
  //echo db_error();
  if (!db_fetch_object($result2)) {
    drupal_set_message('No students for clearance.');
  }
?>
  <table border='1' align='center'>
  <tr bgcolor='#ACCFCC'><td colspan='7'><b>Not Cleared Student List</b></td></tr>
  <tr><td><b>Mat. No.</b></td><td><b>Last Name</b></td><td><b>Middle Name</b></td><td><b>First Name </b></td><td><b>College</b></td><td><b>Department</b></td><!--<td><b>Clearance Date</b></td>--></tr>
<?php
  while ($f=db_fetch_object($result2)) {
?>
    <tr>
    <td><a href='<?php echo 'begin_clearance/'. $f->matriculation_no;?>'><?php echo $f->matriculation_no;?></a></td>
    <!--<td><? url('begin_clearance');?><? $data[]=$f->matriculation_no; $_SESSION['staff']['mat']=$data; echo $f->matriculation_no; ?></td>-->
    <td><?php echo $f->last_name; ?></td>
    <td><?php echo $f->middle_name; ?></td>
    <td><? echo $f->first_name; ?></td>
    <!--<td><? echo $f->matriculation_no; ?></td>-->
    <td><?php echo $f->college_name; ?></td>
    <td><?php echo $f->department_name; ?></td>
    <!--<td><? echo $f->clearance_date; ?></td>-->
    </tr>
<?php
  }
?>
  </table>
<?php
  return ob_get_clean();
}


function view_student_form1(&$obj) {
  if (isset($_SESSION['staff']['mat'])) {
    unset($_SESSION['staff']['mat']);
  }
  if (isset($_SESSION['staff']['jamb'])) {
    unset($_SESSION['staff']['jamb']);
  }
  $form['#title'] = t('Search Student');
  $form['matno'] = array(
    '#title' => 'Matriculation No .',
    '#type' => 'textfield',
    '#default_value' => $_POST['matno'],
    '#size' => 20);
  $form['lbl_or'] = array(
    '#type' => 'fieldset',
    '#title' => 'Or');
  $form['lbl_or']['jambno'] = array(
    '#title' => 'JAMB No .',
    '#default_value' => $_POST['jambno'],
    '#type' => 'textfield',
    '#size' => 20);
  $form['submit'] = array(
    '#value' => 'Next',
    '#type' => 'submit',
    '#id' => 'edit-next');
  return $form;
}
function view_student_form_submit($form, &$state) {
  if ($state['clicked_button']['#id'] == 'edit-previous') {
    $state['storage']['step']--;
    return;
  }
  elseif ($state['clicked_button']['#id'] == 'edit-next') {
    $state['storage']['values'][$state['storage']['step']]=$state['values'];
    // Prevent the counter from going beyond 2
    $state['storage']['step'] = (++$state['storage']['step'] > 2) ? 1 : $state['storage']['step'];
    $state['#rebuild']=TRUE;
  }
  else
    return;
}
function view_student_form_validate($form, &$state) {
  if ($state['storage']['step'] == 1) {
    $values=$form['lbl_or']['#post'];
    $jambno=$values['jambno'];
    if ($form['#post']['matno'] != '' && $jambno!='') {
      drupal_set_message('Please enter either Matriculation no or JAMB no.');
    }
    else {
      if ($jambno != '' && $form['#post']['matno']=='') {
        $qry = "select * from {admitted_student} where jambno='%s'";
        $res = db_query($qry, $jambno);
        if ($res && ($result = db_fetch_object($res))) {
          $_SESSION['staff']['mat']=$result->matriculation_no;
          $_SESSION['staff']['jamb']=$jambno;
        }
        else {
          form_set_error('jambno', "Jamb number not valid.");
        }
      }
      else {
        $qry = "select * from {admitted_student} where matriculation_no='%s'";
        $res = db_query($qry, $form['#post']['matno']);
        if ($res && ($result = db_fetch_object($res))) {
          $_SESSION['staff']['mat']=$result->matriculation_no;
        }
        else {
          form_set_error('matno', "Matriculation number not valid.");
        }
      }
    }
  }
}


function view_student_form2($clearanceform) {
  global $user;

  if ($clearanceform) $clearancesql = 'AND (verify_status != 1 OR clearance_status != 1)';
  else $clearancesql = '';

  if (isset($_SESSION['staff']['jamb'])) {
    $qry = "select * from {admitted_student} where jambno='%s' $clearancesql";
    $res = db_query($qry, $_SESSION['staff']['jamb']);
  }
  else {
    $qry = "select * from {admitted_student} where matriculation_no='%s' $clearancesql";
    $res = db_query($qry, $_SESSION['staff']['mat']);
  }

  if ($res && ($result = db_fetch_object($res))) {
    $_SESSION['staff']['stud_info'] = $result->student_id;

    $qry2 = "SELECT a.ext_exam_rec_id, a.exam_body, a.exam_date, a.exam_center_name, a.exam_number, b.exam_body_name FROM {admitted_ext_exam_record} AS a LEFT OUTER JOIN {ext_exam_body} AS b ON a.exam_body=b.exam_body_id WHERE a.exam_student_id=%d";
    $res2 = db_query($qry2, $result->student_id);

    $data_key = array();
    while ($result2 = db_fetch_object($res2)) {
      $data[$result2->ext_exam_rec_id] = array(
        'exam_body' => $result2->exam_body,
        'exam_date' => $result2->exam_date,
        'exam_center_name' => $result2->exam_center_name,
        'exam_number' => $result2->exam_number,
      );
      $query3 = "SELECT * FROM {admitted_ext_exam_detail} WHERE ext_exam_record_id=%d";
      $r=db_query($query3, $result2->ext_exam_rec_id);
      while ($f=db_fetch_object($r)) {
        $data[$result2->ext_exam_rec_id]['subjects'][] = array('subject' => $f->subject_id, 'grade' => $f->grade_id);
        if (!in_array($result2->ext_exam_rec_id, $data_key)) {
          $data_key[] = $result2->ext_exam_rec_id;
        }
      }
    }

    $qry4 = "SELECT
        p.nid AS programme_id,
        p.field_programme_name_value AS programme_name,
        d.nid AS department_id,
        d.field_department_name_value AS department_name,
        c.field_college_abbreviation_value AS college_abbreviation,
        c.field_college_name_value AS college_name
      FROM {content_type_program} p, {content_type_department} d, {content_type_college} c
      WHERE p.nid=%d AND p.field_department_id_nid=d.nid AND d.field_college_id_nid=c.nid";
    $res4 = db_query($qry4, $result->first_choice);
    $result4 = db_fetch_object($res4);
    $qry6 = "select * from {admitted_next_of_kin} where student_id='". $result->student_id ."'";
    $res6 = db_query($qry6);
    $result6 = db_fetch_object($res6);
    $qry7 = "select * from {admitted_sponsor} where student_id='". $result->student_id ."'";
    $res7 = db_query($qry7);
    $result7 = db_fetch_object($res7);

    // From Student Affairs display (moved here with UI)...
    $qry8 = "SELECT ah.name as `name`, at.name as `type` FROM {accomodation_hostels} ah, {accomodation_types} at, {admitted_student_accomodation} asa WHERE asa.student_id=%d AND ah.id=asa.hostel_id AND at.id=ah.accomodation_type_id";
    $res8 = db_query($qry8, $result->student_id);
    $result8 = db_fetch_object($res8);
  }
  $form['extra'] = array(
    '#type' => 'fieldset',
    '#title' => 'Admission Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['extra']['college0'] = array(
    '#type' => 'item',
    '#title' => 'College',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['extra']['college1'] = array(
    '#type' => 'item',
    '#value' => $result4->college_abbreviation,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['dept0'] = array(
    '#type' => 'item',
    '#title' => 'Department',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['dept1'] = array(
    '#type' => 'item',
    '#value' => $result4->department_name,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['programme0'] = array(
    '#type' => 'item',
    '#title' => 'Programme',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['programme1'] = array(
    '#type' => 'item',
    '#value' => $result4->programme_name,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['extra']['study_mode0'] = array(
    '#type' => 'item',
    '#title' => 'Mode of Study',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['extra']['study_mode1'] = array(
    '#type' => 'item',
    '#value' => $result->mode_of_study,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['space14'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['extra']['entry_mode0'] = array(
    '#type' => 'item',
    '#title' => 'Mode of Entry',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['entry_mode1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->mode_of_entry,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['sess0'] = array(
    '#type' => 'item',
    '#title' => 'SESSION',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['sess1'] = array(
    '#type' => 'item',
    '#value' => variable_get('eduerp_current_session', ''),
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>',
    '#size' => 15);
  $form['personal'] = array(
    '#type' => 'fieldset',
    '#title' => 'Personal Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['personal']['img_lbl0'] = array(
    '#type' => 'item',
    '#title' => 'Student Image',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['personal']['img_lbl1'] = array(
    '#value' => '<img src="'. load_image() .'" width="200" />',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space11'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['img_sig0'] = array(
    '#type' => 'item',
    '#title' => 'Student Signature',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['img_sig1'] = array(
    '#value' => '<img src="'. load_signature() .'" width="300" />',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['matno0'] = array(
    '#type' => 'item',
    '#title' => 'Matriculation No.',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['matno1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->matriculation_no,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space0'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['jambno0'] = array(
    '#type' => 'item',
    '#title' => 'JAMB No.',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['jambno1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->jambno,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['fname0'] = array(
    '#type' => 'item',
    '#title' => 'First Name',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['fname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->first_name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mname0'] = array(
    '#type' => 'item',
    '#title' => 'Middle Name',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->middle_name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space2'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['lname0'] = array(
    '#type' => 'item',
    '#title' => 'Last Name',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['lname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->last_name,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['dob0'] = array(
    '#type' => 'item',
    '#title' => 'Date of Birth',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['dob1'] = array(
    '#type' => 'item',
    '#value' => $result->dob,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space7'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['hobbies0'] = array(
    '#type' => 'item',
    '#title' => 'Hobbies',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['hobbies1'] = array(
    '#type' => 'item',
    '#value' => $result->hobbies,
    '#prefix' => '<td colspan="4">',
    '#suffix' => '</td></tr>');
  $form['personal']['gender0'] = array(
    '#type' => 'item',
    '#title' => 'Gender',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['gender1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->gender,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space3'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['origin0'] = array(
    '#type' => 'item',
    '#title' => 'State Of Origin',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['origin1'] = array(
    '#type' => 'select',
    '#options' => veritas_states(),
    '#default_value' => $result->state_origin,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['personal']['lga0'] = array(
    '#type' => 'item',
    '#title' => 'LGA Of Origin',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['lga1'] = array(
    '#type' => 'select',
    '#options' => veritas_lga(),
    '#default_value' => $result->lkup_lga_origin,
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['personal']['space4'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['mstatus0'] = array(
    '#type' => 'item',
    '#title' => 'Marital Status',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mstatus1'] = array(
    '#type' => 'item',
    '#value' => $result->marital_status,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['address0'] = array(
    '#type' => 'item',
    '#title' => 'Permanent Address',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['address1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result->permanent_address1,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space5'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['city0'] = array(
    '#type' => 'item',
    '#title' => 'City',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['city1'] = array(
    '#type' => 'item',
    '#value' => $result->permanent_address_city,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['state0'] = array(
    '#type' => 'item',
    '#title' => 'State',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['state1'] = array(
    '#type' => 'select',
    '#options' => veritas_states(),
    '#default_value' => $result->permanent_address_state,
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['personal']['space6'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['mobile0'] = array(
    '#type' => 'item',
    '#title' => 'Mobile No.',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile1'] = array(
    '#type' => 'item',
    '#value' => $result->mobile_number,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['email0'] = array(
    '#type' => 'item',
    '#title' => 'E-mail address',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['email1'] = array(
    '#type' => 'item',
    '#value' => $result->email_address,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['space15'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['personal']['health0'] = array(
    '#type' => 'item',
    '#title' => 'Health Status',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['health1'] = array(
    '#type' => 'item',
    '#value' => $result->physical_health_status,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');
  $form['nextofkin'] = array(
    '#type' => 'fieldset',
    '#title' => 'Sponsor/Next of Kin Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['nextofkin']['nofkin0'] = array(
    '#type' => 'item',
    '#title' => 'Next of Kin Name',
    '#prefix' => '<table cellspacing="10" cellpadding="10"><tr><td>',
    '#suffix' => '</td>');
  $form['nextofkin']['nofkin1'] = array(
    '#type' => 'item',
    '#value' => $result6->name,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['relation0'] = array(
    '#type' => 'item',
    '#title' => 'Relationship',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['relation1'] = array(
    '#type' => 'item',
    '#value' => $result6->relationship,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['mobile0'] = array(
    '#type' => 'item',
    '#title' => 'Mobile',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['mobile1'] = array(
    '#type' => 'item',
    '#value' => $result6->mobile,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['nextofkin']['sponsor0'] = array(
    '#type' => 'item',
    '#title' => 'Sponsor',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['nextofkin']['sponsor1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result7->name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  if ($result7->mobile != $result6->mobile) {
    $form['nextofkin']['smobile0'] = array(
      '#type' => 'item',
      '#title' => 'Mobile',
      '#prefix' => '<td>',
      '#suffix' => '</td>');
    $form['nextofkin']['smobile1'] = array(
      '#type' => 'item',
      '#size' => 20,
      '#value' => $result7->mobile,
      '#prefix' => '<td>',
      '#suffix' => '</td></tr></table>');
  }
  else {
    $form['nextofkin']['smobile0'] = array(
      '#type' => 'item',
      '#title' => 'Mobile',
      '#prefix' => '<td>',
      '#suffix' => '</td></tr></table>');
  }
  $form['fs'] = array(
    '#type' => 'fieldset',
    '#title' => 'O-Level Results 1st Sitting',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['fs']['qualification0'] = array(
    '#type' => 'item',
    '#title' => 'QUALIFICATION',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['fs']['qualification1'] = array(
    '#type' => 'item',
    '#value' => $result->h_qualification1,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs']['space22'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs']['institution0'] = array(
    '#type' => 'item',
    '#title' => 'INSTITUTION',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs']['institution1'] = array(
    '#type' => 'item',
    '#value' => $result->h_institution1,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['fs']['ebd0'] = array(
    '#type' => 'item',
    '#title' => 'EXAM BODY',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['fs']['ebd1'] = array(
    '#type' => 'select',
    '#options' => _student_bod(),
    '#default_value' => $data[$data_key[0]]['exam_body'],
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['fs']['space8'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs']['edate0'] = array(
    '#type' => 'item',
    '#title' => 'EXAM DATE',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs']['edate1'] = array(
    '#type' => 'date',
    '#default_value' => array(
      'day' => (int)substr($data[$data_key[0]]['exam_date'], -2),
      'month' => (int)substr($data[$data_key[0]]['exam_date'], 5, 2),
      'year' => substr($data[$data_key[0]]['exam_date'], 0, 4)),
    '#prefix' => '<td>',
    '#element_validate' => array('validate_always_true'),
    '#suffix' => '</td></tr>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['fs']['ec0'] = array(
    '#type' => 'item',
    '#title' => 'EXAM CENTER',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['fs']['ec1'] = array(
    '#type' => 'item',
    '#size' => '20',
    '#value' => $data[$data_key[0]]['exam_center_name'],
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs']['space9'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs']['eno0'] = array(
    '#type' => 'item',
    '#title' => 'EXAM NO',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs']['eno1'] = array(
    '#type' => 'item',
    '#size' => '20',
    '#value' => $data[$data_key[0]]['exam_number'],
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');
  $form['fs']['ms1'] = array(
    '#type' => 'item',
    '#value' => 'SUBJECTS',
    '#prefix' => '<table><tr><td></td><th>',
    '#suffix' => '</th>');
  $form['fs']['ms2'] = array(
    '#type' => 'item',
    '#value' => 'GRADE',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>',
    '#attributes' => array('disabled' => 'disabled'));
  $temp=0;
  for ($i=1;$i<=9;$i++) {
    $temp = $i-1;
    $form['fs']["m1$i"] = array(
      '#value' => '<tr><td>'. $i,
      '#suffix' => '</td>');
    $form['fs']["s1$i"] = array(
      '#type' => 'select',
      '#options' => _student_sub(),
      '#prefix' => '<td>',
      '#suffix' => '</td>',
      '#default_value' => $data[$data_key[0]]['subjects'][$temp]['subject'],
      '#attributes' => array('disabled' => 'disabled'));
    if ($i == 9)
      $tend="</table>";
    $form['fs']["g1$i"] = array(
      '#type' => 'select',
      '#options' => _student_gr(),
      '#prefix' => '<td>',
      '#suffix' => '</td></tr>'. $tend,
      '#default_value' => $data[$data_key[0]]['subjects'][$temp]['grade'],
      '#attributes' => array('disabled' => 'disabled'));
    $temp = 0;
  }
  $form['fs2'] = array(
    '#id' => 'setting_sec',
    '#type' => 'fieldset',
    '#title' => 'O-Level Results 2nd Sitting',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['fs2']['qualification10'] = array(
    '#type' => 'item',
    '#title' => 'QUALIFICATION',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['fs2']['qualification11'] = array(
    '#type' => 'item',
    '#value' => $result->h_qualification2,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs2']['space25'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs2']['institution10'] = array(
    '#type' => 'item',
    '#title' => 'INSTITUTION',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs2']['institution11'] = array(
    '#type' => 'item',
    '#value' => $result->h_institution2,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['fs2']['ebd20'] = array(
    '#type' => 'item',
    '#title' => 'EXAM BODY',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['fs2']['ebd21'] = array(
    '#type' => 'select',
    '#options' => _student_bod(),
    '#default_value' => $data[$data_key[1]]['exam_body'],
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['fs2']['space10'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs2']['edate20'] = array(
    '#type' => 'item',
    '#title' => 'EXAM DATE',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs2']['edate21'] = array(
    '#type' => 'date',
    '#default_value' => array(
      'day' => (int)substr($data[$data_key[1]]['exam_date'], -2),
      'month' => (int)substr($data[$data_key[1]]['exam_date'], 5, 2),
      'year' => substr($data[$data_key[1]]['exam_date'], 0, 4)),
    '#prefix' => '<td>',
    '#element_validate' => array('validate_always_true'),
    '#suffix' => '</td></tr>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['fs2']['ec20'] = array(
    '#type' => 'item',
    '#title' => 'EXAM CENTER',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['fs2']['ec21'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $data[$data_key[1]]['exam_center_name'],
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs2']['space11'] = array(
    '#type' => 'item',
    '#prefix' => '<td>&nbsp;',
    '#suffix' => '</td>');
  $form['fs2']['eno20'] = array(
    '#type' => 'item',
    '#title' => 'EXAM NO',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['fs2']['eno21'] = array(
    '#type' => 'item',
    '#size' => '20',
    '#value' => $data[$data_key[1]]['exam_number'],
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');
  $form['fs2']['ms11']=array(
    '#type' => 'item',
    '#value' => 'SUBJECTS',
    '#prefix' => '<table><tr><td></td><th>',
    '#suffix' => '</th>');
  $form['fs2']['ms12'] = array(
    '#type' => 'item',
    '#value' => 'GRADE',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $tend='';
  for ($i=1;$i<=9;$i++) {
    $temp = $i-1;
    $form['fs2']["m2$i"] = array(
      '#value' => '<tr><td>'. $i,
      '#suffix' => '</td>');
    $form['fs2']["s2$i"] = array(
      '#type' => 'select',
      '#options' => _student_sub(),
      '#prefix' => '<td>',
      '#suffix' => '</td>',
      '#default_value' => $data[$data_key[1]]['subjects'][$temp]['subject'],
      '#attributes' => array('disabled' => 'disabled'));
    if ($i == 9)
      $tend="</table>";
    $form['fs2']["g2$i"] = array(
      '#type' => 'select',
      '#options' => _student_gr(),
      '#prefix' => '<td>',
      '#suffix' => '</td></tr>'. $tend,
      '#default_value' => $data[$data_key[1]]['subjects'][$temp]['grade'],
      '#attributes' => array('disabled' => 'disabled'));
    $temp = 0;
  }

  $form['accomodation'] = array(
    '#type' => 'fieldset',
    '#title' => 'Accomodation Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['accomodation']['hostelname0'] = array(
    '#type' => 'item',
    '#title' => 'Hostel Name',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['accomodation']['hostelname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result8->name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['accomodation']['hosteltype0'] = array(
    '#type' => 'item',
    '#title' => 'Hostel Type',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['accomodation']['hosteltype1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $result8->type,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');

  if (!veritas_has_role($user, 'Registry')) {
    $form['verify'] = array(
      '#type' => 'fieldset',
      '#title' => 'Verified Results',
      '#collapsed' => TRUE,
      '#collapsible' => TRUE);
    $form['verify']['result'] = array(
      '#type' => 'radios',
      '#title' => 'Is Verified',
      '#attributes' => array('disabled' => 'disabled'),
      '#default_value' => $result->verify_status ? 'yes' : 'no',
      '#options' => array('yes' => 'Yes', 'no' => 'No'));
    if ($clearanceform) {
      $form['verify']['result'] = array(
        '#type' => 'radios',
        '#title' => 'Is Verified',
        '#options' => array('yes' => 'Yes', 'no' => 'No'));
    }
    $form['clear'] = array(
      '#type' => 'fieldset',
      '#title' => 'Clear Student',
      '#collapsed' => TRUE,
      '#collapsible' => TRUE);
    $form['clear']['cleared'] = array(
      '#type' => 'radios',
      '#title' => 'Is Cleared',
      '#attributes' => array('disabled' => 'disabled'),
      '#default_value' => $result->clearance_status ? 'yes' : 'no',
      '#options' => array('yes' => 'Yes', 'no' => 'No'));
    if ($clearanceform) {
      $form['clear']['cleared'] = array(
        '#type' => 'radios',
        '#title' => 'Is Cleared',
        '#options' => array('yes' => 'Yes', 'no' => 'No'));
      $form['clear']['reject'] = array(
        '#type' => 'textarea',
        '#title' => 'Reason for Rejection',
        '#prefix' => '<div id="reason">',
        '#suffix' => '</div>');
    }
  }
  if (veritas_has_role($user, 'Registry')) {
      $form['approve'] = array(
        '#type' => 'fieldset',
        '#title' => 'Approve Student',
        '#collapsed' => TRUE,
        '#collapsible' => TRUE);
      $form['approve']['accept'] = array(
        '#type' => 'radios',
        '#options' => array('yes' => 'Accept', 'no' => 'Reject'));
  }

  $form['submit'] = array(
    '#id' => 'edit-next',
    '#value' => 'Continue',
    '#type' => 'submit');
  if ($clearanceform) {
    $form['submit'] = array(
      '#id' => 'edit-next',
      '#value' => 'Submit',
      '#type' => 'submit');
  }

  $form['#multistep'] = TRUE;
  $form['#redirect'] = FALSE;
  return $form;
}


function validate_always_true($element, &$form_state){
  // Defined to provide a means of suppressing certain validation errors
}


function _get_staff_list() {
  $q = "SELECT er.uid, CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS name
    FROM {eduerp_roles} er
    INNER JOIN {node} npro ON er.uid=npro.uid AND npro.type='profile'
    INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
    GROUP BY er.uid ORDER BY name";
  $rs = db_query($q);
  $staff_list = array(0 => "Select One");

  while ($row = db_fetch_object($rs)) {
    $staff_list[$row->uid] = $row->name;
  }

  return $staff_list;
}


function _get_staff_list_number() {
  $q = "SELECT er.uid, CONCAT(stpro.field_profile_staff_no_value, ': ', pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS name
    FROM {eduerp_roles} er
    INNER JOIN {node} npro ON er.uid=npro.uid AND npro.type='profile'
    INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
    INNER JOIN {node} nstpro ON er.uid=nstpro.uid AND nstpro.type='staff_profile'
    INNER JOIN {content_type_staff_profile} stpro ON nstpro.vid=stpro.vid
    GROUP BY er.uid ORDER BY name";
  $rs = db_query($q);
  $staff_list = array(0 => "Select One");

  while ($row = db_fetch_object($rs)) {
    $staff_list[$row->uid] = $row->name;
  }

  return $staff_list;
}


function search_staff_form1(&$obj) {
  if (isset($_SESSION['staff']['staff_no'])) {
    unset($_SESSION['staff']['staff_no']);
  }
  $form['#title'] = t('Search Staff');
  $form['staff_no'] = array(
    '#title' => 'Staff No.',
    '#type' => 'select',
    '#options' => _get_staff_list_number());
  $form['lbl_or'] = array(
    '#type' => 'fieldset',
    '#title' => 'Or');
  $form['lbl_or']['user_id'] = array(
    '#title' => 'Staff Name',
    '#type' => 'select',
    '#options' => _get_staff_list());
  $form['submit'] = array(
    '#value' => 'Next',
    '#type' => 'submit',
    '#id' => 'edit-next');
  return $form;
}


function search_staff_form_submit($form, &$state) {
  if ($state['clicked_button']['#id'] == 'edit-previous') {
    $state['storage']['step']--;
    return;
  }
  elseif ($state['clicked_button']['#id'] == 'edit-next') {
    $state['storage']['values'][$state['storage']['step']]=$state['values'];
    $state['storage']['step'] = (++$state['storage']['step'] > 2) ? 1 : $state['storage']['step'];
    $state['#rebuild']=TRUE;
  }
  else
    return;
}


function search_staff_form_validate($form, &$state) {
  if ($state['storage']['step'] == 1) {
    $values = $form['lbl_or']['#post'];
    $staff_no = $values['staff_no'];
    if ($staff_no != '' && !$form['#post']['user_id']) {
      if ($staff_no > 0) {
        $_SESSION['staff']['user_id'] = $staff_no;
      }
      else {
        form_set_error('staff_no', "Staff Number is not valid.");
      }
    }
    else {
      if ($form['#post']['user_id'] > 0) {
        $_SESSION['staff']['user_id'] = $form['#post']['user_id'];
      }
      else {
        form_set_error('user_id', "Please select a Staff Name from the list or enter the Staff Number.");
      }
    }
  }
}


function search_staff_form2(&$obj) {
  $user_profile = new UserProfile($_SESSION['staff']['user_id']);
  $staff_user = user_load($_SESSION['staff']['user_id']);

  $form['extra'] = array(
    '#type' => 'fieldset',
    '#title' => 'Staff Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['extra']['staff_no0'] = array(
    '#type' => 'item',
    '#title' => 'Staff No.',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['extra']['staff_no1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_staff_no,
    '#size' => 20,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['extra']['type0'] = array(
    '#type' => 'item',
    '#title' => 'Staff Type',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['extra']['type1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_staff_type,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['posn0'] = array(
    '#type' => 'item',
    '#title' => 'Staff Position',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['posn1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['grade0'] = array(
    '#type' => 'item',
    '#title' => 'Grade Level',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['grade1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['extra']['salary0'] = array(
    '#type' => 'item',
    '#title' => 'Staff Salary',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['extra']['salary1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['employ_type0'] = array(
    '#type' => 'item',
    '#title' => 'Employment Type',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['employ_type1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_employment_type,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['appt_date0'] = array(
    '#type' => 'item',
    '#title' => 'Appointment Date',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['appt_date1'] = array(
    '#type' => 'item',
    '#value' => date('jS F Y', strtotime($user_profile->profile_appointment_date)),
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>',
    '#size' => 15);
  $form['personal'] = array(
    '#type' => 'fieldset',
    '#title' => 'Personal Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['personal']['fname0'] = array(
    '#type' => 'item',
    '#title' => 'First Name',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['personal']['fname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_first_name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mname0'] = array(
    '#type' => 'item',
    '#title' => 'Middle Name',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_middle_name,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['lname0'] = array(
    '#type' => 'item',
    '#title' => 'Last Name',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['lname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_last_name,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['dob0'] = array(
    '#type' => 'item',
    '#title' => 'Date of Birth',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['dob1'] = array(
    '#type' => 'item',
    '#value' => date('jS F Y', strtotime($user_profile->profile_dob)),
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['gender0'] = array(
    '#type' => 'item',
    '#title' => 'Gender',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['gender1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_gender,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['origin0'] = array(
    '#type' => 'item',
    '#title' => 'State Of Origin',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['origin1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_state_name_origin,
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    '#attributes' => array('disabled' => 'disabled'));
  $form['personal']['lga0'] = array(
    '#type' => 'item',
    '#title' => 'LGA Of Origin',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['lga1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_lga_name,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['mstatus0'] = array(
    '#type' => 'item',
    '#title' => 'Marital Status',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['mstatus1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_marital_status,
    '#size' => 20,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['address0'] = array(
    '#type' => 'item',
    '#title' => 'Permanent Address',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['address1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_permanent_address,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['city0'] = array(
    '#type' => 'item',
    '#title' => 'City',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['city1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_permanent_city,
    '#size' => 20,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['t_address0'] = array(
    '#type' => 'item',
    '#title' => 'Temporary Address',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['t_address1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $user_profile->profile_temporary_address,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['t_city0'] = array(
    '#type' => 'item',
    '#title' => 'City',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['t_city1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_temporary_city . ', ' . $user_profile->profile_temporary_state,
    '#size' => 20,
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['tel0'] = array(
    '#type' => 'item',
    '#title' => 'Tel. No.',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['tel1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile0'] = array(
    '#type' => 'item',
    '#title' => 'GSM No.',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile1'] = array(
    '#type' => 'item',
    '#value' => $user_profile->profile_mobile_number,
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile20'] = array(
    '#type' => 'item',
    '#title' => 'GSM No.(2)',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile21'] = array(
    '#type' => 'item',
    '#value' => '',
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['email0'] = array(
    '#type' => 'item',
    '#title' => 'E-mail address',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['email1'] = array(
    '#type' => 'item',
    '#value' => $staff_user->mail,
    '#size' => 20,
    '#prefix' => '<td colspan="6">',
    '#suffix' => '</td></tr></table>');
  $form['nextofkin'] = array(
    '#type' => 'fieldset',
    '#title' => 'Next of Kin Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  // TODO: From here
  $form['nextofkin']['kin_name0'] = array(
    '#type' => 'item',
    '#title' => 'Name',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_name1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_relation0'] = array(
    '#type' => 'item',
    '#title' => 'Relationship',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_relation1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_address0'] = array(
    '#type' => 'item',
    '#title' => 'Address',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_address1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['nextofkin']['kin_city0'] =array(
    '#type' => 'item',
    '#title' => 'City',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_city1'] =array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_telephone0'] = array(
    '#type' => 'item',
    '#title' => 'Telephone',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_telephone1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_mobile0'] = array(
    '#type' => 'item',
    '#title' => 'Mobile',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_mobile1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['nextofkin']['kin_email0'] = array(
    '#type' => 'item',
    '#title' => 'Email',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['nextofkin']['kin_email1'] = array(
    '#type' => 'item',
    '#value' => '',
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr></table>');

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Bursar'))) {
    $form['payment'] = array(
      '#type' => 'fieldset',
      '#title' => 'Payment Information',
      '#collapsed' => TRUE,
      '#collapsible' => TRUE);
    $form['payment']['tax0'] = array(
      '#type' => 'item',
      '#title' => 'Tax Number',
      '#prefix' => '<table><tr><td>',
      '#suffix' => '</td>');
    $form['payment']['tax1'] = array(
      '#type' => 'item',
      '#value' => '',
      '#size' => 20,
      '#prefix' => '<td>',
      '#suffix' => '</td>');
    $form['payment']['bank0'] = array(
      '#type' => 'item',
      '#title' => 'Bank Name',
      '#prefix' => '<td>',
      '#suffix' => '</td>');
    $form['payment']['bank1'] = array(
      '#type' => 'item',
      '#value' => '',
      '#size' => 20,
      '#prefix' => '<td>',
      '#suffix' => '</td>');
    $form['payment']['acct0'] = array(
      '#type' => 'item',
      '#title' => 'Account Number',
      '#prefix' => '<td>',
      '#suffix' => '</td>');
    $form['payment']['acct1'] = array(
      '#type' => 'item',
      '#value' => '',
      '#prefix' => '<td>',
      '#suffix' => '</td></tr></table>');
  }

  $form['submit'] = array(
    '#id' => 'edit-next',
    '#value' => 'Continue',
    '#type' => 'submit');
  $form['#multistep']=TRUE;
  $form['#redirect']=FALSE;
  return $form;
}


function view_student_payments_form1(&$obj) {
  if (isset($_SESSION['staff']['mat'])) {
    unset($_SESSION['staff']['mat']);
  }
  if (isset($_SESSION['staff']['jamb'])) {
    unset($_SESSION['staff']['jamb']);
  }
  $form['#title'] = t('Search Student');
  $form['matno'] = array(
    '#title' => 'Matriculation No .',
    '#type' => 'textfield',
    '#default_value' => $_POST['matno'],
    '#size' => 20);
  $form['lbl_or'] = array(
    '#type' => 'fieldset',
    '#title' => 'Or');
  $form['lbl_or']['jambno'] = array(
    '#title' => 'JAMB No .',
    '#default_value' => $_POST['jambno'],
    '#type' => 'textfield',
    '#size' => 20);
  $form['submit'] = array(
    '#value' => 'Next',
    '#type' => 'submit',
    '#id' => 'edit-next');
  $form['download'] = array(
    '#type' => 'markup',
    '#value' => '<input ' . drupal_attributes(array('type' => 'button', 'value' => 'Download Payments Data', 'onclick' => "location.href='".url('staff/download_studentpayments')."';")) . "/>");
  return $form;
}
function view_student_payments_form_submit($form, &$state) {
  if ($state['clicked_button']['#id'] == 'edit-previous') {
    $state['storage']['step']--;
    return;
  }
  elseif ($state['clicked_button']['#id'] == 'edit-next') {
    $state['storage']['values'][$state['storage']['step']]=$state['values'];
    // Prevent the counter from going beyond 2
    $state['storage']['step'] = (++$state['storage']['step'] > 2) ? 1 : $state['storage']['step'];
    $state['#rebuild']=TRUE;
  }
  else
    return;
}
function view_student_payments_form_validate($form, &$state) {
  global $user;

  if ($state['storage']['step'] == 1) {
    $values=$form['lbl_or']['#post'];
    $jambno=$values['jambno'];
    if ($form['#post']['matno'] != '' && $jambno!='') {
      drupal_set_message('Please enter either Matriculation no or JAMB no.');
    }
    else {
      if ($jambno != '' && $form['#post']['matno']=='') {
        $qry = "select * from {admitted_student} where jambno='%s'";
        $res = db_query($qry, $jambno);
        if ($res && ($result = db_fetch_object($res))) {
          $_SESSION['staff']['mat']=$result->matriculation_no;
          $_SESSION['staff']['jamb']=$jambno;
        }
        else {
          form_set_error('jambno', "Jamb number not valid.");
        }
      }
      else {
        $qry = "select * from {admitted_student} where matriculation_no='%s'";
        $res = db_query($qry, $form['#post']['matno']);
        if ($res && ($result = db_fetch_object($res))) {
          $_SESSION['staff']['mat']=$result->matriculation_no;
        }
        else {
          form_set_error('matno', "Matriculation number not valid.");
        }
      }
    }
  }
}
function view_student_payments_form2(&$obj) {
  if (isset($_SESSION['staff']['jamb'])) {
    $qry = "select * from {admitted_student} where jambno='%s'";
    $res = db_query($qry, $_SESSION['staff']['jamb']);
  }
  else {
    $qry = "select * from {admitted_student} where matriculation_no='%s'";
    $res = db_query($qry, $_SESSION['staff']['mat']);
  }
  if ($res && ($result=db_fetch_object($res))) {
    $_SESSION['staff']['stud_info']=$result->student_id;
    $results = student_payment_data($result->student_id);
    $debtor_prefix = "DEBTOR " . variable_get('eduerp_current_session', '');

    // Obtain transactions made this session
    $q = "SELECT at.receipt_no, at.trans_amount, at.trans_time FROM {admitted_transaction} at, {session} s WHERE s.session_id=at.session_id AND at.student_id=%d AND s.sess_name='%s'";
    $rs = db_query($q, $result->student_id, variable_get('eduerp_current_session', ''));
    $payments = array();
    while ($row = db_fetch_array($rs)):
      $payments[] = $row;
    endwhile;
  }
  $form['extra'] = array(
    '#type' => 'fieldset',
    '#title' => 'Admission Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['extra']['college0'] = array(
    '#type' => 'item',
    '#title' => 'College',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['extra']['college1'] = array(
    '#type' => 'item',
    '#value' => $results['admission_college'],
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['dept0'] = array(
    '#type' => 'item',
    '#title' => 'Department',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['dept1'] = array(
    '#type' => 'item',
    '#value' => $results['admission_department'],
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['programme0'] = array(
    '#type' => 'item',
    '#title' => 'Programme',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['programme1'] = array(
    '#type' => 'item',
    '#value' => $results['admission_programme'],
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['extra']['study_mode0'] = array(
    '#type' => 'item',
    '#title' => 'Mode of Study',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['extra']['study_mode1'] = array(
    '#type' => 'item',
    '#value' => $results['admission_mode_of_study'],
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['entry_mode0'] = array(
    '#type' => 'item',
    '#title' => 'Mode of Entry',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['entry_mode1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $results['admission_mode_of_entry'],
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['entry_year0'] = array(
    '#type' => 'item',
    '#title' => 'Year of Study',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['extra']['entry_year1'] = array(
    '#type' => 'item',
    '#value' => $results['admission_year_of_study'],
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>',
    '#size' => 15);
  $form['personal'] = array(
    '#type' => 'fieldset',
    '#title' => 'Personal Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['personal']['img_lbl0'] = array(
    '#type' => 'item',
    '#title' => 'Student Image',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['personal']['img_lbl1'] = array(
    '#value' => '<img src="'. load_image() .'" width="200" />',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['img_sig0'] = array(
    '#type' => 'item',
    '#title' => 'Student Signature',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['img_sig1'] = array(
    '#value' => '<img src="'. load_signature() .'" width="300" />',
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');
  $form['personal']['matno0'] = array(
    '#type' => 'item',
    '#title' => 'Matriculation No.',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['personal']['matno1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $results['matriculation_no'],
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['jambno0'] = array(
    '#type' => 'item',
    '#title' => 'JAMB No.',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['jambno1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $results['jamb_no'],
    '#prefix' => '<td colspan="3">',
    '#suffix' => '</td></tr>');
  $form['personal']['fname0'] = array(
    '#type' => 'item',
    '#title' => 'First Name',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['fname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $results['first_name'],
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mname0'] = array(
    '#type' => 'item',
    '#title' => 'Middle Name',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $results['middle_name'],
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['lname0'] = array(
    '#type' => 'item',
    '#title' => 'Last Name',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['lname1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $results['last_name'],
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['personal']['dob0'] = array(
    '#type' => 'item',
    '#title' => 'Date of Birth',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['dob1'] = array(
    '#type' => 'item',
    '#value' => $results['birth_date'],
    '#prefix' => '<td colspan="5">',
    '#suffix' => '</td></tr>');
  $form['personal']['gender0'] = array(
    '#type' => 'item',
    '#title' => 'Gender',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['gender1'] = array(
    '#type' => 'item',
    '#size' => 20,
    '#value' => $results['gender'],
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['origin0'] = array(
    '#type' => 'item',
    '#title' => 'State Of Origin',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['origin1'] = array(
    '#type' => 'item',
    '#value' => $results['state_of_origin'],
    '#prefix' => '<td colspan="3">',
    '#suffix' => '</td></tr>');
  $form['personal']['mstatus0'] = array(
    '#type' => 'item',
    '#title' => 'Marital Status',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['personal']['mstatus1'] = array(
    '#type' => 'item',
    '#value' => $results['marital_status'],
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile0'] = array(
    '#type' => 'item',
    '#title' => 'Mobile No.',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['mobile1'] = array(
    '#type' => 'item',
    '#value' => $results['personal_mobile'],
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['email0'] = array(
    '#type' => 'item',
    '#title' => 'E-mail address',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['personal']['email1'] = array(
    '#type' => 'item',
    '#value' => $results['personal_email'],
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');
  $form['sponsor'] = array(
    '#type' => 'fieldset',
    '#title' => 'Sponsor Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['sponsor']['sponsor0'] = array(
    '#type' => 'item',
    '#title' => 'Sponsor Name',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['sponsor']['sponsor1'] = array(
    '#type' => 'item',
    '#value' => $results['sponsor_name'],
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['sponsor']['tel0'] = array(
    '#type' => 'item',
    '#title' => 'Telephone No.',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['sponsor']['tel1'] = array(
    '#type' => 'item',
    '#value' => $results['sponsor_tel'],
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['sponsor']['mobile0'] = array(
    '#type' => 'item',
    '#title' => 'Mobile',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['sponsor']['mobile1'] = array(
    '#type' => 'item',
    '#value' => $results['sponsor_mobile'],
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['sponsor']['address0'] = array(
    '#type' => 'item',
    '#title' => 'Address',
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['sponsor']['address1'] = array(
    '#type' => 'item',
    '#value' => $results['sponsor_address'],
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['sponsor']['city0'] = array(
    '#type' => 'item',
    '#title' => 'City',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['sponsor']['city1'] = array(
    '#type' => 'item',
    '#value' => $results['sponsor_city'],
    '#prefix' => '<td colspan="3">',
    '#suffix' => '</td></tr></table>');
  $form['hostel'] = array(
    '#type' => 'fieldset',
    '#title' => 'Accomodation Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['hostel']['hostel0'] = array(
    '#type' => 'item',
    '#title' => 'Hostel',
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['hostel']['hotel1'] = array(
    '#type' => 'item',
    '#value' => $results['hostel_name'],
    '#size' => 20,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['hostel']['type0'] = array(
    '#type' => 'item',
    '#title' => 'Space Type',
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['hostel']['type1'] = array(
    '#type' => 'item',
    '#value' => $results['hostel_type'],
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');
  $form['payment'] = array(
    '#type' => 'fieldset',
    '#title' => 'Payment Information',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $form['payment']['accomodation0'] = array(
    '#type' => 'item',
    '#title' => $debtor_prefix . " ACCOMODATION",
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>');
  $form['payment']['accomodation1'] = array(
    '#type' => 'item',
    '#value' => number_format($results['debtor_accomodation'],2),
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['payment']['tuition0'] = array(
    '#type' => 'item',
    '#title' => $debtor_prefix . " TUITION" ,
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['payment']['tuition1'] = array(
    '#type' => 'item',
    '#value' => number_format($results['debtor_tuition'],2),
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['payment']['others0'] = array(
    '#type' => 'item',
    '#title' => $debtor_prefix . " OTHER CHARGES",
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['payment']['others1'] = array(
    '#type' => 'item',
    '#value' => number_format($results['debtor_others'],2),
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['payment']['total_session0'] = array(
    '#type' => 'item',
    '#title' => "TOTAL SESSION FEES PAYABLE",
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['payment']['total_session1'] = array(
    '#type' => 'item',
    '#value' => number_format($results['total_session_payable'], 2),
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>');
  $form['payment']['previous_sessions0'] = array(
    '#type' => 'item',
    '#title' => variable_get('eduerp_current_session', '') . " FEE DEBT B/F",
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>');
  $form['payment']['previous_sessions1'] = array(
    '#type' => 'item',
    '#value' => number_format($results['total_outstanding_payable'], 2),
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['payment']['total_paybal0'] = array(
    '#type' => 'item',
    '#title' => "TOTAL FEES PAYABLE",
    '#prefix' => '<td>',
    '#suffix' => '</td>');
  $form['payment']['total_payable1'] = array(
    '#type' => 'item',
    '#value' => number_format($results['total_session_payable'] + $results['total_outstanding_payable'], 2),
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>');
  // Section for payments
  $form['payment_history'] = array(
    '#type' => 'fieldset',
    '#title' => 'Payments History',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE);
  $output = "";
  foreach ($payments as $payment):
    $output .= sprintf("<tr><td>%s</td><td>%s</td><td>%s</td></tr>", $payment['trans_time'], $payment['receipt_no'], number_format($payment['trans_amount'], 2));
  endforeach;
  $form['payment_history']['history'] = array(
    '#type' => 'item',
    '#value' => $output,
    '#prefix' => '<table><tr><th>Date</th><th>Receipt No.</th><th>Amount Paid</th></tr>',
    '#suffix' => '</table>');
  $form['submit'] = array(
    '#id' => 'edit-next',
    '#value' => 'Continue',
    '#type' => 'submit');
  $form['download'] = array(
    '#type' => 'markup',
    '#value' => '<input ' . drupal_attributes(array('type' => 'button', 'value' => 'Download Payments Data', 'onclick' => "location.href='".url('staff/download_studentpayments')."';")) . "/>");
  $form['#multistep']=TRUE;
  $form['#redirect']=FALSE;
  return $form;
}

function student_payment_data($student_id) {
  $res = db_query("SELECT * FROM {admitted_student} WHERE student_id=%d", $student_id);
  $return = array();

  if ($result = db_fetch_object($res)):
    $return['first_name'] = $result->first_name;
    $return['last_name'] = $result->last_name;
    $return['middle_name'] = $result->middle_name;
    $return['matriculation_no'] = $result->matriculation_no;
    $return['jamb_no'] = $result->jambno;
    $return['birth_date'] = $result->dob;
    $return['gender'] = $result->gender;
    $return['state_of_origin'] = veritas_states($result->state_origin);
    $return['marital_status'] = $result->marital_status;
    $return['personal_mobile'] = $result->mobile_number;
    $return['personal_email'] = $result->email_address;

    $qry2 = "SELECT
        p.nid AS programme_id,
        p.field_programme_name_value AS programme_name,
        d.nid AS department_id,
        d.field_department_name_value AS department_name,
        c.field_college_abbreviation_value AS college_abbreviation,
        c.field_college_name_value AS college_name
      FROM {content_type_program} p, {content_type_department} d, {content_type_college} c
      WHERE p.nid=%d AND p.field_department_id_nid=d.nid AND d.field_college_id_nid=c.nid";
    $res2 = db_query($qry2, $result->first_choice);
    $result2 = db_fetch_object($res2);

    $return['admission_college'] = $result2->college_abbreviation;
    $return['admission_department'] = $result2->department_name;
    $return['admission_programme'] = $result2->programme_name;
    $return['admission_mode_of_study'] = $result->mode_of_study;
    $return['admission_mode_of_entry'] = $result->mode_of_entry;
    $return['admission_year_of_study'] = $result->yearofentry;

    $qry4 = "SELECT * FROM {admitted_sponsor} WHERE student_id=%d";
    $res4 = db_query($qry4, $student_id);
    $result4 = db_fetch_object($res4);
    $return['sponsor_name'] = $result4->name;
    $return['sponsor_tel'] = $result4->telephone;
    $return['sponsor_mobile'] = $result4->mobile;
    $return['sponsor_address'] = $result4->address1;
    $return['sponsor_city'] = $result4->city;

    $qry5 = "SELECT asa.college_id, ah.cost, ah.name, at.name AS type FROM admitted_student_accomodation asa,
    accomodation_types at, accomodation_hostels ah WHERE asa.student_id=%d AND ah.id=asa.hostel_id AND at.id=ah.accomodation_type_id";
    $res5 = db_query($qry5, $result->student_id);
    $result_accomodation = db_fetch_object($res5);
    $return['hostel_name'] = $result_accomodation->name;
    $return['hostel_type'] = $result_accomodation->type;


    $qry6 = "SELECT sum(at.trans_amount) AS total_amount FROM admitted_transaction at, session s WHERE
    at.student_id = %d AND at.session_id = s.session_id AND s.sess_name = '%s'";
    $res6 = db_query($qry6, $result->student_id, variable_get('eduerp_current_session', ''));
    $result_session_payment = db_fetch_object($res6);
    $debtor_acceptance = 100000;
    $debtor_accomodation = str_replace(',', '', $result_accomodation->cost);
    $debtor_tuition = 150000;
    $debtor_others = ($result_accomodation->college_id == 1) ? 45000 : 50000;
    $total_debt = $debtor_acceptance + $debtor_accomodation + $debtor_tuition + $debtor_others;
    $total_paid = $result_session_payment->total_amount;

    if ($total_paid <= $debtor_acceptance):
      $debtor_acceptance -= $total_paid;
    elseif ($total_paid <= ($debtor_acceptance + $debtor_accomodation) && $total_paid > $debtor_acceptance):
      $debtor_acceptance = 0;
      $debtor_accomodation = ($debtor_acceptance + $debtor_accomodation) - $total_paid;
    elseif ($total_paid <= ($debtor_acceptance + $debtor_accomodation + $debtor_tuition) && $total_paid > ($debtor_acceptance + $debtor_accomodation)):
      $debtor_acceptance = $debtor_accomodation = 0;
      $debtor_tuition = ($debtor_acceptance + $debtor_accomodation + $debtor_tuition) - $total_paid;
    elseif ($total_paid <= ($debtor_acceptance + $debtor_accomodation + $debtor_tuition + $debtor_others) && $total_paid > ($debtor_acceptance + $debtor_accomodation + $debtor_tuition)):
      $debtor_acceptance = $debtor_accomodation = $debtor_tuition = 0;
      $debtor_others = ($debtor_acceptance + $debtor_accomodation + $debtor_tuition + $debtor_others) - $total_paid;
    else:
      $debtor_acceptance = $debtor_accomodation = $debtor_tuition = $debtor_others = 0;
    endif;

    $total_session_payable = $debtor_acceptance + $debtor_tuition + $debtor_accomodation + $debt_others;

    // Calculate total amount owed from previous sessions omitting current session
    // this is going to be a problem subsequently when payment fees change
    $qry7 = "SELECT s.sess_name, SUM(at.trans_amount) AS total FROM admitted_transaction at, session s, session s2 WHERE at.student_id=%d AND at.session_id=s.session_id AND at.session_id != s2.session_id AND s2.sess_name='%s' GROUP BY at.session_id";
    $res7 = db_query($qry7, $result->student_id, variable_get('eduerp_current_session', ''));
    $total_outstanding_previous_sessions = 0;
    while ($result_payment = db_fetch_array($res7)):
      $total_outstanding_previous_sessions += ($total_debt - $result_payment['total']);
    endwhile;
    $return['debtor_acceptance'] = $debtor_acceptance;
    $return['debtor_accomodation'] = $debtor_accomodation;
    $return['debtor_tuition'] = $debtor_tuition;
    $return['debtor_others'] = $debtor_others;
    $return['total_session_paid'] = $total_paid;
    $return['total_session_payable'] = $total_session_payable;
    $return['total_outstanding_payable'] = $total_outstanding_previous_sessions;
  endif;

  return $return;
}

function download_student_payments() {
  // This function provides a means to download all payment data for students
  $q = "SELECT student_id FROM {admitted_student}";
  $rs = db_query($q);

  header('Content-Type: text/csv');
  header('Content-Disposition: attachment;filename=payments.csv');

  echo "firstname,middlename,lastname,course_of_study,year_of_study,college,hostel,space_type,birth_date,gender,marital_status,";
  echo "state_of_origin,student_telephone,student_email,sponsor_name,sponsor_address,sponsor_tel,sponsor_mobile,matriculation_no,jamb_no,";
  echo "debtor_tuition,debtor_accomodation,debtor_others,total_session_debt,total_outstanding_debt,grand_total_debt\n";

  while ($student_row = db_fetch_array($rs)):
    $spd = student_payment_data($student_row['student_id']);
    $output = sprintf("\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",%f,%f,%f,%f,%f,%f",
      $spd['first_name'],
      $spd['middle_name'],
      $spd['last_name'],
      $spd['admission_programme'],
      $spd['admission_year_of_study'],
      $spd['admission_college'],
      $spd['hostel_name'],
      $spd['hostel_type'],
      $spd['birth_date'],
      $spd['gender'],
      $spd['marital_status'],
      $spd['state_of_origin'],
      $spd['personal_mobile'],
      $spd['personal_email'],
      $spd['sponsor_name'],
      $spd['sponsor_address'],
      $spd['sponsor_tel'],
      $spd['sponsor_mobile'],
      $spd['matriculation_no'],
      $spd['jamb_no'],
      $spd['debtor_tuition'],
      $spd['debtor_accomodation'],
      $spd['debtor_others'],
      $spd['total_session_payable'],
      $spd['total_outstanding_payable'],
      $spd['total_session_payable'] + $spd['total_outstanding_payable']);
    echo $output . "\n";
  endwhile;
}


function semester_admin() {
  ob_start();

  echo '<br /><hr /><br />';

  echo drupal_get_form('set_session_form');
  echo '<br /><hr /><br />';

  echo 'Highlight Missing Courses for';
  echo '<br /><br /><hr /><br />';

  echo 'Check have all existing Courses required for a Programme been Verified/Assigned for';
  echo '<br /><br /><hr /><br />';

  echo 'List the Fees for all Programmes by Level & Semester';
  echo '<br /><br /><hr /><br />';

  echo drupal_get_form('open_close_student_registration_form');
  echo '<br /><hr /><br />';

  echo drupal_get_form('open_close_student_course_registration_form');
  echo '<br /><hr /><br />';

  echo '<a href="' . url('grading/statsuni') . '">Grading Statistics for University</a>';
  echo '<br /><br /><hr /><br />';

  echo 'Student Progress towards Qualification';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/department') . '">View Departments and Courses</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/createeditcourse') . '">Creating or Modifying Courses for A Department</a>';
  echo '<br /><br /><hr /><br />';

  echo 'Creating or Modifying a University Programme';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/list') . '">List Staff and Assign Roles</a>';
  echo '<br /><br /><hr /><br />';
 
  return ob_get_clean();
}


function set_session_form($form_state) {
  global $user;

  $form['top'] = array('#value' => 'The current Session is: ' . variable_get('eduerp_current_session', '') . ' and current Semester is: ' . variable_get('eduerp_current_semester', ''));

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registrar'))) {
    $current_year = intval(date('Y'));
    $sessions = array();
    $sessions[sprintf("%s/%s", $current_year - 1, $current_year)] = sprintf("%s/%s", $current_year - 1, $current_year);
    $sessions[sprintf("%s/%s", $current_year, $current_year + 1)] = sprintf("%s/%s", $current_year, $current_year + 1);

    $eduerp_current_session = variable_get('eduerp_current_session', sprintf("%s/%s", $current_year - 1, $current_year));

    $form['eduerp_current_session'] = array(
      '#type' => 'select',
      '#options' => $sessions,
      '#title' => 'Current Session',
      '#default_value' => variable_get('eduerp_current_session', sprintf("%s/%s", $current_year - 1, $current_year)),
      '#description' => 'Please specify the current session'
    );

    $form['eduerp_current_semester'] = array(
      '#type' => 'select',
      '#options' => array(1 => '1', 2 => '2'),
      '#title' => 'Current Semester',
      '#default_value' => variable_get('eduerp_current_semester', 1),
      '#description' => 'Please specify the current semester'
    );

    $form['submit'] = array('#type' => 'submit', '#value' => 'Set the Session and Semester');
  }
  return $form;
}


function set_session_form_submit($form, &$form_state) {

  variable_set('eduerp_current_session', $form_state['values']['eduerp_current_session']);
  variable_set('eduerp_current_semester', $form_state['values']['eduerp_current_semester']);

  // Check if the current session is in the session table
  $session_rs = db_query("SELECT sess_name FROM {session} WHERE sess_name = '%s'", $form_state['values']['eduerp_current_session']);
  if (!db_result($session_rs)) {
    db_query("INSERT INTO {session} (sess_name) VALUES ('%s')", $form_state['values']['eduerp_current_session']);
  }
}


function open_close_student_registration_form($form_state) {
  global $user;

  // We could add a from element with more options that just on/off
  if (variable_get('eduerp_allow_student_registrations', '1')) {
    $open = 'Open';
    $closeverb = 'Close';
  }
  else {
    $open = 'Closed';
    $closeverb = 'Open';
  }

  $form['top'] = array('#value' => "Student Registrations and Initial Payment are $open for the Session " . variable_get('eduerp_current_session', '') . '<br />');

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registrar'))) {
    $form['submit'] = array('#type' => 'submit', '#value' => "$closeverb Student Registrations for the Session");
  }
  return $form;
}


function open_close_student_registration_form_submit($form, &$form_state) {

  if (variable_get('eduerp_allow_student_registrations', '1')) {
    variable_set('eduerp_allow_student_registrations', '0');
    variable_set('user_register', 0);
  }
  else {
    variable_set('eduerp_allow_student_registrations', '1');
    variable_set('user_register', 1);
  }
}


function open_close_student_course_registration_form($form_state) {
  global $user;

  $form['top'] = array('#value' => 'Here are the Programmes (& Level) currenly Open for Course Registrations this Semester: ' . listofopenprogrammes());

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registrar'))) {

    $programmestoopen = selectlistofprogrammestoopen();
    if (!empty($programmestoopen)) {
        $form['programmestoopen'] = array(
          '#type' => 'select',
          '#options' => $programmestoopen,
          '#title' => 'Programme(level) to Open OR Open ALL',
          '#default_value' => 999999,
          '#description' => 'Please specify one Programme Level to Open for Course Registrations or Open ALL'
        );
    }

    $programmestoclose = selectlistofprogrammestoclose();
    if (!empty($programmestoclose)) {
        $form['programmestoclose'] = array(
          '#type' => 'select',
          '#options' => $programmestoclose,
          '#title' => 'Programme(level) to Close OR Close ALL',
          '#default_value' => 999999,
          '#description' => 'Please specify one Programme Level to Close for Course Registrations or Close ALL'
        );
    }

    if (empty($programmestoclose)) $openverb = 'Open';
    elseif (empty($programmestoopen)) $openverb = 'Close';
    else $openverb = 'Open or Close';

    $form['submit'] = array('#type' => 'submit', '#value' => "$openverb Course Registrations for this Semester");
  }
  return $form;
}


function listofopenprogrammes() {
  $semester = variable_get('eduerp_current_semester', 1);

  $names = array();
  $sql = "SELECT CONCAT(p.field_programme_name_value, '(', pls.level, ')') AS name
    FROM {program_level_semester} pls, {content_type_program} p
    WHERE pls.open_for_registrations=1 AND pls.semester='%s' AND pls.programme_id=p.nid ORDER BY name ASC";
  $rows = db_query($sql, $semester);
  while ($row = db_fetch_object($rows)) {
    $names[] = $row->name;
  }
  if (empty($names)) return 'None';
  return implode('; ', $names);
}


function selectlistofprogrammestoopen() {
  $semester = variable_get('eduerp_current_semester', 1);

  $names = array();
  $names[999999] = 'ALL';
  $noprogrammes = TRUE;
  $sql = "SELECT
      CONCAT(pls.programme_id, ',', pls.level, ',', pls.semester) AS id,
      CONCAT(p.field_programme_name_value, '(', pls.level, ')') AS name
    FROM {program_level_semester} pls, {content_type_program} p
    WHERE pls.open_for_registrations=0 AND pls.semester='%s' AND pls.programme_id=p.nid ORDER BY name ASC";
  $rows = db_query($sql, $semester);
  while ($row = db_fetch_object($rows)) {
    $noprogrammes = FALSE;
    $names[$row->id] = $row->name;
  }
  if ($noprogrammes) return FALSE;
  return $names;
}


function selectlistofprogrammestoclose() {
  $semester = variable_get('eduerp_current_semester', 1);

  $names = array();
  $names[999999] = 'ALL';
  $noprogrammes = TRUE;
  $sql = "SELECT
      CONCAT(pls.programme_id, ',', pls.level, ',', pls.semester) AS id,
      CONCAT(p.field_programme_name_value, '(', pls.level, ')') AS name
    FROM {program_level_semester} pls, {content_type_program} p
    WHERE pls.open_for_registrations=1 AND pls.semester='%s' AND pls.programme_id=p.nid ORDER BY name ASC";
  $rows = db_query($sql, $semester);
  while ($row = db_fetch_object($rows)) {
    $noprogrammes = FALSE;
    $names[$row->id] = $row->name;
  }
  if ($noprogrammes) return FALSE;
  return $names;
}


function open_close_student_course_registration_form_submit($form, &$form_state) {
  $semester = variable_get('eduerp_current_semester', 1);

  if     (!empty($form_state['values']['programmestoopen']) && $form_state['values']['programmestoopen'] == 999999) {
    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "WHERE pls.semester=$semester";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=1 $semesterselect");
  }
  elseif (!empty($form_state['values']['programmestoclose']) && $form_state['values']['programmestoclose'] == 999999) {
    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "WHERE pls.semester=$semester";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=0 $semesterselect");
  }
  elseif (!empty($form_state['values']['programmestoopen'])) {
    $prog_lev_sem = explode(',', $form_state['values']['programmestoopen']);

    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "AND pls.semester={$prog_lev_sem[2]}";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=1 WHERE pls.programme_id=%d AND pls.level=%d $semesterselect", $prog_lev_sem[0], $prog_lev_sem[1]);
  }
  elseif (!empty($form_state['values']['programmestoclose'])) {
    $prog_lev_sem = explode(',', $form_state['values']['programmestoclose']);

    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "AND pls.semester={$prog_lev_sem[2]}";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=0 WHERE pls.programme_id=%d AND pls.level=%d $semesterselect", $prog_lev_sem[0], $prog_lev_sem[1]);
  }
}


function get_faculties() {
  $r = db_query("SELECT nid, field_college_name_value AS name, field_college_abbreviation_value AS abbr FROM {content_type_college} ORDER BY field_college_name_value");
  while ($f = db_fetch_object($r)){
    $faculties[$f->nid]['faculty_name'] = $f->name;
    $faculties[$f->nid]['faculty_abbr'] = $f->abbr;
    $faculties[$f->nid]['faculty_nid'] = $f->nid;
  }
  return $faculties;
}


function get_departments() {
  $r = db_query("SELECT d.nid nid, field_department_name_value AS dept_name, field_college_name_value AS fac_name, field_college_abbreviation_value AS fac_abbr 
  	  FROM {content_type_department} d INNER JOIN {content_type_college} c ON d.field_college_id_nid=c.nid
  	  ORDER BY field_college_name_value, dept_name");
    
  while ($f = db_fetch_object($r)){
    $faculties[$f->nid]['faculty_name'] = $f->fac_name;
    $faculties[$f->nid]['faculty_abbr'] = $f->fac_abbr;
    $faculties[$f->nid]['dept_nid'] = $f->nid;
    $faculties[$f->nid]['dept_name'] = $f->dept_name;
  }
  return $faculties;
}


function get_Available_Courses($department_nid = 0, $course_nid = 0) {
  $where = ""; $args = "";
  if ($department_nid != 0) {
    $where = " WHERE k.field_department_nid_nid = %d";
    $arg = $department_nid;
  }
  if ($course_nid != 0) {
    $where = " WHERE k.nid = %d";
    $arg = $course_nid;
  }
  $r = db_query("SELECT k.nid nid, field_level_value AS course_level, field_code_value AS course_code, 
  	  field_coursetitle_value AS course_title, field_creditload_value AS credit_load, field_prerequisite_value AS prerequisite_codes,
  	  field_prerequisite_codes_value AS requisites_codes,	field_semester_value AS course_semester, field_course_description_value AS course_description,
  	  field_department_name_value AS dept_name, field_college_name_value AS fac_name, field_college_abbreviation_value AS fac_abbr 
  	  FROM {content_type_course} k
  	  INNER JOIN {content_type_department} d ON k.field_department_nid_nid = d.nid 
  	  INNER JOIN {content_type_college} c ON d.field_college_id_nid = c.nid
  	  ". $where ."
  	  ORDER BY field_college_name_value, dept_name, course_level, course_code ", $arg);
  
  return  $r;
  
  
}


function staff_display_available_courses($departmentInfo = array(), $type = 0) {
  //$type; 0=available course, 1=assigned courses, 2=unassigned courses
  $department_nid = 0;$forassigned=false;
  if (sizeof($departmentInfo)) {
    $key = array_keys($departmentInfo);
    $department_nid = $key[0];
  }
  switch ($type) { 
    case '1':
      $courses = get_Assigned_Courses(variable_get('eduerp_current_session', ''), $department_nid); break;
    case '2':
      $courses = get_UnAssigned_Courses(variable_get('eduerp_current_session', ''), $department_nid); break;
    default:
      $courses = get_Available_Courses($department_nid);
  }
  if ($department_nid){
    if ($type == 1){
      $forassigned=true;
      $str  = "<b>Assigned Courses for ". $departmentInfo[$department_nid] ." Department</b> for <b>". variable_get('eduerp_current_session', '') ."</b> Session<br />";
    }
    elseif ($type == 2)
      $str  = "<b>UnAssigned Courses for ". $departmentInfo[$department_nid] ." Department</b> for <b>". variable_get('eduerp_current_session', '') ."</b> Session<br />";
    else
      $str  = "<b>Available Courses for ". $departmentInfo[$department_nid] ." Department</b><br />";
  }
  else
    $str  = "<b>Available Courses</b><br />";
  
    
  if (db_affected_rows($courses) <= 0) {
    $str .= Error_Types(106);
  } 
  else {
    
    $str .= "
    <table width = '50%'>
      <tr>
        <td><b>#</b></td>";
        if ($forassigned)
          $str .="
          <td><b>Staff Name</b></td>";
          $str .="
        <td><b>Course Level</b></td>
        <td><b>Course Code</b></td>
        <td><b>Course Title</b></td>
        <td><b>Credit load</b></td>
        <td><b>Requisite Codes</b></td>
        <td><b>Prerequisite Codes</b></td>
        <td><b>Course Description</b></td>
        <td><b>Course Semester</b></td>";
        if ($forassigned)
          $str .="
          <td><b>Time Table</b></td>";
          $str .="
      </tr>";$i = 1;
      
      while($course = db_fetch_object($courses)){
        if ($i%2){$rcolor = "#E5E5E5";} else {$rcolor = "#FFFFFF";}
          $str .= "
             <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
               <td>$i</td>";
               if ($forassigned)
                 $str .="
               <td>". $course->staff_name ."</td>";
               $str .="
               <td>". $course->course_level ."</td>
               <td>". $course->course_code ."</td>
               <td>". $course->course_title ."</td>
               <td>". $course->credit_load ."</td>
               <td>". $course->requisites_codes ."</td>
               <td>". $course->prerequisite_codes ."</td>
               <td>". $course->course_description ."</td>
               <td>". $course->course_semester ."</td>";
               if ($forassigned)
                 $str .="
               <td>". $course->timetable ."</td>";
               $str .="
               
             </tr>"; $i++;
      }
      $str .= "
      </table>";
  }
  return $str;
	
}


function staff_create_edit_faculty() {
  global $user;
  ob_start();
  
  if (! staff_has_eduerp_role($user->uid, 0, 0, array('Role Assigner'))) $isAuthorized = false; else $isAuthorized = true;
  
  echo '<br /><hr /><br />';
  
  if (! $isAuthorized) {
    echo Error_Types(104);
      
  } 
  else {
    if (isset($_POST['faculty_nid']))
      echo "<b>Edit Faculty</b> - Make any required changes to the faculty<br />";
    else
      echo "<b>Create Faculty</b> - Fill the form below to create a new Faculty<br />";
      
    echo drupal_get_form('staff_create_edit_faculty_form');
  }
  
  echo '<br /><hr /><br />';
  
  if (! isset($_POST['faculty_nid'])) {
    if (! $isAuthorized) {
      echo Error_Types(105);
    } 
    else {
      //if edit was selected then do not show the rest of the page
      echo "<b>Edit Faculty</b> - Select a Faculty to edit it<br />";
      echo drupal_get_form('staff_update_faculty_form');
    }
    echo '<br /><hr /><br />';
      
    //display existing faculties here
    echo staff_display_available_faculties();
  }
  return ob_get_clean();
}


function staff_create_edit_dept() {
  global $user;
  ob_start();
  
  if (! staff_has_eduerp_role($user->uid, 0, 0, array('Role Assigner'))) $isAuthorized = false; else $isAuthorized = true;
  
  echo '<br /><hr /><br />';
  
  if (! $isAuthorized) {
    echo Error_Types(104);
      
  } 
  else {
      if (isset($_POST['department_nid']))
        echo "<b>Edit Department</b> - Make any required changes to the Department<br />";
      else
        echo "<b>Create Department</b> - Fill the form below to create a new Department<br />";
      
      echo drupal_get_form('staff_create_edit_dept_form');
  }
  echo '<br /><hr /><br />';
  if (! isset($_POST['department_nid'])) {
    if (! $isAuthorized) {
      echo Error_Types(105);
    } 
    else {
      //if edit was selected then do not show the rest of the page
      echo "<b>Edit Department</b> - Select a Department to edit it<br />";
      echo drupal_get_form('staff_update_dept_form');
  
      echo '<br /><hr /><br />';
    }
    //display existing departments here
    echo staff_display_available_departments();
  
  }

  return ob_get_clean();
}


function staff_create_edit_faculty_form() {
  
 if (isset($_SESSION['fac_nid']))$_POST['faculty_nid'] = $_SESSION['fac_nid'];
 
  if (isset($_POST['faculty_nid'])) {
    if (empty($_POST['faculty_name'])) {
      $result = db_query('SELECT field_college_name_value AS name, field_college_abbreviation_value AS abbr FROM {content_type_college} WHERE nid = %d', $_POST['faculty_nid']);
      $fac_edit_record = db_fetch_object($result);
    }
  }
  $form['#title'] = 'Create New Faculty';
  $form['faculty_name'] = array(
    '#title' => 'Faculty Name',
    '#type' => 'textfield',
    '#size' => 40,
    '#required' => TRUE
  );
  if ($fac_edit_record) $form['faculty_name']['#value'] = $fac_edit_record->name;
  
  $form['faculty_abbreviation'] = array(
    '#title' => 'Faculty Abbreviation',
    '#type' => 'textfield',
    '#size' => 6,
    '#required' => TRUE
  );
  if ($fac_edit_record) $form['faculty_abbreviation']['#value'] = $fac_edit_record->abbr;
  
  if (isset($_POST['faculty_nid'])) {
    $form['faculty_nid'] = array(
    '#title' => 'Faculty nid',
    '#type' => 'hidden',
    '#value' => $_POST['faculty_nid']
    );
  	  
  }
  $form['submit'] = array(
    '#value' => 'Create Faculty',
    '#type' => 'submit'
  );
  if (isset($_POST['faculty_nid'])) $form['submit']['#value'] = 'Update Faculty';
  
  return $form;
}


function staff_update_faculty_form() {
  $form['#title'] = 'Update Faculty';
  $form['faculty_id'] = array(
    '#type' => 'select',
    '#options' => faculty(),
    '#title' => 'Faculty Name');
  $form['submit'] = array(
    '#value' => 'Edit Faculty',
    '#type' => 'submit'
  );
  return $form;
}


function staff_update_dept_form() {
  $form['#title'] = 'Update Department';
  $form['department_nid'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department Name');
  $form['submit'] = array(
    '#value' => 'Edit Department',
    '#type' => 'submit'
  );
  return $form;
}


function staff_create_edit_faculty_form_validate($form, &$form_state) {
  
  if (isset($_POST['faculty_nid'])) {//validate EDIT
    if (is_Faculty_Name_Existing($form_state['values']['faculty_name'], $form_state['values']['faculty_nid']))
      form_set_error('faculty_name', Error_Types(101));
      
    if (is_Faculty_Abbreviation_Existing($form_state['values']['faculty_abbreviation'], $form_state['values']['faculty_nid']))
      form_set_error('faculty_abbreviation', Error_Types(102));
  } 
  else {//validate CREATE
    if (is_Faculty_Name_Existing($form_state['values']['faculty_name']))
      form_set_error('faculty_name', Error_Types(101));
      
    if (is_Faculty_Abbreviation_Existing($form_state['values']['faculty_abbreviation']))
      form_set_error('faculty_abbreviation', Error_Types(102));
  }
  
}


function staff_create_edit_faculty_form_submit($form, &$form_state) {
  
  if (isset($form_state['values']['faculty_nid']) && is_numeric($form_state['values']['faculty_nid'])) {//the user is trying to edit a given faculty
    $node = node_load($form_state['values']['faculty_nid']);
    $node->title                                  = $form_state['values']['faculty_name'];
    $node->field_college_name[0]['value']         = $form_state['values']['faculty_name'];
    $node->field_college_abbreviation[0]['value'] = $form_state['values']['faculty_abbreviation'];
    
    drupal_set_message($form_state['values']['faculty_name'] . ' Faculty was updated!<br />');
    unset($_SESSION['fac_nid']);
  }
  else {
    $node = new stdClass();
    $node->type                                   = 'college';
    $node->uid                                    = 1;  // Admin
    $node->status                                 = 1;  // Published
    $node->promote                                = 0;
    $node->sticky                                 = 0;
    $node->comment                                = 0;
    $node->title                                  = $form_state['values']['faculty_name'];
    $node->field_college_name[0]['value']         = $form_state['values']['faculty_name'];
    $node->field_college_abbreviation[0]['value'] = $form_state['values']['faculty_abbreviation'];
    
    drupal_set_message($form_state['values']['faculty_name'] . ' Faculty has been created!<br />');
  }
  
  node_save($node);
  
  
}


function staff_create_edit_dept_form_validate($form, &$form_state) {
  
  if (isset($_POST['department_nid'])) {//validate EDIT
    if (is_Department_Name_Existing($form_state['values']['department_name'], $form_state['values']['department_nid']))
      form_set_error('department_name', Error_Types(103));
      
  }
  else {//validate CREATE
    if(is_Department_Name_Existing($form_state['values']['department_name']))
      form_set_error('department_name', Error_Types(103));
  }
  
}


function staff_create_edit_dept_form_submit($form, &$form_state) {
  
  if (isset($form_state['values']['department_nid']) && is_numeric($form_state['values']['department_nid'])) {//the user is trying to edit a given department. OK!
    $node = node_load($form_state['values']['department_nid']);
    $node->title                                = $form_state['values']['department_name'];
    $node->field_department_name[0]['value']    = $form_state['values']['department_name'];
    $node->field_college_id[0]['nid']        	= $form_state['values']['faculty_nid'];
    
    drupal_set_message($form_state['values']['department_name'] . ' Department was updated!<br />');
    unset($_SESSION['dept_nid']);
  }
  else {
    $node = new stdClass();
    $node->type                              = 'department';
    $node->uid                               = 1;  // Admin
    $node->status                            = 1;  // Published
    $node->promote                           = 0;
    $node->sticky                            = 0;
    $node->comment                           = 0;
    $node->title                             = $form_state['values']['department_name'];
    $node->field_department_name[0]['value'] = $form_state['values']['department_name'];
    $node->field_college_id[0]['nid']        = $form_state['values']['faculty_nid'];
    
    //$department = $node->nid;

    drupal_set_message($form_state['values']['department_name'] . ' Department has been created!<br />');
  }
  
  node_save($node);
  
  
}


function staff_create_edit_dept_form() {
  
  if (isset($_SESSION['dept_nid']))$_POST['department_nid'] = $_SESSION['dept_nid'];
  if (isset($_POST['department_nid'])) {
    if (empty($_POST['department_name'])) {
      $result = db_query('SELECT field_college_id_nid AS college_nid, field_department_name_value AS dept_name FROM {content_type_department} WHERE nid = %d', $_POST['department_nid']);
      $dept_edit_record = db_fetch_object($result);
    }
  }
  
  
  $form['#title'] = 'Create New Department';
  $form['faculty_nid'] = array(
    '#type' => 'select',
    '#options' => faculty(),
    '#title' => 'Faculty Name');
  if ($dept_edit_record) $form['faculty_nid']['#default_value'] = $dept_edit_record->college_nid;
  
  $form['department_name'] = array(
    '#title' => 'Department Name',
    '#type' => 'textfield',
    '#size' => 100, 
    '#required' => TRUE
  );
  if ($dept_edit_record) $form['department_name']['#value'] = $dept_edit_record->dept_name;
  
  if (isset($_POST['department_nid'])) {
    $form['department_nid'] = array(
    '#title' => 'Department nid',
    '#type' => 'hidden',
    '#value' => $_POST['department_nid']
    );
  }
  
  $form['submit'] = array(
    '#value' => 'Create Department',
    '#type' => 'submit'
  );
  if ($dept_edit_record) $form['submit']['#value'] = 'Update Department';
  
  return $form;
}


function staff_update_faculty_form_submit($form, &$form_state) {
  
  $_SESSION['fac_nid'] = $form_state['values']['faculty_id'];
}


function staff_update_dept_form_submit($form, &$form_state) {
  
  $_SESSION['dept_nid'] = $form_state['values']['department_nid'];
  
}


function staff_create_edit_course() {
  global $user, $departmentInfo, $canCreateModify;
  $canCreateModify = false;$hideOthers = false;
   
  if (isset($_SESSION['showFullForm'])) $_POST['showFullForm'] = 1;
  if (isset($_SESSION['showCourseAssignment'])) $_POST['showCourseAssignment'] = 1;
  
  ob_start();
  echo '<br /><hr /><br />';
  $authorizeCourseEdit = false;
  if (arg(2) && is_Valid_Department(arg(2))) {//the department is valid
     //check if user has access to the department
     /*
     if (! user_has_access_to_department(arg(2))) {
       drupal_set_message(Error_Types(112));
       drupal_goto('staff/createeditcourse');
     }
     */
    //make sure that the user has access to the department
    //check that he can create/modify courses
    if (staff_has_eduerp_role($user->uid, arg(2), 0, array('Head of Department', 'Department Examination Officer'))) {//allow for one db call only
      $canCreateModify = true;
    }
 
    if ($canCreateModify) {
      
      //get the departments info
      $departmentInfo = department(arg(2));
      //check to know if proceed with course assignment was clicked
      if (isset($_POST['showCourseAssignment'])) {
        //allow for some easy navigation        
        $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse/". arg(2) ."'>". $departmentInfo[arg(2)] ." Department</a>&nbsp; &raquo; &nbsp;<b>Course Assignment</b></font><br /><br />";
        $navi .= '<br /><hr /><br />';
        //$navi .= "<b>Edite Course</b> - Make any required changes to the Course: <b>". $course->course_code ."</b><br />";
        echo $navi;
        echo staff_show_assign_course();
        $hideOthers=true;
      } 
      else {
        //check if user is trying to edit record
         if (arg(3) && is_valid_course(arg(3)) && course_belongs_to_department(arg(2), arg(3))) {
          $authorizeCourseEdit = true;$hideOthers=true;
          //get the course info
          $course = db_fetch_object(get_Available_Courses(0,arg(3)));
          //allow for some easy navigation
          $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '../'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;<a href = './'>". $departmentInfo[arg(2)] ." Department</a>&nbsp; &raquo; &nbsp;Edit Course: <b>". $course->course_code ."</b></font><br /><br />";
          $navi .= '<br /><hr /><br />';
          $navi .= "<b>Edite Course</b> - Make any required changes to the Course: <b>". $course->course_code ."</b><br />";
        }
        else {
          //allow for some easy navigation
          $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse/".arg(2)."'>". $departmentInfo[arg(2)] ." Department</a>&nbsp; &raquo; &nbsp;Create New Course</font><br /><br />";
          $navi .= '<br /><hr /><br />';
          $navi .= "<b>Create New Course</b> - Please fill the form<br />";
          ;
        }
      
        if (isset($_POST['showFullForm']) || arg(3)) {
      	  echo $navi;
          echo drupal_get_form('staff_create_course_form');
          $hideOthers = true;
          echo '<br /><hr /><br />';
          echo staff_display_available_courses($departmentInfo);
        } 
        else {
      	  echo "<font size = '1px'><a href = '/staff/semester'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createeditcourse'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;". $departmentInfo[arg(2)] ." Department</font><br /><br />";
          echo '<br /><hr /><br />';
      	  echo "<b>Create Course</b> - Click to proceed with Course creation<br /><br />";
          echo drupal_get_form('staff_create_course_mini_form');
        }
      }//end of else of if proceed with course assignment 
    }
    else {//the user cannot create or edit records
      echo Error_Types(104);
    }
    if (! $hideOthers) {//only show these things in none edit mode 
      echo '<br /><hr /><br />';
      if ($canCreateModify) {
      	echo "<b>Modify Course</b> - Select a Course to modify it<br />";
        echo drupal_get_form('staff_edit_course_form');
        
        
      }
      else {
        echo Error_Types(105);
      }
      //display form for Course assignment
      echo '<br /><hr /><br />';
      echo '<b>Assign Course(s) to Lecturer(s)</b> - Click to proceed with assigning Course to Lecturer<br /><br />';
      //echo staff_show_assign_course();
      echo drupal_get_form('staff_assign_course_proceed_form');
      
      //display existing courses in the departmens here
      echo '<br /><hr /><br />';
      echo staff_display_available_courses($departmentInfo);
    
    }
  } 
  else {
    
    //allow for some easy navigation
    echo "<font size = '1px'><a href = 'semester'>Semester Administration</a>&nbsp; &raquo; &nbsp;Create/Modify a Course</font><br /><br />";
    echo "<b>Create/Modify Course</b> - To begin select a department and Click Continue<br />";
    echo drupal_get_form('staff_create_edit_course_select_dept_form');
  
    echo '<br /><hr /><br />';
    //display existing departmens here
    echo staff_display_available_departments();
  }
  
  
  unset($_SESSION['showFullForm']);unset($_SESSION['showCourseAssignment']);
  return ob_get_clean();
  
}
function staff_create_edit_course_select_dept_form($form_state) {
  
  $form['#title'] = 'Select Department';
  $form['department_nid'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department Name');
  $form['submit'] = array(
    '#value' => 'Continue',
    '#type' => 'submit'
  );
  
  return $form;
  
}


function staff_create_edit_course_select_dept_form_submit($form, $form_state) {
  drupal_goto("staff/createeditcourse/" . $form_state['values']['department_nid']);
}


function staff_display_available_faculties() {
  $str = "<b>Available Faculties</b><br />
  <table width = '50%'>
    <tr>
      <td><b>#</b></td>
      <td><b>Faculty Name</b></td>
      <td><b>Faculty Abbreviation</b></td>
    </tr>";$i = 1;$color = 0;
    $faculties = get_faculties();
    foreach ($faculties as $v) {
      if ($i%2)$rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
      $str .= "
      <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
        <td>$i</td>
        <td>". $v['faculty_name'] ."</td>
        <td>". $v['faculty_abbr'] ."</td>
      </tr>"; $i++;
    	}
  $str .= "
  </table>";
  return $str;
}


function staff_display_available_departments() {
  $str = "
  <b>Available Departments</b><br />
  <table width = '50%'>
    <tr>
      <td><b>#</b></td>
      <td><b>Faculty Name</b></td>
      <td><b>Faculty Abbreviation</b></td>
      <td><b>Department Name</b></td>
    </tr>";$i = 1;
    $faculties = get_departments();
    foreach ($faculties as $v){
      if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
        $str .= "
         <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
           <td>$i</td>
           <td>". $v['faculty_name'] ."</td>
           <td>". $v['faculty_abbr'] ."</td>
           <td>". $v['dept_name'] ."</td>
         </tr>"; $i++;
    	}
    	
  //}
  $str .= "
  </table>";
  return $str;

}


function is_Faculty_Name_Existing($faculty_name, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_name_value = '%s' AND nid != %d ", $faculty_name, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_name_value = '%s' ", $faculty_name);
  
  if (db_fetch_object($result)) return true;
  
  return false;
}


function is_Faculty_Abbreviation_Existing($faculty_abbreviation, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_abbreviation_value = '%s' AND nid != %d ", $faculty_abbreviation, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_abbreviation_value = '%s' ", $faculty_abbreviation);
  
  if (db_fetch_object($result)) return true;
  
  return false;
}


function is_Department_Name_Existing($department_name, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_department} WHERE field_department_name_value = '%s' AND nid != %d ", $department_name, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_department} WHERE field_department_name_value='%s' ", $department_name);
  
  if (db_fetch_object($result)) return true;
  
  return false;
}


function is_Course_Code_Existing($course_code, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_course} WHERE field_code_value='%s' AND nid !=%d ", $course_code, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_course} WHERE field_code_value='%s' ", $course_code);
  
  if (db_fetch_object($result)) return true;
  
  return false;
}


function Error_Types($num = 0) {
  $prifix1 = "Sorry, "; $prifix2 = "Warning! ";
  switch($num){
  case '101':
    $msg = $prifix1 . 'Faculty Name already exists!<br />';
    break;
  case '102':
    $msg = $prifix1 . 'Faculty Abbreviation already exists!<br />'; break;
  case '103':
    $msg = $prifix1 . 'Department Name already exists!<br />'; break;
  case '104':
    $msg = $prifix1 . 'You do not have permission to Create new Records!<br />'; break;
  case '105':
    $msg = $prifix1 . 'You do not have permission to Edit Records!<br />'; break;
  case '106':
    $msg = $prifix1 . 'No record(s) exists!<br />'; break;
  case '107':
    $msg = $prifix1 . 'Must be Numeric value!<br />'; break;
  case '108':
    $msg = $prifix1 . 'Course Name already exists!<br />'; break;
  case '109':
    $msg = $prifix1 . 'Spaces are not allowed in Course Code!<br />'; break;
  case '110':
    $msg = $prifix1 . 'At least one of the Course Codes entered for Prerequisites / Requisites Codes either does not exist or is invalid!<br />'; break;
  case '111':
    $msg = $prifix1 . 'Cannot reference self for Prerequisite / Requisite Course!<br />'; break;
  case '112':
    $msg = $prifix1 . 'You do not have permission to Access the Department!<br />'; break;
  case '113':
    $msg = $prifix1 . 'Course Assignment already exists for the Course, for the Timetable, for the Semester and for the Session!<br />'; break;
  case '114':
    $msg = $prifix1 . 'Invalid Data was supplied!<br />'; break;
  default:
    $msg =  $prifix2 .'Something fatal occured!<br />';
  }
  return $msg;
}
function is_Valid_Department ($department_nid) {
  $result = db_query("SELECT nid FROM {content_type_department} WHERE nid =%d ", $department_nid);
  if (db_affected_rows($result) > 0 ) return true;
  
  return false;
}
function is_valid_course($course_nid) {
  $result = db_query("SELECT nid FROM {content_type_course} WHERE nid =%d ", $course_nid);
  if (db_affected_rows($result) > 0 ) return true;
  
  return false;

}
function is_valid_course_instance($instance_nid) {
  $result = db_query("SELECT nid FROM {content_type_course_instance} WHERE nid =%d ", $instance_nid);
  if (db_affected_rows($result) > 0 ) return true;
  
  return false;

}


function is_valid_course_code($course_code) {
  $result = db_query("SELECT nid FROM {content_type_course} WHERE field_code_value ='%s' ", $course_code);
  if (db_affected_rows($result) > 0 ) return true;
  
  return false;

}


function course_belongs_to_department($department_nid, $course_nid) {
  $result = db_query("SELECT nid FROM {content_type_course} WHERE nid =%d AND field_department_nid_nid =%d", $course_nid, $department_nid);
  if (db_affected_rows($result) > 0 ) return true;
  
  return false;

}


function course_instance_match_department_and_session($department_nid, $course_instance_nid, $session) {
  $result = db_query("SELECT i.nid FROM {content_type_course_instance} i
  	  	INNER JOIN {content_type_course} c ON i.field_course_id_nid = c.nid
  	  	
  	  	WHERE c.field_department_nid_nid =%d AND i.nid =%d AND i.field_sess_name_value='%s' ", $department_nid, $course_instance_nid, $session);
  if (db_affected_rows($result) > 0 ) return true;
  
  return false;

}


function staff_create_course_form() {
  
 $authorizeCourseEdit = false;
 if (arg(3) && arg(2) && is_valid_course(arg(3)) && course_belongs_to_department(arg(2), arg(3))) {
   $authorizeCourseEdit = true;
   if (empty($_POST['course_code'])) {//trying to edit
     $result = get_Available_Courses(0, arg(3));
     $course = db_fetch_object($result);
   }
  }
  
  $form['#title'] = 'Create New Course';
  $form['course_level'] = array(
    '#type' => 'select',
    '#options' => course_levels(),
    '#title' => 'Course Level');
  if ($course) $form['course_level']['#default_value'] = $course->course_level;
  
  $form['course_code'] = array(
    '#title' => 'Course Code',
    '#type' => 'textfield',
    '#size' => 50, 
    '#required' => TRUE
  );
  if ($course) $form['course_code']['#value'] = $course->course_code;
  
  $form['course_title'] = array(
    '#title' => 'Course Title',
    '#type' => 'textarea',
    '#size' => 255, 
    '#required' => TRUE
  );
  if ($course) $form['course_title']['#value'] = $course->course_title;
  $form['credit_load'] = array(
    '#title' => 'Credit Load',
    '#type' => 'textfield',
    '#size' => 3, 
    '#required' => TRUE
  );
  if ($course) $form['credit_load']['#value'] = $course->credit_load;
  
  $form['requisites_codes'] = array(
    '#title' => 'Requisite Codes  - List of Course code(s), comma separated that have to be completed before this course e.g. MTH201, POL111, PHY202/CHM203. - The use of a \'/\' denotes \'alternative\'.',
    '#type' => 'textarea',
    '#size' => 255
    
  );
  if ($course) $form['requisites_codes']['#value'] = $course->requisites_codes;
  
  $form['prerequisites_codes'] = array(
    '#title' => 'Prerequisite Codes - List of Course code(s), comma separated that can be taken only after this course is completed e.g. MTH201, POL111, PHY202/CHM203. - The use of a \'/\' denotes \'alternative\'.',
    '#type' => 'textarea',
    '#size' => 255
    
  );
  if ($course) $form['prerequisites_codes']['#value'] = $course->prerequisite_codes;
  
  $form['course_semester'] = array(
    '#type' => 'select',
    '#options' => semesters(),
    '#title' => 'Course Semester',
    '#required' => TRUE);
  if ($course) $form['course_semester']['#default_value'] = $course->course_semester;
  
  
  $form['course_description'] = array(
    '#title' => 'Course Description',
    '#type' => 'textarea',
    '#size' => 255,
    '#required' => TRUE
  );
  if ($course) $form['course_description']['#value'] = $course->course_description;
  
  if (isset($_POST['showFullForm'])) {
    //$form['showFullForm'] = array('#showFullForm' => '1');/*
    $form['showFullForm'] = array(
    '#title' => 'Course Description',
    '#type' => 'hidden',
    '#default_value'=> 1 
   );
    
  }
  
  $form['submit'] = array(
    '#value' => 'Create Course',
    '#type' => 'submit'
  );
  if ($authorizeCourseEdit) $form['submit']['#value'] = 'Update Course';
  
  return $form;
	
}


function staff_create_course_form_validate($form, $form_state) {
  //if(isset($form_state['showFullForm'])) $_POST['showFullForm'] = 1; //$form['showFullForm'];
  if (isset($form_state['values']['showFullForm'])) $_POST['showFullForm'] = $form_state['values']['showFullForm'];
  
  if (arg(3)) {//validate EDIT
    if (is_Course_Code_Existing($form_state['values']['course_code'], arg(3)))
      form_set_error('course_code', Error_Types(108));
      
  }
  else {//validate CREATE
    if (is_Course_Code_Existing($form_state['values']['course_code']))
      form_set_error('course_code', Error_Types(108));
  }
  $form_state['values']['credit_load'] = (int) $form_state['values']['credit_load'];
  if (! is_int($form_state['values']['credit_load']) == 1 || $form_state['values']['credit_load'] <= 0)
      form_set_error('credit_load', Error_Types(107));

  //make sure that no spaces in course code
  if (strpos($form_state['values']['course_code'], " "))
    form_set_error('course_code', Error_Types(109));
  
  //if prerequisites is not empty then make sure it conforms
  if (! empty($form_state['values']['prerequisites_codes'])) {
    $bits = explode(", ", $form_state['values']['prerequisites_codes']);
    if (is_array($bits) && sizeof($bits)) {
      //looks like he entered more than one course codes
      foreach ($bits as $v) {
      	$v = trim($v);
      	if (strpos($v, '/')) {
      	  //a / was found..ok
      	  //lets break it up
      	  $morebits =  explode("/", $v);
      	  if (is_array($morebits) && sizeof($morebits)) {
      	    //fine now test each
      	    foreach ($morebits as $h) {
      	      $h = trim($h);
      	      //the data is single so check for valid course code
              if (! is_valid_course_code($h)) //$h == $form_state['values']['course_code'] means do not allow prereqisite to reference itself
                form_set_error('prerequisites_codes', Error_Types(110)); 
              elseif ($h == $form_state['values']['course_code'])
      	        form_set_error('prerequisites_codes', Error_Types(111));//cannot reference self
      	    }
      	  } 
      	  else {
      	    //something spooky is going on
      	    form_set_error('prerequisites_codes', Error_Types(110));
      	  }
      	} 
      	else {
          //the data is single so check for valid course code
          if (! is_valid_course_code($v))
            form_set_error('prerequisites_codes', Error_Types(110));
          elseif ($v == $form_state['values']['course_code'])
      	    form_set_error('prerequisites_codes', Error_Types(111));//cannot reference self
      	}
      }
    }
    else {//seems he entered only one course code. well lets see
      //check for valid course code
      if (! is_valid_course_code($form_state['values']['prerequisites_codes']))
        form_set_error('prerequisites_codes', Error_Types(110));
      elseif ($form_state['values']['prerequisites_codes'] == $form_state['values']['course_code'])
      	form_set_error('prerequisites_codes', Error_Types(111));//cannot reference self
    }
  }
  
  
  
  //if Requisites is not empty then make sure it conforms
  if (! empty($form_state['values']['requisites_codes'])) {
    $bits =  explode(", ", $form_state['values']['requisites_codes']);
    if (is_array($bits) && sizeof($bits)) {
      //looks like he entered more than one course codes
      foreach ($bits as $v) {
      	$v = trim($v);
      	if (strpos($v, '/')) {
      	  //an or was found..ok
      	  //lets break it up
      	  $morebits =  explode("/", $v);
      	  if (is_array($morebits) && sizeof($morebits)) {
      	    //fine now test each
      	    foreach($morebits as $h) {
      	      $h = trim($h);
      	      //the data is single so check for valid course code
              if (! is_valid_course_code($h)) //$h == $form_state['values']['course_code'] means do not allow prereqisite to reference itself
                form_set_error('requisites_codes', Error_Types(110)); 
              elseif($h == $form_state['values']['course_code'])
      	        form_set_error('requisites_codes', Error_Types(111));//cannot reference self
      	    }
      	  } 
      	  else {
      	    //something spooky is going on
      	    form_set_error('requisites_codes', Error_Types(110));
      	  }
      	} 
      	else {
          //the data is single so check for valid course code
          if (! is_valid_course_code($v))
            form_set_error('requisites_codes', Error_Types(110));
          elseif ($v == $form_state['values']['course_code'])
      	    form_set_error('requisites_codes', Error_Types(111));//cannot reference self
      	}
      }
    }
    else {//seems he entered only one course code. well lets see
      //check for valid course code
      if (! is_valid_course_code($form_state['values']['requisites_codes']))
        form_set_error('requisites_codes', Error_Types(110));
      elseif ($form_state['values']['requisites_codes'] == $form_state['values']['course_code'])
      	form_set_error('requisites_codes', Error_Types(111));//cannot reference self
    }
  }
}


function staff_create_course_form_submit($form, $form_state){
  //if(isset($form_state['values']['course_nid']) && is_numeric($form_state['values']['course_nid'])){//the user is trying to edit a given faculty
  if(! arg(3)) $_SESSION['showFullForm'] = 1;
  if(arg(3)){
    
    $node =  node_load(arg(3));
    $node->title                                = $form_state['values']['course_title'];
    $node->field_department_nid[0]['nid']       = arg(2);
    $node->field_code[0]['value']               = $form_state['values']['course_code'];
    $node->field_coursetitle[0]['value']        = $form_state['values']['course_title'];
    $node->field_course_description[0]['value'] = $form_state['values']['course_description'];
    $node->field_creditload[0]['value']         = $form_state['values']['credit_load'];
    $node->field_prerequisite_codes[0]['value'] = $form_state['values']['requisites_codes']; //List of Course code(s), comma separated that have to be completed before this course, code1/code2/code3 will be alternatives, one of which must be completed
    $node->field_prerequisite[0]['value']       = $form_state['values']['prerequisites_codes'];
    $node->field_level[0]['value']              = $form_state['values']['course_level'];
    $node->field_semester[0]['value']           = $form_state['values']['course_semester'];
    node_save($node);
    drupal_set_message($form_state['values']['course_code'] . ' Course was updated!<br />');
    
    drupal_goto(drupal_goto("staff/createeditcourse/" . arg(2)));
  }
  else {
    
    // course CCK
    $node = new stdClass();
    $node->type                                 = 'course';
    $node->uid                                  = 1;  // Admin
    $node->status                               = 1;  // Published
    $node->promote                              = 0;
    $node->sticky                               = 0;
    $node->comment                              = 0;
    $node->title                                = $form_state['values']['course_title'];
    $node->field_department_nid[0]['nid']       = arg(2);
    $node->field_code[0]['value']               = $form_state['values']['course_code'];
    $node->field_coursetitle[0]['value']        = $form_state['values']['course_title'];
    $node->field_course_description[0]['value'] = $form_state['values']['course_description'];
    $node->field_creditload[0]['value']         = $form_state['values']['credit_load'];
    $node->field_prerequisite_codes[0]['value'] = $form_state['values']['requisites_codes']; //List of Course code(s), comma separated that have to be completed before this course, code1/code2/code3 will be alternatives, one of which must be completed
    $node->field_prerequisite[0]['value']       = $form_state['values']['prerequisites_codes'];
    $node->field_level[0]['value']              = $form_state['values']['course_level'];
    $node->field_semester[0]['value']           = $form_state['values']['course_semester'];
    
    drupal_set_message($form_state['values']['course_code'] . ' Course has been created!<br />');
  }
  
  node_save($node);
	
}


function staff_edit_course_form(){
  $form['#title'] = 'Update Course';
 
    
    $form['course_nid'] = array(
      '#type' => 'select',
      '#options' => course(arg(2)),
      '#title' => 'Course Code');
    
    $form['submit'] = array(
      '#value' => 'Edit Course',
      '#type' => 'submit'
    );
 
  
  return $form;
}


function staff_edit_course_form_submit($form, $form_state){
  drupal_goto(drupal_goto("staff/createeditcourse/" . arg(2) .'/'. $form_state['values']['course_nid']));
}


function course_levels() {
  foreach (range(100, 900, 100) as $number) {
    $levels[$number] = $number;
  }
  foreach (range(1, 9) as $number) {
    $levels[$number] = $number;
  }
  return $levels;
}


function semesters() {
  foreach (range(1, 3) as $number) {
    $semester[$number] = $number;
  }
  return $semester;
}


function user_has_access_to_department($department_nid) {
  global $user;
  $result = db_query("SELECT er.role FROM {eduerp_roles} er WHERE er.uid=%d AND er.department_id=%d ", $user->uid, $department_nid);
  
  if(db_Affected_Rows() > 0) return true;
  return false;
}


function staff_create_course_mini_form() {
  $form['#title'] = 'Start Course Creation';
  
  $form['submit'] = array(
    '#value' => 'Start Course Creation',
    '#type' => 'submit'
  );
  
  return $form;
}


function staff_create_course_mini_form_submit($form, &$form_state) {
  
  $_SESSION['showFullForm'] = 1;
}


function get_Staff_in_Department($department_nid) {
  $sql = "
  SELECT ur.uid,
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS name
    FROM {users_roles} ur
    INNER JOIN role r ON ur.rid=r.rid AND name='Staff'
    LEFT JOIN node} npro ON ur.uid=npro.uid AND npro.type='profile'
    LEFT JOIN content_type_profile pro ON npro.vid=pro.vid
    LEFT JOIN eduerp_roles er ON ur.uid=er.uid
    LEFT JOIN content_type_department d ON er.department_id=d.nid
    LEFT JOIN content_type_college c ON er.college_id=c.nid
  WHERE er.department_id=%d
  GROUP BY ur.uid ORDER BY name
  ";
  $result = db_query($sql, $department_nid);
  if (db_affected_rows($result) > 0) {
    while($row = db_fetch_object($result)){
      $stafflist[$row->uid] = $row->name;
    }
  }
  else {
    $stafflist[] = strip_tags(Error_Types(106));
  }
  return $stafflist;
}


function staff_show_assign_course() {
  global $departmentInfo, $canCreateModify;
  if (arg(3))
    echo "<b>Modify Assigned Course to Lecturer</b> | Sesssion: <b>". variable_get('eduerp_current_session', '') ."</b> | Semester: <b>". variable_get('eduerp_current_semester', '') ."</b><br /><br />";
  else
    echo "<b>Assign Course to Lecturer</b> | Sesssion: <b>". variable_get('eduerp_current_session', '') ."</b> | Semester: <b>". variable_get('eduerp_current_semester', '') ."</b><br /><br />";
  
  echo "Below is a list of all availabel Staff and Course(s) that belong to <b>". $departmentInfo[arg(2)] ."</b> Department.<br /><br />";
  if ($canCreateModify)
    echo drupal_get_form('staff_assign_course_form');
  else
      echo Error_Types(104);
  
  if (! arg(3)) {
    //show edit form
    echo '<br /><hr /><br />';
    echo "<b>Edit Course Assignment</b> ";
    if ($canCreateModify)
      echo drupal_get_form('staff_edit_assigned_course_form');
    else
      echo Error_Types(105);
  
  
    //display unassigned existing courses in the department here
    echo '<br /><hr /><br />';
    echo staff_display_available_courses($departmentInfo, 2);
  
  
    //display assigned existing courses in the department here
    echo '<br /><hr /><br />';
    echo staff_display_available_courses($departmentInfo, 1);
  }
  //display existing courses in the department here
  //echo '<br /><hr /><br />';
  //echo staff_display_available_courses($departmentInfo);
}


function staff_assign_course_form() {
  
  if (arg(3) && arg(2) && is_valid_course_instance(arg(3)) && course_instance_match_department_and_session(arg(2), arg(3), variable_get('eduerp_current_session', ''))) {
   //the record is already for the current session so no more checks...we are fine!
   $authorizeCourseEdit = true;
   if (empty($_POST['location'])) {//trying to edit
     $result = get_Course_Instance(arg(3));
     $course_instance = db_fetch_object($result);
   }
  }
  $form['#title'] = 'Assign Course';
  
  $form['course_nid'] = array(
	'#type' => 'select',
	'#options' => course(arg(2)),
	'#title' => 'Course Code'
	);
  if ($course_instance) $form['course_nid']['#default_value'] = $course_instance->field_course_id_nid;

  $form['chief_staff_nid'] = array(
      '#type' => 'select',
      '#options' => get_Staff_in_Department(arg(2)),
      '#title' => 'Chief Lecturer'
      
      );
 if ($course_instance) $form['chief_staff_nid']['#default_value'] = $course_instance->field_lecturer_uid;
 
  $form['assist_staff_nid'] = array(
      '#type' => 'select',
      '#options' => array(0=>'N/A') + get_Staff_in_Department(arg(2)),
      '#title' => 'Assistant Lecturer'
      
      );
  if ($course_instance) $form['assist_staff_nid']['#default_value'] = (int) $course_instance->field_lecturer_alternate_uid ;
  
  $form['semester'] = array(
      '#type' => 'select',
      '#options' => semesters(),
      '#title' => 'Semester'
      
      );
  if ($course_instance) $form['semester']['#default_value'] = $course_instance->field_semester_name_value;
  /*
   $form['location'] = array(
      '#type' => 'textfield',
      '#title' => 'Location',
      '#required' => TRUE
      
      );
   if ($course_instance) $form['location']['#default_value'] = $course_instance->field_location_value;
   */
   $form['timetable'] = array(
      '#type' => 'textarea',
      '#title' => 'Time Table',
      '#required' => TRUE
      );
   if ($course_instance) $form['timetable']['#default_value'] = $course_instance->field_timetable_value;
   
   $form['showCourseAssignment'] = array( //used to keep showing the form
      '#type' => 'hidden',
      '#default_value' => 1
      );
   
  $form['submit'] = array(
      '#value' => 'Assign Course',
      '#type' => 'submit'
    );
  if (arg(3)) $form['submit']['#value'] = "Update Assignment";
  return $form;
}


function staff_assign_course_proceed_form() {
  $form['#title'] = 'Start Course Assignment';
  
  $form['submit'] = array(
    '#value' => 'Start Course Assignment',
    '#type' => 'submit'
  );
  
  return $form;
	
}


function staff_assign_course_proceed_form_submit() {
  $_SESSION['showCourseAssignment'] = 1;

}


function staff_assign_course_form_validate($form, &$form_state) {
  //make sure it is unique for course/semester/session
  if (arg(3)) {//validate EDIT
    if (is_course_assignment_existing($form_state['values']['course_nid'], variable_get('eduerp_current_semester', ''), variable_get('eduerp_current_session', ''), $form_state['values']['timetable'], arg(3))) {
      form_set_error('course_code', Error_Types(113));
    }
  	  
  } 
  else {
    if (is_course_assignment_existing($form_state['values']['course_nid'], variable_get('eduerp_current_semester', ''), variable_get('eduerp_current_session', ''), $form_state['values']['timetable'])) {
      form_set_error('course_code', Error_Types(113));
    }
  }
  
}


function staff_assign_course_form_submit($form, &$form_state) {
  $_SESSION['showCourseAssignment'] = 1;
  
  $course = db_fetch_object(get_Available_Courses(0,$form_state['values']['course_nid']));
  //if(! arg(3)) $_SESSION['showFullForm'] = 1;
  if(arg(3)){
    
    $node =  node_load(arg(3));
    $node->title                              = $course->course_code .' - '. variable_get('eduerp_current_session', '') .' - '. variable_get('eduerp_current_semester', '') .' - '. $course->course_level .' - '. $form_state['values']['location']; //[Course Title] . ' - ' . [Session Name] . ' - ' . [Semester Name] . ' - ' . [Level Name];
    $node->field_course_id[0]['nid']          = $form_state['values']['course_nid'];
    $node->field_lecturer[0]['uid']           = $form_state['values']['chief_staff_nid'];
    $node->field_lecturer_alternate[0]['uid'] = ($form_state['values']['assist_staff_nid'] != 0) ? $form_state['values']['assist_staff_nid'] : NULL;
    $node->field_sess_name[0]['value']        = variable_get('eduerp_current_session', '');
    $node->field_semester_name[0]['value']    = $form_state['values']['semester'];
    $node->field_repeat[0]['value']           = ($form_state['values']['semester'] == 3) ? 1 : 0;
    //$node->field_location[0]['value']         = $form_state['values']['location'];
    $node->field_timetable[0]['value']        = $form_state['values']['timetable'];
    node_save($node);
    drupal_set_message($course->course_code .' Course was updated!<br />');
    
    drupal_goto(drupal_goto("staff/createeditcourse/" . arg(2)));
  }
  else {
    $location = 1;
    //this check is to know wether to increase the value of Location
    if (is_course_assignment_existing($form_state['values']['course_nid'], variable_get('eduerp_current_semester', ''), variable_get('eduerp_current_session', ''), $form_state['values']['timetable'], 0, true )) {
      //it means this course already has an instance for the semester and for the session
      //now get the max Location ID
      $max = get_Max_Location_ID($form_state['values']['course_nid'], variable_get('eduerp_current_semester', ''), variable_get('eduerp_current_session', ''));
      $location = $max->num + 1;
    	
    }
    // course_instance CCK
    $node = new stdClass();
    $node->type                               = 'course_instance';
    $node->uid                                = 1;  // Admin
    $node->status                             = 1;  // Published
    $node->promote                            = 0;
    $node->sticky                             = 0;
    $node->comment                            = 0;
    $node->title                              = $course->course_code .' - '. variable_get('eduerp_current_session', '') .' - '. variable_get('eduerp_current_semester', '') .' - '. $course->course_level .' - '. $form_state['values']['location']; //[Course Title] . ' - ' . [Session Name] . ' - ' . [Semester Name] . ' - ' . [Level Name];
    $node->field_course_id[0]['nid']          = $form_state['values']['course_nid'];
    $node->field_lecturer[0]['uid']           = $form_state['values']['chief_staff_nid'];
    $node->field_lecturer_alternate[0]['uid'] = ($form_state['values']['assist_staff_nid'] != 0) ? $form_state['values']['assist_staff_nid'] : NULL;
    $node->field_sess_name[0]['value']        = variable_get('eduerp_current_session', '');
    $node->field_semester_name[0]['value']    = $form_state['values']['semester'];
    $node->field_repeat[0]['value']           = ($form_state['values']['semester'] == 3) ? 1 : 0;;
    $node->field_location[0]['value']         = $location;
    $node->field_timetable[0]['value']        = $form_state['values']['timetable'];
    node_save($node);
    //$course_instance = $node->nid;
    
    drupal_set_message($course->course_code. ' Course has been Assigned!<br />');
  }
  
  node_save($node);
  
}
function staff_edit_assigned_course_form(){
  $form['#title'] = 'Update Assigned Courses';
 //get all assigned courses for the department
 $assigned = get_Assigned_Courses(variable_get('eduerp_current_session', ''), arg(2));
 if (db_affected_rows() > 0) {
   while ($row = db_fetch_object($assigned)){
     $assignedCourses[$row->nid] = $row->course_code;
   	   
   }
 	 
 } 
 else
   $assignedCourses[] = strip_tags(Error_Types(106));
  
 $form['course_instance_nid'] = array(
      '#type' => 'select',
      '#options' => $assignedCourses,
      '#title' => 'Course Code');
 $form['showCourseAssignment'] = array( //used to keep showing the form
      '#type' => 'hidden',
      '#default_value' => 1
      );
 $form['submit'] = array(
      '#value' => 'Edit Assigned Course',
      '#type' => 'submit'
    );
 
  
  return $form;
}


function staff_edit_assigned_course_form_validate($form, &$form_state) {
  if ($form_state['values']['course_instance_nid'] == '0') 
    form_set_error('course_code', Error_Types(114));
}


function staff_edit_assigned_course_form_submit($form, $form_state) {
  $_SESSION['showCourseAssignment'] = 1;
  drupal_goto(drupal_goto("staff/createeditcourse/" . arg(2) .'/'. $form_state['values']['course_instance_nid']));
}


function get_Assigned_Courses($session, $department_nid = 0) {
  $where = "WHERE i.field_sess_name_value = '". $session ."' "; $args = "";
  if ($department_nid != 0) {
    
    $where .= " AND k.field_department_nid_nid = %d";
    $arg = $department_nid ;
    
  }
  
  $r = db_query("SELECT i.nid nid, field_level_value AS course_level, field_code_value AS course_code, 
  	  field_coursetitle_value AS course_title, field_creditload_value AS credit_load, field_prerequisite_value AS prerequisite_codes,
  	  field_prerequisite_codes_value AS requisites_codes,	field_semester_value AS course_semester, field_course_description_value AS course_description, 
  	  field_timetable_value AS timetable, 
  	  field_department_name_value AS dept_name, field_college_name_value AS fac_name, field_college_abbreviation_value AS fac_abbr,
  	  IFNULL(CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')), ' ') AS staff_name
  	  FROM {content_type_course} k
  	  INNER JOIN {content_type_department} d ON k.field_department_nid_nid = d.nid 
  	  INNER JOIN {content_type_college} c ON d.field_college_id_nid = c.nid
  	  INNER JOIN {content_type_course_instance} i ON k.nid = i.field_course_id_nid
  	  LEFT JOIN {node} npro ON i.field_lecturer_uid=npro.uid AND npro.type='profile'
          LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
  	  ". $where ."
  	  ORDER BY field_college_name_value, dept_name, course_level, course_code ", $arg);
  return $r;
}


function get_UnAssigned_Courses($session, $department_nid = 0) {
  $where = ""; $args = "";
  if ($department_nid != 0) {
     $where = "
     WHERE k.nid NOT IN (
     		SELECT course.field_course_id_nid
		FROM {content_type_course_instance} AS course
		INNER JOIN {content_type_course} AS q ON q.nid = course.field_course_id_nid
		INNER JOIN {content_type_department} AS dept ON q.field_department_nid_nid = dept.nid
		WHERE dept.nid =$department_nid AND course.field_sess_name_value = '". $session ."' ) 
	AND k.field_department_nid_nid =$department_nid ";
  }
  
  $sql = "
  SELECT k.nid nid, field_level_value AS course_level, field_code_value AS course_code, field_coursetitle_value AS course_title, 
  	  field_creditload_value AS credit_load, field_prerequisite_value AS prerequisite_codes, field_prerequisite_codes_value AS requisites_codes, 
  	  field_semester_value AS course_semester, field_course_description_value AS course_description, field_department_name_value AS dept_name, 
  	  field_college_name_value AS fac_name, field_college_abbreviation_value AS fac_abbr
  	  FROM {content_type_course} AS k
  	  INNER JOIN {content_type_department} AS d ON k.field_department_nid_nid = d.nid
  	  INNER JOIN {content_type_college} AS c ON d.field_college_id_nid = c.nid
  	  ". $where ."
  	  ORDER BY field_college_name_value, dept_name, course_level, course_code ";
  
  
  $r = db_query($sql);
  
  return $r;
}


function get_Max_Location_ID($course_nid, $semester, $session) {
  $result = db_query("SELECT IFNULL(MAX(field_location_value), 0) num FROM {content_type_course_instance} 
  	  WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' ", $course_nid, $semester, $session);
  return $row = db_fetch_object($result);
}


function is_course_assignment_existing($course_nid, $semester, $session, $timetable, $instance_nid = 0, $for_location_checks=false) {
  if ($for_location_checks) {//no need to include timetable
    if ($instance_nid != 0) { 
      $result = db_query("SELECT nid FROM {content_type_course_instance} 
  	  WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' AND nid !=%d ", $course_nid, $semester, $session, $instance_nid);
  	  
    }
    else { 
      $result = db_query("SELECT nid FROM {content_type_course_instance} 
  	  WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' ", $course_nid, $semester, $session);
    }
  	  
  }
  else {//include timetable
    if ($instance_nid != 0) {
      $result = db_query("SELECT nid FROM {content_type_course_instance} 
  	  WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' AND nid !=%d AND field_timetable_value = '%s' ", $course_nid, $semester, $session, $instance_nid, $timetable);
  	  
    }
    else {
      $result = db_query("SELECT nid FROM {content_type_course_instance} 
  	  WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s'  AND field_timetable_value = '%s' ", $course_nid, $semester, $session, $timetable);
    }
  }
  if (db_affected_rows() > 0) return true;
  
  return false;
  
}


function get_Course_Instance($course_instance_nid) {
  $result = db_query("SELECT nid, field_lecturer_uid, field_sess_name_value, field_semester_name_value,	field_lecturer_alternate_uid, field_repeat_value, field_course_id_nid,	field_location_value, field_timetable_value
  	  FROM {content_type_course_instance} 
  	  WHERE nid=%d ", $course_instance_nid);
  return $result;
}
?>
