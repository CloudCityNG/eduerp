<?php
/**
 * @author Kayode Odeyemi
 * @file
 * Allows payment via edupay. 
 */

/**
 * hook_form_alter override
 * @param <type> $form
 * @param <type> $form_state
 * @param <type> $form_id
 *
 * @author Kayode odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'uc_cart_checkout_form':
      if(variable_get('uc_edupay_payment_method', 'edupay')) {
          $form['panes']['payment']['payment_method']['#default_value'] = 'edupay';
      }
      break;

    case 'uc_cart_checkout_review_form':
      //dsm('form is uc_cart_checkout_review_form');
      $order_id = intval($_SESSION['cart_order']);
      if($order_id > 0) {
        $order = uc_order_load($order_id);

        if ($order->payment_method == 'edupay') {
          //unset($form['submit']);
          $form['#prefix'] = '<table id="edupay-review-table"><tr><td>';
          // We can unset the submit order here so we can send data to edupay
          //$form['#suffix'] = '<td>' . drupal_get_form('uc_edupay_invoice_form', $order) . '</td></td><td>'. drupal_get_form('uc_edupay_form', $order) .'</td></tr></table>';
          $form['#suffix'] = '<td>' . drupal_get_form('uc_edupay_invoice_form', $order) . '</td></td></tr></table>';
        }
      }
    case 'uc_cart_view_form':
      // @todo
      // if a fee of type fees is in the cart,
      // disable it from edit
      // foreach of the fees in the cart, loadup its nid
      // dsm(uc_cart_get_contents());
  }
}

/**
 * implements hook_cart_item
 * 
 * 
 */ 
function uc_edupay_cart_item($op, &$item){
  switch($op) {
    case 'load':
      $fees_type = EDUERP_FEES_NORMAL;
      /*if($item->data['type'] == $fees_type){
        // load registration
        $late = uc_eduerp_fees_load_fee_options($fees_type);
        $late_value = $late['late_registration'];
        if(!is_null($late_value['last_registration_date'])){
          $late_charges = $late_value['amount'];
          // load its price
          $price = $item['price'];
          // add to the pprice
          $price += $late_charges;
          // modify title to read [title] + (Late registration included)
          $text = t('Late Registration Included');
          $item['title'] = $item['title'] . ' ' . $text;
          //$item['title']  = theme('eduerp_fees_cart_title', $item['title'], $text);
        }
      }*/
  }
}

function uc_edupay_theme(){
  return array(
    'eduerp_fees_cart_title' => array(
      'arguments' => array($title => NULL, $text => NULL),
    ),
  );
}

/**
 * 
 * 
 * @todo To be rethemed during theming
 */ 
function theme_eduerp_fees_cart_title($title, $text) {
  $output = $title . ' ' . "<span><strong>$text</strong></span>";
  return $output;
}

/**
 * 
 * @todo Load the price of each item in cart
 */ 
function uc_edupay_load_price(){
}

/**
 * Implements hook_payment_method
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_payment_method() {
  $methods[] = array(
    'id' => 'edupay',
    'name' => t('edupay'),
    'title' => t('Edupay'),
    //'review' => variable_get('uc_2checkout_check', FALSE) ? t('Credit card/eCheck') : t('Credit card'),
    'desc' => t('Payment via edupay web service'),
    'callback' => 'uc_payment_method_edupay',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Adds edupay to ubercart payment settings form
 * @param <type> $op
 * @param <type> $arg1
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_payment_method_edupay($op, &$arg1) {

  switch($op) {
    // create some settings here that might be useful in cart-details op
    case 'settings':
      // This is payment method specific settings at admin/store/settings/payment/edit/methods
      $form['uc_edupay_payment_method'] = array(
        '#type' => 'checkbox',
        '#title' => t('Make edupay selected by default when checking out your order'),
        '#default_value' => variable_get('uc_edupay_payment_method', 'edupay'),
      );
      // @todo Change to using configuration setting at admin/settings/eduerp/transaction
      $form['edupay_user'] = array(
        '#type' => 'textfield',
        '#title' => t('Edupay Username'),
        '#description' => t('Enter the username for edupay authentication'),
        '#default_value' => variable_get('edupay_user', 'username')
      );
      $form['edupay_pass'] = array(
        '#type' => 'password',
        '#title' => t('Edupay Password'),
        '#description' => t('Enter the password for that accompanies the username you entered above.'),
        '#default_value' => variable_get('edupay_pass', 'password')
      );
      return $form;
    case 'cart-details':
      //return drupal_get_form('uc_payment_method_edupay_form', $arg1);
      //dsm($arg1);
    case 'cart-process': //This happens when Review Order is clicked
      // do edupay processing
      // validate data
      // Store the transaction id in edupay as well as do any form of validation.
      //dsm('processing cart');
      return;
    case 'cart-review': // display json output response here
    case 'order-view': // display receipt to student here

  }
}

/**
 * Called after uc_edupay_service_add returns a successfull transaction
 * @param <type> $form_state
 * @param <type> $order
 * @return <type>
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_payment_method_edupay_form($form_state, $order) {
  $form['receipt_no'] = array(
    '#type' => 'textfield',
    '#title' => t('Receipt Number'),
    '#size' => 20,
  );
  $form['confirmation_no'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirmation Number'),
    '#size' => 32,
  );
  return $form;
}

/**
 * Generates invoice
 * @param <type> $form_state
 * @param <type> $order
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_invoice_form($form_state, $order) {

  $form['pdflink'] = array(
      '#type' => 'hidden',
      '#value' => 'invoice/pdf/' . $order->order_id,
  );

  // store returned js value in this hidden field
  $form['do_pdfinvoice'] = array(
      '#type' => 'hidden',
  );

  $form['hidden_order'] = array(
      '#type' => 'hidden',
      '#value' => $order,
  );
  // Generate invoice
  // Allow invoice to be emailed to user
  $form['invoice'] = array();

  drupal_add_js(drupal_get_path('module', 'uc_edupay') .'/uc_edupay.js');

  // in the form function store the link of the file in $form_state['storage']
  // alternatively use hidden fields
  //if(!isset($form_state['storage'])) {

      $invoice_form_settings = array(
        //'pdflink' => $form_state['values']['pdflink'],
        'pdflink' => $form['pdflink']['#value'],
      );

      //add the variable that contains the link to drupal_add_js
      //stores $invoice_form_settings into js setting
      drupal_add_js(array('uc_edupay' => $invoice_form_settings), 'setting');

      // to call the javascript code that will begin the download, do either of these;

      // test if js is called
      //drupal_add_js('Drupal.behaviors.uc_edupay = function() { alert("clicked"); }', 'inline');

  //}

  $form['invoice']['gen_invoice'] = array(
      //'#value' => '<div>' . l(t('Save Invoice'), "#", array('attributes' => array('class' => 'invoice-submit'))) . '</div>'
      '#value' => '<div>' . '<a href="javascript:void" class="invoice-submit">Save Invoice</a></div>'
  );

  /*$form['invoice']['gen_invoice'] = array(
      '#type' => 'submit',
      '#value' => t('Save Invoice'),
      '#ajax' => array(
          'enabled' => TRUE
      ),
      '#attributes' => array('class' => 'invoice-submit'),
      //'#weight' => 5,
      '#submit' => array('uc_edupay_invoice_submit'),
  );*/
  
  return $form;
}
/**
 * Process invoice based on form_state order values.
 * This will be relevant if invoice processing is handled by FAPI
 * @param <type> $form
 * @param <type> $form_state
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_invoice_submit($form, &$form_state) {
  switch ($form_state['values']['op']) {
    case t('Save Invoice'):
      if (isset($form_state['values']['gen_invoice'])) {
          //return the value of what 'pdflink' is set to
          $form_state['storage']['pdflink'] = $form_state['values']['pdflink'];
          //$_REQUEST['destination'] = 'cart/checkout/review';
          return TRUE;
          //drupal_goto($form_state['storage']['pdflink']);
          //drupal_goto("invoice/pdf/" . $form_state['values']['hidden_order']->order_id);
      }
      break;
  }
}

/**
 * Retrieves order items and passes it to uc_edupay_service_add
 * @param <type> $form_state
 * @param <type> $order
 * @return $form array
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_form($form_state, $order) {

  if(!isset($edupay_data)) {
      $edupay_data = $order->data->edupay_data;
  }
  
  $unserialized = unserialize($edupay_data);
  
  if(!isset($order))

  $data = array(
    'transaction_id' => $edupay_data['transaction_id'],
    'total' => uc_price($order->order_total, $context, $options),
    'cart_order_id' => $order->order_id,
    //'x_receipt_link_url' => url('cart/2checkout/complete/'. uc_cart_get_id(), array('absolute' => TRUE)),
    //'merchant_order_id' => $order->order_id,
    'pay_method' => isset($order->payment_method) ? $order->payment_method : 'edupay',
  );

  //$form['#action'] = '_uc_edupay_service_add';

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit Order')
  );

  //$form['#submit'][] = '_uc_edupay_service_add';
  return $form;
}

/**
 * @see uc_edupay_form
 * Makes 'add' service request to edupay.
 * Called when user submits order
 * 
 * @deprecated @see _uc_edupay_process_order_request
 * 
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function _uc_edupay_service_add() {
  return 'http://edupay.co.cc/api/transaction/add';
}


/**
 * Ajaxify the button to generate the invoice
 * Implementation of hook_ajax_types
 * @see @link http://drupal.org/project/ajax
 * @param $types Assoc
 * @return Bool
 * 
 * @deprecated
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_ajax_types(&$types) {
  $id = 'uc_edupay_invoice_form';
  $types[$id] = t('Edupay: Generate Invoice');
  return TRUE;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function uc_edupay_ctools_plugin_api($module, $api) {
  if ($module == 'strongarm' && $api == 'strongarm') {
    return array('version' => 1);
  }
}

/**
 * Hook to define edupay data structure
 * 
 * @param $fees
 *   - The fees
 */ 
function uc_edupay_edupay_hook($order) {
  foreach (module_implements('edupay') as $module) {
    $function = $module . '_edupay';
    $result = $function($order);
    if (isset($result) && is_array($result)) {
      $return = array_merge($return, $result);
    }
    else if (isset($result)) {
      $return[] = $result;
    }
  }
  return $return;
}

/**
 * Processes the order. Called whenever we have a new transaction.
 * 
 * Wrapper for drupal_http_request
 * 
 */ 
function _uc_edupay_process_order_request(&$order) {
  
  // module_invoke('uc_edupay', 'edupay')
  if($data = module_invoke('uc_edupay', 'edupay', $order)) {
    //$data_arr[] = get_object_vars($data->fees);
    /*$data['fees'][] = array(
      'fees' => array(
        'status' => $arg1->order_status,
        'timeout' => 0,
      ),
      'hostel' => array(
        'status' => $arg1->order_status,
        'timeout' => 0,
      )
    );*/
    dsm($data);
    //dsm($order);
    /*$data = array(
      'code' => $university_code,
      'digest' => 'digest', // get this from institution table
      'status' => 'pending',
      'fees' => $arg1,
      'amount' => 0.0,
      'identifier' => ''
    );*/
    $items = $data['fees'];
    $uri = UC_EDUPAY_URL;

    // @todo: Make oauth authentication to edupay
    // temporarily we are storing the username and password for edupay authentication
    // in eduerp. This is not right and will be replaced with oauth
    $uri['user'] = variable_get('edupay_user', '');
    $uri['pass'] = variable_get('edupay_pass', '');
    
    $header = array('Content-Type' => 'application/x-www-form-urlencoded');
    $method = 'POST';
    
    $result = drupal_http_request($uri, $header, $method, http_build_query($data, '', '&'));

    return $result;
  }
}

/**
 * Implementation of hook_order().
 * This is called before uc_checkout_pane_eduerp_fees
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_order($op, &$arg1, $arg2) {
  global $user;
    switch ($op) {
      // Called when an order is created
      case 'new':
        drupal_set_message("OP IS NEW");
        // process payment here instead of case submit
        // make POST request to edupay, sending uid, amount, university code, digest,
        // ubercart status, product attribute, last_registration_date_value
        // hostel_registration_expiry_date_value
        // get the return tpin from edupay
        // insert into eduerp_transaction the order_id and tpin
        
        // Make request to external payment gateway
        $result = _uc_edupay_process_order_request($arg1);
        $response = $result->data;
        $code = $result->code;
        dsm($arg1);
        
        switch($code){
          case 200:
            // @todo Test authentication, test digest and test fees data structure
            dsm($result);
            $_SESSION['edupay_transaction_accepted'] = t('accepted');
            // get tpin from result
            $tpin = $response->tpin;
            //$_SESSION['transaction_id'] = _uc_edupay_trans_id($arg1);
            $success = FALSE;
            if((!isset($arg1->transaction_id) && !empty($tpin))) {
              $arg1->transaction_id = _uc_edupay_trans_id($arg1);
              // Store the transaction_id and tpin in db
              db_query("
                  INSERT INTO {eduerp_transaction} (uid, transaction_id, order_id, tpin)
                  VALUES(%d, '%s', %d, '%s')",
                      $arg1->uid, $arg1->transaction_id, $arg1->order_id, $tpin
                      );
              $success = TRUE;
              if($success) {
                  drupal_set_message("Order transaction Created Successfully");
              } else {
                  drupal_error_handler('IN81', 'Your new Order failed', 'uc_hostel_allocation', '81');
              }
            }
          // status codes to provide try again functionality for 500, 503, 504, 417,
          // AJAX functionality for try again request
          case 408: // Request Timeout
          case 417: // Expectation Failed
          case 500: // Internal Server Error
          case 503: // Service Unavailable
          case 504: // Gateway Timeout
            drupal_set_message('Something went wrong somewhere. Please try again');
            
          // All fictitious actions
          case 502: // Bad Gateway
          case 505: // HTTP Version Not Supported
            // based on the response returned from edupay, provide the appropriate error message
            // Display a Try Again link so the user can try again.
            //drupal_json();
            //dsm($result);
            drupal_set_message(t('Oooops! Something went wrong! We are unable to process your transaction. Please contact bursary.'), 'error');
            // Break everything
            // Disable the submit order button and also make /checkout/complete return 400 (Bad request). Happens if the user knows this URL and wants to fake it
            if (uc_cart_get_contents() == NULL) {
              uc_cart_empty($arg1->order_id);
            }
          
          // All others as default
          default:
            // watchdog the status code and status message
            watchdog('uc_edupay', t('Transaction failed on @uid. Status code: @code, Status error message: @error', array('@uid' => $arg1->uid, '@code' => $result->code, '@error' => $result->status_message)));
        }        
            
        // Occurs when Submit Order is clicked
        case 'submit':
          //dsm("OP IS SUBMIT");
          //dsm("in op submit, arg1->transaction_id is " . $arg1->transaction_id);

          // on submit, it is possible to also update $arg1->transaction_id into uc_orders data field
          if ($arg1->payment_method == 'edupay') {
            // process payment
            // Before uc_payment_process function can be called, you need to write a gateway callback
            // to do the actual processing. In the regards, we will simply made a web service call
            // to edupay to store the generated transaction_id and jamb number
            // uc_payment_process('edupay', $arg1->order_id, $arg1->order_total, NULL, TRUE, NULL, FALSE);
            
            // if the order is successful, empty the cart and invalidate SESSION variables
            if(isset($_SESSION['edupay_transaction_accepted'])){
              // set the order_status to completed
              
              // Break everything
              uc_cart_empty(uc_cart_get_id());
              // Clear our the session variables used to force the cart workflow.
              unset($_SESSION['cart_order'], $_SESSION['do_complete'], $_SESSION['new_user']);
            }else {
              // Keep the user's item in the cart until the problem for the failure
              // has been resolved.
              // Also set the SESSION object for redirect so that the user can continue
              // from where he/she left off.
            }
          }

        // Occurs when Review Order is clicked. Data is inserted into uc_orders
        case 'save':
          //dsm("OP IS SAVE");
          //store hostel data object in uc_order. Also store the generated transaction id and JAMB
          // Number as part of the data during save op.
          // retrieve the stored transaction_id and pass it to $arg1->data

          if(!isset($arg1->transaction_id)) {
              $arg1->transaction_id = _uc_hostel_allocation_load_transaction($arg1);
          }
          if ($arg1->payment_method == 'edupay') {
              $edupay_data = array('transaction_id' => $arg1->transaction_id, 'order_id' => $arg1->order_id);
              $data = $arg1->data;
              $data->edupay_data = serialize($edupay_data);
              //dsm($data);
              //dsm(unserialize($data->edupay_data));
              db_query("UPDATE {uc_orders} SET data = '%s' WHERE order_id = %d", serialize($data), $arg1->order_id);
          }
          //db_query("UPDATE {uc_orders} SET data = '%s' WHERE order_id = %d", serialize($arg1->data), $arg1->order_id);
          /*if (!empty($arg1->data) && $arg1->order_status == 'in_checkout') {
              db_query("UPDATE {uc_orders} SET data = '%s' "
              ."WHERE order_id = %d AND uid = %d", $arg1->data,
               $arg1->order_id, $arg1->uid);
          }*/

        // Load the hostel reservation data from the database.
        case 'load':
          //dsm("OP IS LOAD");
          $data = hostel_allocation_reserved_data();
          $arg1->data = $data;
          $arg1->studentid = $data->studentid;
          if(isset($_SESSION['transaction_id'])) {
              unset($_SESSION['transaction_id']);
          }
          //dsm(_uc_edupay_trans_id($arg1));
          //dsm($arg1->studentid);
          break;
    }
}

/**
 * Generates transaction id
 * A transaction is made up of the order_id, uid and the transaction id
 * @param <type> $order
 * @return string
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function _uc_edupay_trans_id($order) {

    static $trans_id = '';

    $rand = mt_rand(0, mt_getrandmax());
    $order_id = $order->order_id;
    $user_id = $order->uid;
    $date = date('Ymd');

    $trans_schema = array(
        'char' => '#',
        'random' => $rand,
        'trans_date' => $date,
        'order_id' => $order_id,
        'uid' => $user_id
    );

    $trans_id .= implode('', $trans_schema);

    return $trans_id;
}

/** 
 * Implements hook_checkout_pane
 * 
 */  
function uc_edupay_checkout_pane() {
  //$fees = uc_eduerp_fees_get_fees();
  $items = uc_cart_get_contents();
  dsm($items);
  foreach($items as $fee) {
    $panes[$fee->title] = array(
      'id' => $fee->cart_item_id, //pass in here the fee attribute
      'callback' => 'uc_checkout_pane_eduerp_fees',
      'title' => $fee->title,
      'desc' => t('Below shows the fee items in your cart @title payment.', array('@title' => $fee->cart_item_id)),
      'weight' => 8,
    );
  }
  return $panes;
}

/**
 * A single callback to display all fees in the cart
 * in a generic checkout pane.
 * 
 * @param
 *   - $op: Operations
 *  - $arg1: contains order information
 *  - $arg2
 * 
 */ 
function uc_checkout_pane_eduerp_fees($op, &$arg1, $arg2){
  global $user;
  //dsm($arg1);
  
  //$items = uc_cart_get_contents();
  $zz = uc_cart_get_contents();
  foreach($zz as $z){
    $items[] = get_object_vars($z);
  }
  switch ($op) {
    case 'view':
      // if item in the cart is of type fees
      // for each on the items and display them in fees pane
      foreach($items as $key => $fee){
        // load its options
        //uc_eduerp_fees_load_item_options()
        //$type[$key] = $fee_item['data']['type'];
        //if($key['data']['type'] == EDUERP_FEES_NORMAL){
        $item[$key] = $fee;
        // get its options
        //$data[] = uc_eduerp_fees_load_item_options(); // Content is made up everything including data
        $data[$key] = $fee['data'];
        $description[$key] = $fee['title'];
        return array('description' => t('Content title is %title', array('%title' => $description[$key])), array('contents' => $data[$key]));
      }
      
    case 'review':
  }
}

/**
 * Implements hook_edupay
 * 
 */ 
function uc_edupay_edupay($order){
  module_load_include('inc', 'eduerp', 'eduerp.admin');
  
  $institution = eduerp_get_institution('name');
  
  if(!isset($order)) {
    $order = $_SESSION['cart_order'];
  }
  if(!empty($institution)) {
    $code = $institution->code;
    $key = $institution->secret;
    $amount = $order->order_total;
    $identifier = ' '; // space equivalent to NULL right?
    
    $valid_institution = array(
      'amount' => $amount,
      'code' => $code, 
      'identifier' => $identifier
    );
  
    //$digest = md5(":" + implode('', $valid_institution));
    $digest = _edupay_digest($code, $key, $valid_institution);
    
    $data = array(
      'code' => $code, // get from $institution
      'digest' => $digest, // the university code, a colon, and an autogenerated secret code
      'status' => uc_order_status_data($order->order_status, 'state'), // the order status at the time of processing. Get from order
      'amount' => $amount, //get from order. ubercart usually lumps all cart items together. We need to seperate them by product_attribute before sending to edupay
      'identifier' => $identifier, // set this if you need it
      'fees' => $order // the order object at the time of processing
    );
  }
  
  return $data;
}

/**
 * EduPay digest 
 * 
 */ 
function _edupay_digest($code, $key, $valid_institution) {
  //$valid_institution = array('amount' => '0.0', 'code' => $code, 'identifier' => ' ');
  if(!empty($valid_institution) && array_key_exists('code', $valid_institution)){
    $text = 
        $valid_institution['code'] . ":" . 
        $valid_institution['identifier'] . ":" . 
        $valid_institution['amount'] . ":" . 
        $key;
  }
  return strtoupper(hash("md5", $text)); 
}