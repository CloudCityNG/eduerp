<?php
/**
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 * 
 * @file
 * Allows payment via edupay. 
 */

require_once drupal_get_path('module', 'oauth_common') . '/includes/DrupalOAuthClient.inc';
 
/**
* 
* @todo Build a menu system for uc_edupay if required
*/ 
function uc_edupay_menu() {
  $items = array();
  $items['admin/settings/eduerp/transaction/edupay'] = array(
    'title' => t('Edupay settings'),
    'description' => t('Configure settings for edupay'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_edupay_config_form'), # the form_id
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function uc_edupay_config_form($form_state) {
  $form['uc_edupay_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Edupay remote site settings'),
  );
  $form['uc_edupay_config']['uc_edupay_token_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Edupay Token Endpoint'),
    '#description' => t('Enter the URL where token will be requested.'),
    '#default_value' => variable_get('uc_edupay_token_url', ''),
    '#required' => TRUE
  );
  $form['uc_edupay_config']['uc_edupay_transaction_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Edupay Transaction Endpoint'),
    '#description' => t('Enter the Edupay URL where transactions will be processed.'),
    '#default_value' => variable_get('uc_edupay_transaction_url', ''),
    '#required' => TRUE
  );
  $form['uc_edupay_config']['uc_edupay_config_host'] = array(
    '#type' => 'radios',
    '#title' => t('Host configuration'),
    '#default_value' => variable_get('uc_edupay_config_host', 1),
    '#options' => array(t('Local'), t('Remote')),
    '#description' => t('Set whether to communicate to Edupay locally or remotely')
  );
  return system_settings_form($form);
}

function uc_edupay_config_form_validate($form, &$form_state) {
  if(isset($form_state['values']['token_url'])) {
    if(!valid_url($form_state['values']['token_url'], TRUE)) {
      form_error($form['uc_edupay_config']['token_url'], t('The token endpoint url is invalid.'));
    }
  }
  if(isset($form_state['values']['transaction_url'])) {
    if(!valid_url($form_state['values']['transaction_url'], TRUE)) {
      form_error($form['uc_edupay_config']['transaction_url'], t('The transaction endpoint url is invalid.'));
    }
  }
  return $form;
}
/**
 * Implements hook_form_alter()
 * 
 * @param <type> $form
 * @param <type> $form_state
 * @param <type> $form_id
 *
 * @author Kayode odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'uc_cart_checkout_form':
      if(variable_get('uc_edupay_payment_method', 'edupay')) {
          $form['panes']['payment']['payment_method']['#default_value'] = 'edupay';
      }
      break;

    case 'uc_cart_checkout_review_form':
      //dsm('form is uc_cart_checkout_review_form');
      $order_id = intval($_SESSION['cart_order']);
      if($order_id > 0) {
        $order = uc_order_load($order_id);

        if ($order->payment_method == 'edupay') {
          //unset($form['submit']);
          $form['#prefix'] = '<table id="edupay-review-table"><tr><td>';
          // We can unset the submit order here so we can send data to edupay
          //$form['#suffix'] = '<td>' . drupal_get_form('uc_edupay_invoice_form', $order) . '</td></td><td>'. drupal_get_form('uc_edupay_form', $order) .'</td></tr></table>';
          $form['#suffix'] = '<td>' . drupal_get_form('uc_edupay_invoice_form', $order) . '</td></td></tr></table>';
        }
      }
      break;
    case 'uc_cart_view_form':
      break;
  }
}

/**
 * Implements hook_tapir_table_alter
 */ 
function uc_edupay_tapir_table_alter(&$table, $table_id) {
  if($table_id == 'uc_cart_view_table') {
    // hook_cart_fees_type
    foreach(module_implements('cart_fees_type') as $module) {
      $types = module_invoke($module, 'cart_fees_type');
    }
    foreach($types as $type){
      if($type == 'fees') {
        $table['#columns']['remove']['access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_cart_fees_type
 */ 
function uc_edupay_cart_fees_type() {
  $cart_items = uc_cart_get_contents();
  foreach($cart_items as $key => $value) {
    $types[$key] = $value->data['type'];
  }
  return $types;
}

/**
 * implements hook_cart_item
 * 
 * 
 * @param
 *  - $item is a call to uc_get_cart_contents()
 */ 
function uc_edupay_cart_item($op, &$item){
  switch($op) {
    case 'load':
    //dsm($item);
      $fees_type = EDUERP_FEES_NORMAL;
      if($item->data['type'] == $fees_type){
        // load registration
        $late = uc_eduerp_fees_load_fee_options($fees_type);
        $late_value = $late['late_registration'];
        
        # if late registration date value is set and its amount is not empty
        if(!is_null($late_value['last_registration_date']) and uc_eduerp_fees_registration_is_late()){
          # We need the date in UNIX timestamp and as integer
          $late_value['last_registration_date'] = intval(strtotime($late_value['last_registration_date']));
          
          # if a fees item recognized as Tuition (of Full Amount or Instalment1) 
          # is among the items in cart
          $extras = uc_eduerp_fees_load_extras($item->cart_id, 'fees');
          $fees_format = array(FEES_FULL, FEES_FIRST_INSTALMENT);
          //if($item->title == 'Tuition' and ($extras[$item->data['nid']]['fees_payment_format'] == FEES_FULL or FEES_FIRST_INSTALMENT)) {
          if($item->title == 'Tuition' and in_array($extras[$item->data['nid']]['fees_payment_format'], $fees_format)) {
            $late_charges = $late_value['amount'];
            $price = $item->price;
            
            # add to the pprice
            $price += $late_charges;
            
            // modify title to read [title] + (Late registration included)
            $text = t('Late Registration Included');
            $item->title = $item->title . ' ' . $text;
            //$item->title  = theme('eduerp_fees_cart_title', $item->title, $text);
          }
        }
        
        # Alter scholarship
        if($item->data['has_scholarship'] == HAS_SCHOLARSHIP) {
          // round such fee item amount to zero
          /*$price_info = array(
            'price' => 0
          );
          
          // Initialize the context.
          $context = array(
            'revision' => 'themed-original',
            'type' => 'amount',
          );*/
          
          $options['price_options'] = $item;
          
          //$item->price = uc_price($price_info, $context);
          //uc_price($price_info, $context, $options);
          
          // reflect change in cart
          $text = t('Scholarship Applicable');
          $item->title = $item->title . ' ' . $text;
          //$item->title = theme('eduerp_fees_cart_title', $item->title, $text, $context = 'scholarship');
        }
      }
      break;
  }
}

function uc_edupay_uc_price_handler() {
  return array(
    'alter' => array(
      'title' => t('Modify Scholarship price'),
      'description' => t('Round the price to zero if Fees include Scholarship'),
      'callback' => 'uc_edupay_fees_price_alter'
    ),
    'format' => array(
      'title' => t('Modify Scholarship price'),
      'description' => t('Alter the price in view based on Fees item options'),
      'callback' => 'uc_edupay_fees_price_handler_format',
    ),
  );
}

/**
 * Callback to modify the price of an item in cart
 * 
 */ 
function uc_edupay_fees_price_alter(&$price_info, &$context, &$options) {
  $items = uc_cart_get_contents();
  foreach ($items as $item) {
    $options['price_options'] = $item;
    if($item->data['has_scholarship'] == HAS_SCHOLARSHIP) {
      $price_info = array(
        'price' => 0
      );
      
      // Initialize the context.
      $context = array(
        'revision' => 'themed',
        'type' => 'amount',
      );
    }
  }
}

function uc_edupay_fees_price_handler_format($price, $options) {
}
/**
 * A hook to mark a fee item as an instalment
 * 
 * A fee item is recognized as full or instalment if it contains the word
 * "Full Amount", "Instalment1" or "Instalment2" in its description
 */ 
function uc_eduerp_fees_instalment() {
  
}

/**
 * Implements hook_theme()
 */ 
function uc_edupay_theme(){
  return array(
    'eduerp_fees_cart_title' => array(
      'arguments' => array('title' => NULL, 'text' => NULL),
    ),
    'eduerp_cart_review_table' => array(
      'arguments' => array('contents' => NULL)
    ),
  );
}

/**
 * Themes the cart item title
 * 
 * @todo To be rethemed during theming
 */ 
function theme_eduerp_fees_cart_title($title, $text, $context = NULL) {
  if($context == 'scholarship') {
    // do scholarship specific theming
    $output = $title . ' ' . "<span class='cart-scholarship-text' style='color:#CE1B0F'><strong>$text</strong></span>";
  }
  else {
    $output = $title . ' ' . "<span style='color:#CE1B0F'><strong>$text</strong></span>";
  }
  return $output;
}

/**
 * Detailed override of uc_price for modifying cart
 * price of an item
 * 
 * @todo Load the price of each item in cart
 */ 
function uc_edupay_load_price(){
}

/**
 * Implements hook_cart_pane
 * 
 * Override the cart pane. Add/remove/edit the cart pane
 */ 
function uc_edupay_cart_pane($items) {
  
}

/**
 * Implements hook_product_description
 * 
 * @param $product
 *  This is same as the form object that is available
 *  in uc_cart_view_form
 */ 
function uc_edupay_product_description($product) {
  //dsm($product);
}
/**
 * Implements hook_payment_method
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_payment_method() {
  $methods[] = array(
    'id' => 'edupay',
    'name' => t('edupay'),
    'title' => t('Edupay'),
    //'review' => variable_get('uc_2checkout_check', FALSE) ? t('Credit card/eCheck') : t('Credit card'),
    'desc' => t('Payment via edupay web service'),
    'callback' => 'uc_payment_method_edupay',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Adds edupay to ubercart payment settings form
 * @param <type> $op
 * @param <type> $arg1
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_payment_method_edupay($op, &$arg1) {

  switch($op) {
    // create some settings here that might be useful in cart-details op
    case 'settings':
      // This is payment method specific settings at admin/store/settings/payment/edit/methods
      $form['uc_edupay_payment_method'] = array(
        '#type' => 'checkbox',
        '#title' => t('Make edupay selected by default when checking out your order'),
        '#default_value' => variable_get('uc_edupay_payment_method', 'edupay'),
      );
      $form['uc_edupay_auth_method_oauth'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use high security authentication mechanism to process fees'),
        '#description' => t('Defaults to yes. Uncheck to use basic authentication'),
        '#default_value' => variable_get('uc_edupay_auth_method_oauth', 1),
      );
      // @todo Change to using configuration setting at admin/settings/eduerp/transaction
      $form['edupay_user'] = array(
        '#type' => 'textfield',
        '#title' => t('Edupay Username'),
        '#description' => t('Enter the username for edupay authentication'),
        '#default_value' => variable_get('edupay_user', 'username')
      );
      $form['edupay_pass'] = array(
        '#type' => 'password',
        '#title' => t('Edupay Password'),
        '#description' => t('Enter the password for that accompanies the username you entered above.'),
        '#default_value' => variable_get('edupay_pass', 'password')
      );
      return $form;
    case 'cart-details':
      //return drupal_get_form('uc_payment_method_edupay_form', $arg1);
      //dsm($arg1);
    case 'cart-process': //This happens when Review Order is clicked
      // do edupay processing
      // validate data
      // Store the transaction id in edupay as well as do any form of validation.
      //dsm('processing cart');
      return;
    case 'cart-review': // display json output response here
    case 'order-view': // display receipt to student here

  }
}

/**
 * Called after uc_edupay_service_add returns a successfull transaction
 * @param <type> $form_state
 * @param <type> $order
 * @return <type>
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_payment_method_edupay_form($form_state, $order) {
  $form['receipt_no'] = array(
    '#type' => 'textfield',
    '#title' => t('Receipt Number'),
    '#size' => 20,
  );
  $form['confirmation_no'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirmation Number'),
    '#size' => 32,
  );
  return $form;
}

/**
 * Generates invoice
 * @param <type> $form_state
 * @param <type> $order
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_invoice_form($form_state, $order) {

  $form['pdflink'] = array(
    '#type' => 'hidden',
    '#value' => 'invoice/pdf/' . $order->order_id,
  );

  // store returned js value in this hidden field
  $form['do_pdfinvoice'] = array(
    '#type' => 'hidden',
  );

  $form['hidden_order'] = array(
      '#type' => 'hidden',
      '#value' => $order,
  );
  // Generate invoice
  // Allow invoice to be emailed to user
  $form['invoice'] = array();

  drupal_add_js(drupal_get_path('module', 'uc_edupay') .'/uc_edupay.js');

  // in the form function store the link of the file in $form_state['storage']
  // alternatively use hidden fields
  //if(!isset($form_state['storage'])) {

      $invoice_form_settings = array(
        //'pdflink' => $form_state['values']['pdflink'],
        'pdflink' => $form['pdflink']['#value'],
      );

      //add the variable that contains the link to drupal_add_js
      //stores $invoice_form_settings into js setting
      drupal_add_js(array('uc_edupay' => $invoice_form_settings), 'setting');

      // to call the javascript code that will begin the download, do either of these;

      // test if js is called
      //drupal_add_js('Drupal.behaviors.uc_edupay = function() { alert("clicked"); }', 'inline');

  //}

  $form['invoice']['gen_invoice'] = array(
    //'#value' => '<div>' . l(t('Save Invoice'), "#", array('attributes' => array('class' => 'invoice-submit'))) . '</div>'
    '#value' => '<div>' . '<a href="javascript:void" class="invoice-submit">Save Invoice</a></div>'
  );

  /*$form['invoice']['gen_invoice'] = array(
    '#type' => 'submit',
    '#value' => t('Save Invoice'),
    '#ajax' => array(
        'enabled' => TRUE
    ),
    '#attributes' => array('class' => 'invoice-submit'),
    //'#weight' => 5,
    '#submit' => array('uc_edupay_invoice_submit'),
  );*/
  
  return $form;
}
/**
 * Process invoice based on form_state order values.
 * This will be relevant if invoice processing is handled by FAPI
 * @param <type> $form
 * @param <type> $form_state
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_invoice_submit($form, &$form_state) {
  switch ($form_state['values']['op']) {
    case t('Save Invoice'):
      if (isset($form_state['values']['gen_invoice'])) {
        //return the value of what 'pdflink' is set to
        $form_state['storage']['pdflink'] = $form_state['values']['pdflink'];
        //$_REQUEST['destination'] = 'cart/checkout/review';
        return TRUE;
        //drupal_goto($form_state['storage']['pdflink']);
        //drupal_goto("invoice/pdf/" . $form_state['values']['hidden_order']->order_id);
      }
      break;
  }
}

/**
 * Retrieves order items and passes it to uc_edupay_service_add
 * 
 * @param <type> $form_state
 * @param <type> $order
 * @return $form array
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_form($form_state, $order) {

  if(!isset($edupay_data)) {
    $edupay_data = $order->data->edupay_data;
  }
  
  $unserialized = unserialize($edupay_data);
  
  if(!isset($order))

  $data = array(
    'transaction_id' => $edupay_data['transaction_id'],
    'total' => uc_price($order->order_total, $context, $options),
    'cart_order_id' => $order->order_id,
    //'x_receipt_link_url' => url('cart/2checkout/complete/'. uc_cart_get_id(), array('absolute' => TRUE)),
    //'merchant_order_id' => $order->order_id,
    'pay_method' => isset($order->payment_method) ? $order->payment_method : 'edupay',
  );

  //$form['#action'] = '_uc_edupay_service_add';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Order')
  );

  //$form['#submit'][] = '_uc_edupay_service_add';
  return $form;
}

/**
 * @see uc_edupay_form
 * Makes 'add' service request to edupay.
 * Called when user submits order
 * 
 * @deprecated @see _uc_edupay_process_order_request
 * 
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function _uc_edupay_service_add() {
  return 'http://edupay.co.cc/api/transaction/add';
}


/**
 * Ajaxify the button to generate the invoice
 * Implementation of hook_ajax_types
 * @see @link http://drupal.org/project/ajax
 * @param $types Assoc
 * @return Bool
 * 
 * @deprecated
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_ajax_types(&$types) {
  $id = 'uc_edupay_invoice_form';
  $types[$id] = t('Edupay: Generate Invoice');
  return TRUE;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function uc_edupay_ctools_plugin_api($module, $api) {
  if ($module == 'strongarm' && $api == 'strongarm') {
    return array('version' => 1);
  }
}

/**
 * Hook to define edupay data structure
 * 
 * @param $fees
 *   - The fees
 */ 
function uc_edupay_edupay_hook($order) {
  foreach (module_implements('edupay') as $module) {
    $function = $module . '_edupay';
    $result = $function($order);
    if (isset($result) && is_array($result)) {
      $return = array_merge($return, $result);
    }
    else if (isset($result)) {
      $return[] = $result;
    }
  }
  return $return;
}

/**
 * Processes the order. Called whenever we have a new transaction.
 * 
 * Wrapper for drupal_http_request
 * 
 */ 
function _uc_edupay_process_order_request_basic(&$order) {  
  if($data = module_invoke('uc_edupay', 'edupay', $order)) {
    //$data_arr[] = get_object_vars($data->fees);
    /*$data['fees'][] = array(
      'fees' => array(
        'status' => $arg1->order_status,
        'timeout' => 0,
      ),
      'hostel' => array(
        'status' => $arg1->order_status,
        'timeout' => 0,
      )
    );*/
    //dsm($data);
    //dsm($order);
    /*$data = array(
      'code' => $university_code,
      'digest' => 'digest', // get this from institution table
      'status' => 'pending',
      'fees' => $arg1,
      'amount' => 0.0,
      'identifier' => ''
    );*/
    $items = $data['fees'];
    $uri = UC_EDUPAY_BASIC_URL;

    // @todo: Make oauth authentication to edupay
    // temporarily we are storing the username and password for edupay authentication
    // in eduerp. This is not right and will be replaced with oauth
    $uri['user'] = variable_get('edupay_user', '');
    $uri['pass'] = variable_get('edupay_pass', '');
    
    $header = array('Content-Type' => 'application/x-www-form-urlencoded');
    $method = 'POST';
    
    $result = drupal_http_request($uri, $header, $method, http_build_query($data, '', '&'));

    $response = $result->data;
    $code = $result->code;
    
    switch($code){
      case 200:
        // @todo Test authentication, test digest and test fees data structure
        $_SESSION['edupay_transaction_accepted'] = t('accepted');
        // get tpin from result
        $tpin = $response->tpin;
        //$_SESSION['transaction_id'] = _uc_edupay_trans_id($arg1);
        $success = FALSE;
        if((!isset($arg1->transaction_id) && !empty($tpin))) {
          $arg1->transaction_id = _uc_edupay_trans_id($arg1);
          // Store the transaction_id and tpin in db
          db_query("
              INSERT INTO {eduerp_transaction} (uid, transaction_id, order_id, tpin)
              VALUES(%d, '%s', %d, '%s')",
                  $arg1->uid, $arg1->transaction_id, $arg1->order_id, $tpin
                  );
          $success = TRUE;
          if($success) {
              drupal_set_message("Order transaction Created Successfully");
          } else {
              drupal_error_handler('IN81', 'Your new Order failed', 'uc_edupay', '81');
          }
        }
        break;
      // status codes to provide try again functionality for 500, 503, 504, 417,
      // AJAX functionality for try again request
      case 408: // Request Timeout
      case 417: // Expectation Failed
      case 500: // Internal Server Error
      case 503: // Service Unavailable
      case 504: // Gateway Timeout
        drupal_set_message('Something went wrong somewhere. Please try again');
        watchdog('uc_edupay', t('Transaction failed on @uid. Status code: @code, Status error message: @error', array('@uid' => $arg1->uid, '@code' => $result->code, '@error' => $result->status_message)));
        break;
      // All fictitious actions
      case 502: // Bad Gateway
      case 505: // HTTP Version Not Supported
        // based on the response returned from edupay, provide the appropriate error message
        // Display a Try Again link so the user can try again.
        //drupal_json();
        //dsm($result);
        drupal_set_message(t('Oooops! Something went wrong! We are unable to process your transaction. Please contact bursary.'), 'error');
        watchdog('uc_edupay', t('Transaction failed on @uid. Status code: @code, Status error message: @error', array('@uid' => $arg1->uid, '@code' => $result->code, '@error' => $result->status_message)));
        // Break everything
        // Disable the submit order button and also make /checkout/complete return 400 (Bad request). Happens if the user knows this URL and wants to fake it
        if (uc_cart_get_contents() == NULL) {
          uc_cart_empty($arg1->order_id);
        }
        break;
      // All others as default
      default:
        // watchdog the status code and status message
        watchdog('uc_edupay', t('Transaction failed on @uid. Status code: @code, Status error message: @error', array('@uid' => $arg1->uid, '@code' => $result->code, '@error' => $result->status_message)));
        break;
    }
  }
}

/**
 * Process fees via oauth authentication and
 * authorization mechanism
 * 
 * @param $order
 *  The order in the cart order is already 
 *  passed by reference from hook_order
 *    
 */ 
function _uc_edupay_process_order_request($order) {
  if($data = module_invoke('uc_edupay', 'edupay', $order)) {
    $order->products = _uc_edupay_fees_order_items($order);
    $products = $order->products;;
    $_SESSION['eduerp_fees_order'] = $products['fees'];
    dsm($products);
    $response_data = new stdClass();
    foreach($products['fees'] as $key => $product) {
      // If scholarship is inclusive and hostel is not inclusive, don't send
      // transaction to edupay. Mark item as paid for
      //if($product['scholarship'] == HAS_SCHOLARSHIP && !array_key_exists('hostel', $products)) {
      if($product['scholarship'] == HAS_SCHOLARSHIP && $product['type'] != EDUERP_FEES_HOSTEL) {
        $response_data = NULL;
        return $response_data;
      }
      // If scholarship is inclusive and hostel is inclusive, send only hostel
      // values as items meant to be paid for to edupay
      if($product['scholarship'] == HAS_SCHOLARSHIP && array_key_exists('hostel', $products)){
        $products = $products['hostel'];
        continue;
      }
    }
    
    if(module_exists('oauth_common')) {
      $consumer = new stdClass();
      $consumer->key = variable_get('oauth_consumer_key', '');
      $consumer->secret = variable_get('oauth_consumer_secret', '');
      $token_request = variable_get('oauth_token', '');
      
      // catch all necessary exceptions if edupay is down
      try {
        $oauthclient = new EdupayOauthClient($consumer, $token_request);

        $path = variable_get('uc_edupay_config_host', TRUE) ? variable_get('uc_edupay_transaction_url', ''): UC_EDUPAY_URL;
        $options = array(
          'token' => TRUE, 
          'params' => $products,
          'realm' => NULL,
          'get' => FALSE
        );
        
        $result = $oauthclient->get($path, $options);
        
        // @todo: Take all through AJAX
        //  - Parse oauth authentication response status code
        //  - Parse fees data structure response status code
        //  - Parse the response status code of the queued task
        // Only when there's a success should a redirect to cart/checkout/review be made
        // If any of the above fails, redirect to same page (cart/checkout)
        $code = $result->code;
        if($result->headers['Content-Type'] == 'application/json') {
          $response = json_decode($result->data);
          $response_data = $response->data;
          if($response->status == 201){
            $result->code = 201;
          }
        }
        //dsm($result);
        switch($code) {
          case 201:
            continue;
          case 200:
            return $response_data;
        }
        
      } catch(Exception $e) {
        drupal_set_message($e->getMessage(), 'error');
        watchdog('uc_edupay', t('@uid cannot continue with order process due to @error', array('@uid' => $order->uid, '@error' => $e->getMessage())), WATCHDOG_SEVERE);
        global $socket_closed;
        $socket_closed = TRUE;
        // set the order state to canceled
        unset($_SESSION['cart_order']);
        uc_order_update_status($order->order_id, 'canceled');
        $_SESSION['do_review'] = FALSE;
        $_SESSION['checkout_valid'] = FALSE;
        $_SESSION['checkout-redirect'] = TRUE;
        drupal_goto('cart/checkout');
      }
    }
  }
}

function uc_edupay_socket_closed() {
  global $socket_closed;
  
  return isset($socket_closed); // return TRUE if it's set
}

class EdupayOauthClient2 extends DrupalOauthClient {
  public function __construct($consumer, $request_token = NULL, $signature_method = NULL, $version = NULL) {
    parent::__construct($consumer, $request_token = NULL, $signature_method = NULL, $version = NULL);
  }
  public function get($path, $options = array()) {
    return parent::get($path, $options = array());
  }
}

class EdupayOauthClient extends DrupalOauthClient {
  
  protected $consumer;
  protected $signatureMethod;
  protected $requestToken;
  
  public function __construct($consumer, $requestToken, $signature_method = NULL, $version = NULL) {
    $this->consumer = $consumer;
    $this->signatureMethod = $signature_method;
    $this->requestToken = $requestToken;
    parent::__construct($consumer, $requestToken, $signature_method = NULL, $version = NULL);
  }
  public function get($path, $options = array()) {
    $options += array(
        'token' => FALSE, // don't send a token along with the request
        'params' => array(),
        'realm' => NULL,
        'get' => FALSE,
      );

    if (empty($options['realm']) && !empty($this->consumer->configuration['authentication_realm'])) {
      $options['realm'] = $this->consumer->configuration['authentication_realm'];
    }

    $token_object = new stdClass();
    $token_object->key = variable_get('oauth_token', '');
    
    $token = $options['token'] ? $token_object : NULL; // If token is TRUE, variable_get it else return NULL
    $path = parent::getAbsolutePath($path);

    $req = OAuthRequest::from_consumer_and_token($this->consumer, $token,
      $options['get'] ? 'GET' : 'POST', $path, $options['params']);
    $req->sign_request($this->signatureMethod, $this->consumer, $token);

    $url = $req->get_normalized_http_url();
    $params = array();
    foreach ($req->get_parameters() as $param_key => $param_value) {
      if (substr($param_key, 0, 5) != 'oauth') {
        $params[$param_key] = $param_value;
      }
    }
    /*if (!empty($params)) {
      $url .= '?' . http_build_query($params);
    }*/

    $headers = array(
      //'Accept: application/x-www-form-urlencoded',
      'Accept: application/json',
      $req->to_header($options['realm']),
    );
    $method = 'POST';
    // convert the data to json
    $data = json_encode($params);
    // log what is been sent
    watchdog('uc_edupay', t('New Order! A user with @uid has just made a new order. Order data is @data', array('@uid' => $order->uid, '@data' => $data)));
    //$result = drupal_http_request($url, $headers, $method, http_build_query($data, '', '&'));
    //$result = drupal_http_request($url, $headers, $method, http_build_query($params, 'fees'));
    //$result = drupal_http_request($url, $headers, $method, http_build_query($params, 'fees', ';'));
    //$result = drupal_http_request($url, $headers, $method, http_build_query($data, 'fees'));
    $result = drupal_http_request($url, $headers, $method, "fees=$data");
    
    if ($result->code != 200) {
      throw new Exception('Failed to fetch data from url "' . $path . '" (HTTP response code ' . $result->code . ' ' . $result->status_message . ')');
    }
    
    return $result;
  }
}

/**
 * Implementation of hook_order().
 * This is called before uc_checkout_pane_eduerp_fees
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_order($op, &$arg1, $arg2) {
  global $user;
    switch ($op) {
      // Called when an order is created
      case 'new':
        drupal_set_message("OP IS NEW");
        // process payment here instead of case submit
        // make POST request to edupay, sending uid, amount, university code, digest,
        // ubercart status, product attribute, last_registration_date_value
        // hostel_registration_expiry_date_value
        // get the return tpin from edupay
        // insert into eduerp_transaction the order_id and tpin
        
        if(variable_get('uc_edupay_auth_method_oauth', 1)) {
          $data = _uc_edupay_process_order_request($arg1);
          // Handle a scholarship item which is not sent to edupay.
          // Generate a special transaction for this case
          if(is_null($data) && !isset($arg1->transaction_id)) {
            $arg1->transaction_id = _uc_edupay_trans_id($arg1);
              // Store the transaction_id in db
              db_query("
                  INSERT INTO {eduerp_transaction} (uid, transaction_id, order_id)
                  VALUES(%d, '%s', %d)",
                      $arg1->uid, $arg1->transaction_id, $arg1->order_id
                      );
              $success = TRUE;
              if($success) {
                  drupal_set_message("Order transaction Created Successfully");
              } else {
                  drupal_error_handler('IN81', 'Your new Order failed', 'uc_hostel_allocation', '81');
              }
          }
          $arg1->tpin = $data;
        } else {
          // Make request to external payment gateway using basic auth
          _uc_edupay_process_order_request_basic($arg1);
        }
        //dsm($arg1); 
        break;   
        // Occurs when Submit Order is clicked
        case 'submit':
          //dsm("OP IS SUBMIT");
          //dsm("in op submit, arg1->transaction_id is " . $arg1->transaction_id);

          // on submit, it is possible to also update $arg1->transaction_id into uc_orders data field
          if ($arg1->payment_method == 'edupay') {
            // process payment
            // Before uc_payment_process function can be called, you need to write a gateway callback
            // to do the actual processing. In the regards, we will simply made a web service call
            // to edupay to store the generated transaction_id and jamb number
            // uc_payment_process('edupay', $arg1->order_id, $arg1->order_total, NULL, TRUE, NULL, FALSE);
            
            // if the order is successful, empty the cart and invalidate SESSION variables
            if(isset($_SESSION['edupay_transaction_accepted'])){
              // @todo set the order_status to completed
              
              // Break everything
              uc_cart_empty(uc_cart_get_id());
              // Clear our the session variables used to force the cart workflow.
              unset($_SESSION['cart_order'], $_SESSION['do_complete'], $_SESSION['new_user']);
            }else {
              // Keep the user's item in the cart until the problem for the failure
              // has been resolved.
              // Also set the SESSION object for redirect so that the user can continue
              // from where he/she left off.
            }
          }
          break;

        // Occurs when Review Order is clicked. Data is inserted into uc_orders
        case 'save':
          //dsm("OP IS SAVE");
          //store hostel data object in uc_order. Also store the generated transaction id and JAMB
          // Number as part of the data during save op.
          // retrieve the stored transaction_id and pass it to $arg1->data

          
          if ($arg1->payment_method == 'edupay') {
            if(isset($arg1->tpin) && !is_null($arg1->tpin)) {
              $edupay_data = array('tpin' => $arg1->tpin, 'order_id' => $arg1->order_id);
              $order_data = $_SESSION['eduerp_fees_order'];
              foreach($order_data as $key => $value) {
                $order_data[$key]['edupay_data'] = serialize($edupay_data);
              }
              //dsm($data);
              //dsm(unserialize($data->edupay_data));
              db_query("UPDATE {uc_orders} SET data = '%s' WHERE order_id = %d", serialize($order_data), $arg1->order_id);
            }
            else {
              if(!isset($arg1->transaction_id)) {
                $arg1->transaction_id = _uc_edupay_load_transaction($arg1);
              }
              $scholarship_items_data = array(
                'description' => t('This is a fee item on scholarship'),
                'transaction_id' => $arg1->transaction_id, 
                'order_id' => $arg1->order_id
                );
              $order_data = $arg1->data;
              $order_data->scholarship_items_data = serialize($scholarship_items_data);
              db_query("UPDATE {uc_orders} SET data = '%s' WHERE order_id = %d", serialize($order_data), $arg1->order_id);
            }
            //dsm($arg1);
            $fees = $arg1->products;
              $field = array();
              $fields = array();
              // @todo Break this all into API functions
              foreach ($fees as $key => $product) {
                $fields = $product->data;
                $field['type'] = $fields['type'];
                $field['nid'] = $fields['nid'];
                $field['nationality'] = $fields['nationality'];
                $field['programme'] = $fields['programme'];
                $field['level_name'] = $fields['level_name'];
                $field['scholarship'] = $fields['scholarship'];
                $field['allow_instalment'] = $fields['allow_instalment'];
                $field['session'] = $fields['session'];
                if(array_key_exists('late_registration', $fields) && !is_null($fields['late_registration'])) {
                  list(
                    $field['late_registration_date'],
                    $field['late_registration_amount'],
                    $field['late_registration_nid'],
                    $field['late_registration_description'],                    
                    ) = array_values($fields['late_registration']);
                }
                if(array_key_exists('hostel', $fields) && !is_null($fields['hostel'])) {
                  list(
                    $field['hostel_nid'],
                    $field['hostel_type'],
                    $field['expiry_date'],               
                    ) = array_values($fields['hostel']);
                }
                if(array_key_exists('attributes', $fields) && !is_null($fields['attributes'])) {
                  $field['attributes'] = $fields['attributes']['Fee Structure'][0];
                }
                $field['jambno'] = $fields['jambno'];
                $field['fullnames'] = $fields['fullnames'];
                $field['institution'] = $fields['institution'];
                $field['module'] = $fields['module'];
                $field['cart_item_id'] = $product->cart_item_id;
                $field['title'] = $product->title;
                $field['price'] = $product->price;
                $field['status'] = $arg1->order_status;
                $field['email'] = $arg1->primary_email;
                $field['order_id'] = $product->order_id;
                $field['uid'] = $arg1->uid;
                $field['product_nid'] = $product->nid;
                //$fields = $product + $items;
                unset($fields['has_scholarship']);
                uc_edupay_save($arg1->order_id, $field);
              }
          }
          break;
        // The real order object that will be put into $_SESSION['cart_order'].
        case 'load':
          //dsm("OP IS LOAD");
          if(isset($_SESSION['transaction_id'])) {
            unset($_SESSION['transaction_id']);
          }
          break;
    }
}

/**
 * Save a product to an order.
 * 
 * This is a replica of uc_order_product_save
 */
function uc_edupay_save($order_id, $product) {
  // if fees_order does not exist
  $ret = array();
  if(!db_table_exists('fees_order')) {
    $table = drupal_get_schema('fees_order');
    db_create_table($ret, 'fees_order', $table);
  }
  //$key = empty($product['order_id']) ? NULL : 'fees_order_id';
   if(db_result(db_query("SELECT product_nid from {fees_order} WHERE product_nid = %d", $product['product_nid']))) {
    drupal_write_record('fees_order', $product, 'fees_order_id');
  }else {
    // do an insert
    drupal_write_record('fees_order', $product);
  }
}

/**
 * Load Transaction
 * A Transaction occurs when an order operation is new
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */

function _uc_edupay_load_transaction($order) {
  if(!isset($order_id)) {
      return FALSE;
  }
  $order_id = $order->order_id;

  $sql = 'SELECT transaction_id
      FROM {eduerp_transaction}
      WHERE order_id = %d';
  
  $result = db_result(db_query($sql, $order_id));
  $loaded_transaction = $result;
  return $load_transaction;
}

/**
 * Generates transaction id
 * A transaction is made up of the order_id, uid and the transaction id
 * @param <type> $order
 * @return string
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function _uc_edupay_trans_id($order) {

  static $trans_id = '';

  $rand = mt_rand(0, mt_getrandmax());
  $order_id = $order->order_id;
  $user_id = $order->uid;
  $date = date('Ymd');

  $trans_schema = array(
      'char' => '#',
      'random' => $rand,
      'trans_date' => $date,
      'order_id' => $order_id,
      'uid' => $user_id
  );
  $trans_id .= implode('', $trans_schema);
  return $trans_id;
}

/** 
 * Implements hook_checkout_pane
 * 
 */  
function uc_edupay_checkout_pane() {
  //$fees = uc_eduerp_fees_get_fees_order();
  $items = uc_cart_get_contents();
  //dsm($items);
  foreach($items as $fee) {
    $panes[$fee->title] = array(
      'id' => $fee->cart_item_id, //pass in here the fee attribute
      'callback' => 'uc_checkout_pane_eduerp_fees',
      'title' => $fee->title,
      'desc' => t('Below shows the fee items in your cart @title payment.', array('@title' => $fee->title)),
      'weight' => 8,
      'process' => TRUE,
      'collapsible' => TRUE,
    );
  }
  return $panes;
}

/**
 * A single callback to display all fees in the cart
 * in a generic checkout pane.
 * 
 * @param
 *   - $op: Operations
 *  - $arg1: contains order information
 *  - $arg2
 * 
 */ 
function uc_checkout_pane_eduerp_fees($op, &$arg1, $arg2){
  global $user;
  //dsm($arg1);
  //$items = uc_cart_get_contents();
  $zz = uc_cart_get_contents();
  foreach($zz as $z){
    $items[] = get_object_vars($z);
  }
  //dsm($items);
  switch ($op) {
    case 'view':
      // if item in the cart is of type fees
      // for each on the items and display them in fees pane
      $description = array();
      //$contents = array();
      $x = array();
      foreach($items as $key => $fee){
        $item[$key] = $fee;
      }
      foreach($item as $key => $value) {
        $types[] = $value['data']['type'];
        $titles[$key] = $value['title'];
        $nid[$key] = $value['nid'];
        $cart_item_id[$key] = $value['cart_item_id'];
        $programme[$key] = $value['data']['programme'];
        $level[$key] = $value['data']['level_name'];
        $amount[$key] = $value['price'];
        $session[$key] = $value['data']['session'];
        
        // @todo put $all array only for type fees
        // Get only the stuffs we need by nid
        $all[] = array(
          $nid[$key] = array(
            'nid' => $value['nid'],
            'type' => $value['data']['type'], 
            'title' => $value['title'], 
            'amount' => $value['price'],
            'programme' => $value['data']['programme'],
            'level' => $value['data']['level_name'],
            'session' => $value['data']['session'],
            'nationality' => $value['data']['nationality'],
            'cart_item_id' => $value['cart_item_id'],
          )
        );
      }
      foreach($all as $value) {
        foreach($value as $key => $order_item) {
          $description[$key] = $order_item['title'];
          $contents[$key] = array(
            '#type' => 'fieldset',
            //'#title' => $description[$key],
            //'#description' => $description[$key],
            //'#value' => $contents
          );
          $contents[$key]['data'] = array(
            //'#type' => 'markup',
            '#value' => theme('eduerp_cart_review_table', $order_item)
          );
          $x[] = array(
            'description' => t('Content title is %title', array('%title' => $description[$key])), 
            'contents' => $contents[$key]
          );
        }
      }
      foreach($x as $fees_pane) {
        return $fees_pane;
      }
    case 'review':
    case 'process':
  }
}

/**
 * Passing $contents by reference here won't work
 * because of a PHP bug. Occurs only in php 5.3.1+
 * 
 * @see 
 *  - http://stackoverflow.com/questions/2045875/pass-by-reference-problem-with-php-5-3-1
 *  - http://bugs.php.net/bug.php?id=50394
 * 
 */ 
function theme_eduerp_cart_review_table($contents) {
  //dsm($contents);
  $contents = uc_cart_get_contents();
  foreach($contents as $content) {
   //if($content->data['type'] == 'fees'){
     $rows[] = array(
        array('data' => $content->nid, 'class' => 'price'),
        array('data' => $content->data['type'], 'class' => 'price'),
        array('data' => $content->title, 'class' => 'price'),
        array('data' => $content->price, 'class' => 'price'),
        array('data' => $content->data['programme'], 'class' => 'price'),
        array('data' => $content->data['level_name'], 'class' => 'price'),
        array('data' => $content->data['session'], 'class' => 'price'),
        array('data' => $content->data['nationality'], 'class' => 'price'),
        array('data' => $content->cart_item_id, 'class' => 'price'),
      );
   //}
  }
  $header = array(
    array('data' => t('Item No.'), 'class' => 'price'),
    array('data' => t('Type'), 'class' => 'price'),
    array('data' => t('Title'), 'class' => 'price'),
    array('data' => t('Amount'), 'class' => 'price'),
    array('data' => t('Programme'), 'class' => 'price'),
    array('data' => t('Level'), 'class' => 'price'),
    array('data' => t('Session'), 'class' => 'price'),
    array('data' => t('Nationality'), 'class' => 'price'),
    array('data' => t('Cart item id'), 'class' => 'price'),
    //array('data' => t('Late registration'), 'class' => 'price'),
    //array('data' => t('Instalments allowed'), 'class' => 'price'),
  );
    
  return theme('table', $header, $rows, array('class' => 'cart-review'));
}
/**
 * 
 * @todo Make a hook of this
 * 
 * @todo Pass institution, scholarship, student name and JAMB number to products
 */ 
function _uc_edupay_fees_order_items($order) {
  $zz = uc_cart_get_contents();
  foreach($zz as $z){
    $items[] = get_object_vars($z);
  }
  $data = array();
  $description = array();
  foreach($items as $key => $fee){
    $item[$key] = $fee;
    $data[$key] = $fee['data'];
    $description[$key] = $fee['title'];
  }
  //dsm($item);
  $types = array();
  foreach($item as $key => $value) {
    $types[] = $value['data']['type'];
    $nid[$key] = array(
        'nid' => $value['nid'],
        'type' => $value['data']['type'], 
        'cart_item_id' => $value['cart_item_id'],
        'title' => $value['title'], 
        'amount' => $value['price'],
        'programme' => $value['data']['programme'],
        'level' => $value['data']['level_name'],
        'session' => $value['data']['session'],
        'timeout' => $value['data']['late_registration_date'],
        'uid' => $order->uid,
        'jamb_no' => $value['data']['jambno'],
        'fullnames' => $value['data']['fullnames'],
        'institution' => $value['data']['institution'],
        'status' => $order->order_status,
        'email' => $order->primary_email,
        'order_id' => $order->order_id,
        'scholarship' => $value['data']['has_scholarship'],
    );
    $all[] = $nid[$key];
    if($value['data']['type'] == EDUERP_FEES_NORMAL) {
      $products[$value['data']['type']] = $all;
      /*$products[$value['data']['type']]['timeout'] = $value['data']['late_registration_date']; 
      $products[$value['data']['type']]['uid'] = $order->uid;
      $products[$value['data']['type']]['status'] = $order->order_status;
      $products[$value['data']['type']]['email'] = $order->primary_email;
      $products[$value['data']['type']]['order_id'] = $order->order_id;*/
    }
    if(in_array('hostel', $types) && $value['data']['type'] == EDUERP_FEES_HOSTEL) {
      $hostel['hostel'] = array(
        'nid' => $value['nid'],
        'type' => $value['data']['type'], // get from the array
        'cart_item_id' => $value['cart_item_id'],
        'title' => $value['title'], 
        'amount' => $value['price'], // or 'amount' => $value['data']['amount']
        'timeout' => $value['data']['expiry_date'],
        'uid' => $order->uid,
        'jamb_no' => $value['data']['jambno'],
        'fullnames' => $value['data']['fullnames'],
        'institution' => $value['data']['institution'],
        'status' => $order->order_status,
        'email' => $order->primary_email,
        'order_id' => $order->order_id,
      );
      // @todo: go through drupal_alter once we have a hook of this function
      array_push($hostel, $products);
    }
  }
  return $products;
}

/**
 * Implements hook_edupay
 * 
 */ 
function uc_edupay_edupay($order){
  module_load_include('inc', 'eduerp', 'eduerp.admin');
  
  $institution = eduerp_get_institution('name');
  
  if(!isset($order)) {
    $order = $_SESSION['cart_order'];
  }
  if(!empty($institution)) {
    $code = $institution->code;
    $key = $institution->secret;
    $amount = $order->order_total;
    $identifier = ' '; // space equivalent to NULL right?
    
    $valid_institution = array(
      'amount' => $amount,
      'code' => $code, 
      'identifier' => $identifier
    );
  
    //$digest = md5(":" + implode('', $valid_institution));
    $digest = _edupay_digest($code, $key, $valid_institution);
    
    $data = array(
      'code' => $code, // get from $institution
      'digest' => $digest, // the university code, a colon, and an autogenerated secret code
      'status' => uc_order_status_data($order->order_status, 'state'), // the order status at the time of processing. Get from order
      'amount' => $amount, //get from order. ubercart usually lumps all cart items together. We need to seperate them by product_attribute before sending to edupay
      'identifier' => $identifier, // set this if you need it
      'fees' => $order // the order object at the time of processing
    );
  }
  
  return $data;
}

/**
 * EduPay digest 
 */ 
function _edupay_digest($code, $key, $valid_institution) {
  //$valid_institution = array('amount' => '0.0', 'code' => $code, 'identifier' => ' ');
  if(!empty($valid_institution) && array_key_exists('code', $valid_institution)){
    $text = 
        $valid_institution['code'] . ":" . 
        $valid_institution['identifier'] . ":" . 
        $valid_institution['amount'] . ":" . 
        $key;
  }
  return strtoupper(hash("md5", $text)); 
}
