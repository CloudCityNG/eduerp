<?php

/**
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 *
 * @file
 * Ubercart integration of EduERP fees
 */

define('EDUERP_FEES_NORMAL', 'fees');
define('EDUERP_FEES_HOSTEL', 'hostel');
define('FEES_PAID', 'payment_received');
define('FEES_PENDING', 'pending');
define('HAS_SCHOLARSHIP', 1);
define('FEES_FULL', 'Full Amount');
define('FEES_FIRST_INSTALMENT', 'Instalment1');
define('FEES_SECOND_INSTALMENT', 'Instalment2');


function uc_eduerp_fees_menu() {
  $items['edupay/callback'] = array(
    'title' => 'Process EduPay Callback',
    'page callback' => 'uc_eduerp_fees_update_fees',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['edupay/displaycart'] = array(
    'title' => 'Student Fees Due to be Paid',
    'page callback' => 'display_cart_for_scholarship',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


function uc_eduerp_fees_menu_alter(&$items) {
  $items['user/%user/orders'] = MENU_CALLBACK;
  unset($items['user/%user/orders']);
}


/**
 * Handle Call Back from EduPay
 *
 */
function uc_eduerp_fees_update_fees() {
  $order_id = $_POST['order_id'];
  $status = $_POST['status'];
  $uid = $_POST['uid'];
  $transaction_token = $_POST['transaction_token'];

  if ($_SERVER['REQUEST_METHOD'] != 'POST' || empty($order_id) || empty($status) || empty($uid) || empty($transaction_token) || ($status != 'payment_received' && $status != 'canceled')) {
    drupal_set_header('HTTP/1.1 404 Not Found');
    $content = new stdClass();
    $content->status = 'fail';
    drupal_json($content);
    exit();
  }

  $transaction_token_found = FALSE;
  $sql = "SELECT op.data FROM {uc_orders} o, {uc_order_products} op
    WHERE
      o.order_id=%d AND
      o.order_status IN ('pending') AND
      o.order_id=op.order_id";
  $result = db_query($sql, $order_id);
  if ($order = db_fetch_array($result)) { // Only need to look at one uc_order_products, transaction_token is in them all
    $data = unserialize($order['data']);
    if ($data['transaction_token'] == $transaction_token) $transaction_token_found = TRUE;
  }

  if (!$transaction_token_found) {
    drupal_set_header('HTTP/1.1 404 Not Found');
    $content = new stdClass();
    $content->status = 'fail';
    drupal_json($content);
    exit();
  }

  $sql = "SELECT ctb.field_uc_product_id_nid, op.title
    FROM {content_type_blocks} ctb, {content_type_rooms} ctr, {content_type_room_reservations} ctrr, {uc_order_products} op
    WHERE
      ctb.nid=ctr.field_block_id_nid AND
      ctr.nid=ctrr.field_room_id_nid AND
      ctrr.field_student_id_uid=%d AND
      ctb.field_uc_product_id_nid=op.nid AND
      op.order_id=%d";
  $query_result = db_query($sql, $uid, $order_id);
  if (db_fetch_array($query_result)) {
    $hostel_in_order = TRUE; // Found a hostel reservation which has a product in this order
  }
  else {
    $hostel_in_order = FALSE;
  }

  if ($status == 'payment_received') {
    if ($hostel_in_order) hostel_allocation_allocate_bedspace($uid);

    db_query("UPDATE {uc_orders} set order_status = '$status' WHERE order_id = %d", $order_id);
    db_query("UPDATE {fees_order} SET status = '$status' WHERE order_id = %d", $order_id);
    watchdog('uc_eduerp_fees', t('Fees item in cart with order_id of @order_id has been successfully paid for by @uid', array('@order_id' => $order_id, '@uid' => $uid)));
  }

  if ($status == 'canceled') {
    if ($hostel_in_order) hostel_allocation_revoke_expired_reservation($uid);

    db_query("UPDATE {uc_orders} set order_status = '$status' WHERE order_id = %d", $order_id);
    db_query("UPDATE {fees_order} SET status = '$status' WHERE order_id = %d", $order_id);
    watchdog('uc_eduerp_fees', t('Fees item in cart with order_id of @order_id of user @uid has been canceled', array('@order_id' => $order_id, '@uid' => $uid)));
  }

  $content = new stdClass();
  $content->status = 'success';
  drupal_json($content);
  exit();
}


function display_cart_for_scholarship() {
  global $user;

  ob_start();

  $student_profile = new UserProfile($user->uid);

  $studentname = '';
  if (!empty($student_profile->profile_first_name) && !empty($student_profile->profile_last_name)) {
    $middle = '';
    if (!empty($student_profile->profile_middle_name)) $middle = ' ' . $student_profile->profile_middle_name;
    $studentname = "{$student_profile->profile_last_name}, {$student_profile->profile_first_name}{$middle}";
  }

  $sql = "SELECT field_programme_name_value FROM {content_type_program} WHERE nid=%d";
  $result = db_query($sql, $student_profile->profile_first_choice);
  $row = db_fetch_object($result);

  ?>
  <br />
  <h2><?php echo variable_get('eduerp_institution_current', '') ?></h2>
  <?php echo variable_get('eduerp_institution_address', '') ?><br />
  <br />
  <h3>Name: <?php echo $studentname ?><br />
  Admission Number: <?php echo $user->name ?></h3><br />
  Session: <?php echo variable_get('eduerp_current_session', '') ?><br />
  Programme: <?php echo $row->field_programme_name_value ?><br />
  <br />
  If you are due a scholarship, print and bring this page to the Scholarship Board.<br /><br />
  <?php if (FALSE) { ?>(<a href="/print/edupay/displaycart">Click here for a Printer-friendly version</a> which can be used to generate a better printout.)<br /><br /><?php } ?>

  <table border='1' align='center'  cellpadding="5" cellspacing="5">
    <tr bgcolor='#ACCFCC'><td><b>Fees for <?php echo "$studentname for " . variable_get('eduerp_current_session', ''); ?></b></td></tr>
    <tr>
      <td><?php echo show_cart_for_student(); ?></td>
    </tr>
  </table>
<?php
  return ob_get_clean();
}


function show_cart_for_student() {
  $subtotal = 0;

  // Set up table header.
  $header = array(
    array('data' => t('Products'), 'class' => 'products'),
    array('data' => t('Price'), 'class' => 'price'),
  );

  $context = array();

  // Set up table rows.
  $contents = uc_cart_get_contents();
dsm(array('contents' => $contents));//ab
  foreach ($contents as $item) {
    $price_info = array(
      'price' => $item->price,
    );

    $context['revision'] = 'altered';
    $context['type'] = 'cart_item';
    $context['subject'] = array(
      'cart' => $contents,
      'cart_item' => $item,
      'node' => node_load($item->nid),
    );

    $total = uc_price($price_info, $context);
    $subtotal += $total;

    $description = check_plain($item->title) . uc_product_get_description($item);

    // Remove node from context to prevent the price from being altered.
    $context['revision'] = 'themed-original';
    $context['type'] = 'amount';
    unset($context['subject']);
    $rows[] = array(
      array('data' => $description, 'class' => 'products'),
//      array('data' => uc_price($total, $context), 'class' => 'price'),
      array('data' => uc_price(999, $context), 'class' => 'price'),
    );
  }

  // Add the subtotal as the final row.
  $context = array(
    'revision' => 'themed-original',
    'type' => 'amount',
  );
  $rows[] = array(
    'data' => array(array('data' => '<span id="subtotal-title">' . t('Total:') . '</span> ' . uc_price($subtotal, $context), 'colspan' => 2, 'class' => 'subtotal')),
    'class' => 'subtotal',
  );

  return theme('table', $header, $rows, array('class' => 'cart-review'));
}


/**
 * Rebuild the fees items based on order state
 * of payment_received or pending
 *
 * @deprecated
 * Not used
 */
function _uc_eduerp_fees_rebuild_fees_processed($fees, $paid_nid, $preserve_keys = TRUE) {
  foreach($fees as $fee) {
    if($fee['type'] == 'fees') {
      foreach($fee['item'] as $key => $value){
        //$paid_fees_items[$fee['item']['product_nid']];
        if($paid_nid == $fee['item'][$key]['product_nid']) {
          unset($fee['item'][$key]);
          //if all fees items have been paid for
          if(is_null($fee['item'])){
            unset($fees['fees']);
          }
        }
      }
    }
    if($fee['type'] == 'hostel') {
      if($paid_nid == $fee['item']['product_nid']) {
        unset($fees['hostel']);
      }
    }
  }
  return ($preserve_keys === TRUE) ? $fees : array_shift($fees);
}

/**
 * returns fees object based on order status of pending
 * and payment_received
 */
function uc_eduerp_fees_completed_order_items($student_id, $fee_items) {
  if(is_null($student_id)) return FALSE;

  foreach ($fee_items['fees']['item'] as $i => $item) {
    $sql = "SELECT op.nid, op.data FROM {uc_orders} o, {uc_order_products} op
      WHERE
        o.uid=%d AND
        o.order_status IN ('payment_received', 'pending') AND
        o.order_id=op.order_id AND
        op.nid=%d";
    $result = db_query($sql, $student_id, $item['product_nid']);
    while ($order = db_fetch_array($result)) {
      $data = unserialize($order['data']);
      if ($data['session'] == variable_get('eduerp_current_session', '')) {
        if (isset($item['option_id'])) {
          if ($item['attribute_id'] == $data['attribute_id'] && $item['option_id'] == $data['option_id']) {
            unset($fee_items['fees']['item'][$i]);
            unset($fee_items['fees']['description'][$i]);
          }
        }
        else {
          unset($fee_items['fees']['item'][$i]);
          unset($fee_items['fees']['description'][$i]);
        }
      }
    }
  }

  if (empty($fee_items['fees']['item'])) unset($fee_items['fees']);

  if (empty($fee_items['hostel']['item'])) {
    unset($fee_items['hostel']);
  }
  else {
    $sql = "SELECT op.nid, op.data FROM {uc_orders} o, {uc_order_products} op
      WHERE
        o.uid=%d AND
        o.order_status IN ('payment_received', 'pending') AND
        o.order_id=op.order_id AND
        op.nid=%d";
    $result = db_query($sql, $student_id, $fee_items['hostel']['item']['product_nid']);
    while ($order = db_fetch_array($result)) {
      $data = unserialize($order['data']);
      if ($data['session'] == variable_get('eduerp_current_session', '')) {
        unset($fee_items['hostel']);
      }
    }
  }

  return $fee_items;
}


// Not Used
function user_has_completed_order_items($student_id) {
  $status_paid = FEES_PAID;
  $status_pending = FEES_PENDING;
  $result = db_query("SELECT order_id, data FROM {uc_orders} WHERE uid = %d and order_status IN ('%s', '%s') and data IS NOT NULL", $student_id, $status_paid, $status_pending);
  //db_affected_rows is unreliable. see: http://api.drupal.org/api/drupal/includes--database.pgsql.inc/function/db_affected_rows/6
  return (db_affected_rows() > 0)? TRUE : FALSE;
 }

/**
 * Pay fees menu callback
 *
 * @return
 *   - Drupal form
 */
function uc_eduerp_fees_pay_fees(&$form_state, $student_id) {
  global $user;
  $student_id = $user->uid;

  uc_cart_empty($student_id);

  module_load_include('inc', 'student', 'student.rules');
  $form = array();

  if($fees_items = module_invoke('uc_eduerp_fees', 'eduerp_fees')) {
    $fees = $fees_items;
  }

  // Check if the current user has an existing fees setup
  if(!is_fee_setup_existing_for_student($student_id)) {
    drupal_set_message(t("Sorry, you don't have a valid fees setup. Please contact bursary"), 'error');
    return FALSE;
  }

  // A student need to be cleared to progress
  if(!student_clearance_performed($student_id)) {
    $fees = array();
    drupal_set_message(t('Sorry, you need to be cleared to progress'), 'error');
    return FALSE;
  }

  // test if student is still a student (graduated or expelled)
  $session = variable_get('eduerp_current_session', '') ? variable_get('eduerp_current_session', '') : NULL;
  if(!student_next_level($student_id, $session)){
    $fees = NULL;
    drupal_set_message(t('Sorry. Your student record is no longer eligible to pay fees'), 'error');
    return FALSE;
  }

  // Remove any pending or paid fees...
  $fees = uc_eduerp_fees_completed_order_items($student_id, $fees);

  if (empty($fees['fees']['item']) && empty($fees['hostel'])) {
    drupal_set_message('All your fees items are currently in process or already paid for. Consult the bursary', 'error');
    return FALSE;
  }

  if(!is_reservation_existing($student_id)) {
    unset($fees['hostel']);
  }

  $form['eduerp_fees'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pay fees'),
    '#collapsible' => TRUE,
  );
  $form['eduerp_fees']['uid'] = array(
    '#type' => 'hidden',
    '#value' => $student_id
  );
  foreach($fees as $fee){
    $type = $fee['type'];
    $description = $fee['description'];
    $options = $fee['options'];
    $options_nid = (string)$options['nid'];

    if($type == EDUERP_FEES_NORMAL) {
      foreach($fee['item'] as $key => $value){
        $nids[$key] = $value['product_nid'];
        $items[$key] = $value;
        $desc[$key] = $value['item_description'];

        $form['eduerp_fees']["$type_$key"] = array(
          '#type' => 'checkbox',
          '#title' => strip_tags($desc[$key]),
          '#default_value' => TRUE,
          '#disabled' => TRUE //($type == 'fees')
        );

      }
      // construct fees hidden fields separately
      foreach($nids as $nid) {
        $form['eduerp_fees'][$type . '_' . $nid] = array(
          '#type' => 'hidden',
          '#value' => $nid,
        );
      }
      foreach($items as $item) {
        // Identify extras
        // foreach of the fees item description, parse it to extract the extras
        $key_search = $item['item_description'];
        foreach(module_implements('eduerp_fees_alter') as $module) {
          // @todo - Make hook_eduerp_fees_alter argument to be options so that extras
          // can be altered with multiple items
          $item['extras']['fees_payment_format'] = module_invoke($module, 'eduerp_fees_alter', $key_search, 'extras');
        }

        // @todo
        // Would be appropriate to use item_description here
        // but it is very unstructured and inconsistent
        $id = $item['product_nid'];
        $form['eduerp_fees']['product_item_' . $type . '_' . $id] = array(
          '#type' => 'hidden',
          '#value' => $item,
        );
      }
      $form['eduerp_fees']['options_' . $type. '_' . $options_nid] = array(
        '#type' => 'hidden',
        '#value' => $options,
      );
    }

    // Do the rest of the things for hostel
    if($type == EDUERP_FEES_HOSTEL) {
      $item = $fee['item'];
      $nid = $fee['item']['product_nid'];

      // Build a checkbox
      $form['eduerp_fees'][$type] = array(
        '#type' => 'checkbox',
        '#title' => strip_tags($description),
        '#default_value' => TRUE,
        '#disabled' => FALSE //($type == 'fees')
      );

      $form['eduerp_fees'][$type . '_' .$nid] = array(
          '#type' => 'hidden',
          '#value' => $nid,
      );
      $form['eduerp_fees']['product_item_' . $type] = array(
          '#type' => 'hidden',
          '#value' => $item,
      );
      $form['eduerp_fees']['options_' . $type. '_' . $options_nid] = array(
          '#type' => 'hidden',
          '#value' => $options,
      );

    }
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay Fees')
  );
  $form['#submit'][] = 'uc_eduerp_fees_pay_fees_form_submit';

  return $form;
}

/**
 *
 * @todo Write all modifications of uc_eduerp_fees_pay_fees to db
 *  for retrieval. uc_eduerp_fees_load_extras need this.
 */
function uc_eduerp_fees_pay_fees_form_submit($form, &$form_state) {
  $student_id = $form_state['values']['uid'];
  $values = array();
  foreach($form_state['values'] as $key => $value) {
    $vkeys[] = $key;
    $values[$key] = $value;
  }
  $key_search = implode(',', array_values($vkeys));
  preg_match_all('/product_item_fees_\d+/', $key_search, $matches);
  // match options for fees option
  preg_match_all('/options_fees_\d+/', $key_search, $fees_option_matches);
  // find all hostel keys if it exists
  if(in_array('hostel', $vkeys)) {
    preg_match_all('/product_item_hostel/', $key_search, $hostel_matches);
    preg_match_all('/options_hostel_\d+/', $key_search, $hostel_option_matches);
  }
  $matchs = array(
    'fees' => array_shift($matches),
    'fees_options' => array_shift($fees_option_matches),
    'hostel' => in_array('hostel', $vkeys) ? array_shift($hostel_matches) : array(),
    'hostel_options' => in_array('hostel', $vkeys) ? array_shift($hostel_option_matches) : array()
  );
  //$matchs['fees'] = array_shift($matches);
  /*$func = function($item, &$item_value) {
    $fees_items = array($item => $item_value);
    //$fees_items = array($item => 1);
    return $fees_items;
  };*/
  $product_fees = array();
  $product_hostel_fees = array();
  foreach($matchs['fees'] as $key => $value){
    $product_fees[$key] = $form_state['values'][$value];
    //$items = array_map($func, $match, $values);
  }
  foreach($matchs['fees_options'] as $key => $value) {
    $fees_options['options'] = $form_state['values'][$value];
  }
  foreach($matchs['hostel'] as $key => $value){
    $product_hostel_fees[$key] = $form_state['values'][$value];
  }
  foreach($matchs['hostel_options'] as $key => $value) {
    $hostel_options['options'] = $form_state['values'][$value];
  }
  $cart_items = array(
    'product_item_fees' => array(
      'item' => $product_fees,
      'options' => $fees_options['options']
    ),
    'hostel_item_fees' => array(
      'item' => $product_hostel_fees,
      'options' => in_array('hostel', $vkeys)? $hostel_options['options'] : array()
    )
  );
  // remove all traces of hostel if it's not available
  if(!in_array('hostel', $vkeys)) {
    unset($cart_items['hostel_item_fees']);
  }

  $transaction_token = uniqid();

  $added = FALSE;
  foreach($cart_items as $product_item){
    $cart_item = $product_item;

    foreach($product_item['item'] as $key => $fees_values) {
      $product[$key] = $fees_values;
      $cartId = uc_cart_get_id();
      $nid = $product[$key]['product_nid'];

      if($cart_item['options']['type'] == EDUERP_FEES_NORMAL) {
        if(array_key_exists('attribute_id', $product[$key])){
          $product_attribute = array('attributes' => array($product[$key]['attribute_id'] => $product[$key]['option_id']), 'attribute_id' => $product[$key]['attribute_id'], 'option_id' => $product[$key]['option_id']);
          //array_push($option, $product_attribute);
          $options = $cart_item['options'] + $product_attribute;
        }
        else {
          $options = $cart_item['options'];
        }

        // get_fee_items reports 2 states of is_scholarship_applicable
        // @see staff_school_fees_create_modify_fee_item_form
        // 1: Yes - Scholarship is applicable
        // 2: No - Scholarship is not applicable
        if (!empty($product[$key]['is_scholarship_applicable']) && $product[$key]['is_scholarship_applicable'] == '1' && is_scholarship_authorisation_existing($student_id, variable_get('eduerp_current_session', ''))) {
          $options['has_scholarship'] = '1'; // Yes
        }
        else {
          $options['has_scholarship'] = '2';
        }
      }

      if($cart_item['options']['type'] == EDUERP_FEES_HOSTEL) {
        $options = $cart_item['options'];
      }

      $options['transaction_token'] = $transaction_token;
      $options['original_amount'] = $product[$key]['amount'];

      if ($cart_item['options']['type'] == EDUERP_FEES_HOSTEL) {
        $options['scholarship_type'] = 'None';
        $options['sponsor'] = 'None';
      }
      else {
        $options['scholarship_type'] = $product[$key]['scholarship_type'];
        $options['sponsor'] = $product[$key]['sponsor'];
      }

      $profile_items = uc_eduerp_fees_get_profile_items($cartId);
      foreach($profile_items as $k => $v) {
        $options[$k] = module_invoke('uc_eduerp_fees', 'eduerp_fees_alter', $v, 'options');
      }

    if(!empty($product)){
      uc_cart_add_item($product[$key]['product_nid'], 1, $options, $cartId, $msg = TRUE, $check_redirect = TRUE, $rebuild = TRUE);
      $added = TRUE;
      $fees = array(
        'title' => '',
        'type' => $options['type'],
        'description' => $product[$key]['item_description'],
        'nid' => $product[$key]['product_nid'],
        'uid' => $cartId,
        'extras' => serialize($product[$key]['extras']),
        'options' => serialize($options)
      );
      // Stays in here for 6 hours
      $form_state['storage'] = $fees;
      // drupal_write_record is serialized by default.
      // We don't need to care about the order
      if(db_result(db_query("SELECT nid from {fees} WHERE nid = %d", $product[$key]['product_nid']))) {
        drupal_write_record('fees', $fees, 'fee_id');
      }
      else {
        // do an insert
        drupal_write_record('fees', $fees);
        // watchdog drupal write record
        watchdog('fees', t('New fee record created by @uid', array('@uid' => $cartId)));
      }
    }else {
      drupal_set_message(t('Sorry, you are not eligible to pay fees. Please contact bursary'), 'error');
      watchdog('fees', t('Fees insertion into cart failed on @uid', array('@uid' => $cartId)));
    }
    }
  }
  if($added){
    unset($_SESSION['cart_order']);
    drupal_goto('cart/checkout');
  }
}

/**
 * Implementation of hook_eduerp_fees
 *
 * Fees with all necessary setup information included
 * Describes the fees structure.
 *
 * @return
 *   - $fees: The Fees object including it's type, setup
 *
 * @todo
 *   - Write a fees plugin to define custom fees type
 *   - Introduce a 'callback' key to store in db this fees structure for
 *  every module that implements it
 */
function uc_eduerp_fees_eduerp_fees($fees = array()) {
  global $user;

  $type = '';
  $uid = user_load($user->uid);

  static $fees_item;
  $fees_item = get_fee_items($uid->uid);
  if(!empty($fees_item)){
    // Fees
    $fees_item['item'] = $fees_item['fee_item_details'];
    foreach($fees_item['item'] as $key => $value) {
      $description[$key] = $value['item_description'];
      $fees_item['item'][$key]['extras'] = array();
    }

    $profile = student_load_student_profile($uid->uid);
    $fullnames = '';
    if (!empty($profile->profile_first_name) && !empty($profile->profile_last_name)) {
      $middle = '';
      if (!empty($profile->profile_middle_name)) $middle = ' ' . $profile->profile_middle_name;
      $fullnames = "$profile->profile_last_name, $profile->profile_first_name{$middle}";
    }

    $fees_item['options'] = array(
      'type' => EDUERP_FEES_NORMAL,
      'nid' => $fees_item['studentFeeSetupNID'],
      'nationality' =>  $fees_item['nationality_name'],
      'programme' => $fees_item['fee_structure_name'], // Student course
      'level_name' => $fees_item['level_name'],
      'scholarship' => $fees_item['is_student_on_scholarship'], // True or False
      'allow_instalment' => $fees_item['instalment_payment_authorised'], // True or False
      'session' => $fees_item['session_name'],
      'late_registration' => $fees_item['late_reg_info'],
      'jambno' => $profile->profile_matno,
      'fullnames' => $fullnames,
      'institution' => 1
    );
    // Late registration added by Alan
    $fees_item['options']['late_registration']['last_registration_date'] = intval(strtotime($fees_item['options']['late_registration']['last_registration_date']));

    // hostel
    $fees_item['hostel'] = $fees_item['hostel_info'];
    $fees_item['options']['hostel'] = array(
      'nid' => $fees_item['hostel']['product_nid'],
      'type' => EDUERP_FEES_HOSTEL,
      'session' => $fees_item['session_name'],
      'expiry_date' => intval(strtotime($fees_item['hostel']['expiry_date'])),
      'jambno' => $profile->profile_matno,
      'fullnames' => $fullnames,
      'institution' => 1
    );
  } else {
    $fees_item = array();
  }

  $fees['fees'] = array(
    'item' => $fees_item['item'],
    //'description' => $fees_item['item']['item_description'],
    'description' => $description,
    'options' => $fees_item['options'],
    'type' => EDUERP_FEES_NORMAL,
    'title' => t('Fees'), // Human-readable name
  );
  $fees['hostel'] = array(
    //'item' => $fees_item['hostel']['product_nid'],
    'item' => $fees_item['hostel'],
    'description' => $fees_item['hostel']['hostel_description'],
    'options' => $fees_item['options']['hostel'],
    'type' => EDUERP_FEES_HOSTEL,
    'title' => t('Hostel'),
    'extras' => array()
  );
  return $fees;
}

/**
 * Hook to define fees_structure
 *
 * @param $fees
 *   - The fees
 */
function uc_eduerp_fees_eduerp_fees_hook($fees) {
  foreach (module_implements('eduerp_fees') as $module) {
    $function = $module . '_eduerp_fees';
    $result = $function($fees);
    if (isset($result) && is_array($result)) {
      $return = array_merge($return, $result);
    }
    else if (isset($result)) {
      $return[] = $result;
    }
  }
  return $return;
}

/**
 * Implements hook_eduerp_fees_eduerp_fees_alter
 *
 * Passing $items by reference here won't work
 * because of a PHP bug. Occurs only in php 5.3.1+
 *
 * @see
 *  - http://stackoverflow.com/questions/2045875/pass-by-reference-problem-with-php-5-3-1
 *  - http://bugs.php.net/bug.php?id=50394
 *
 * A temporary solution is to modify the values in the array
 * to be referenced
 */
function uc_eduerp_fees_eduerp_fees_alter($items = NULL, $context = 'extras') {
  // array search the context value
  // when gotten, inject stuffs into $extras key
  if($context == 'extras') {
    if(!is_null($items)) {
      preg_match_all('/Full Amount|Instalment1|Instalment2/', $items, $matches);
      foreach($matches as $key => $value) {
        return $value;
      }
    }
  }
  if($context == 'options') {
    if(is_string($items)) {
      return $items;
    }
    if(is_array($items)) {
      return $items;
    }
  }
}

/**
 * All paid fees items gotten from EduPay
 *
 * Returns an array of all fees that are paid
 *
 * @params $items
 *  Paid items
 *
 * @todo Lookup should be done fees_order table
 * and not uc_orders
 *
 * @return array
 * Not used (except by test)
 */
function uc_eduerp_fees_paid_items($uid, $nid, $subscript = TRUE) {
  $items = array();
  $status_paid = FEES_PAID;
  $status_pending = FEES_PENDING;
  $result = db_query("SELECT * FROM {uc_order_products} WHERE nid = %d ORDER BY nid", $nid);
  $products = db_fetch_object($result);

  $result = db_query("SELECT order_id, data FROM {uc_orders} WHERE uid = %d and order_status IN ('%s', '%s') and data IS NOT NULL", $uid, $status_paid, $status_pending);
  while($order = db_fetch_object($result)) {
    if($subscript) {
      $items[] = $products->nid;
      break;
    }
    $order->nid = $products->nid;
    $order->order_id = $order->order_id;
    $order->data = unserialize($order->data);
    $items[$order->nid] = $order;
  }
  return $items;
}

/**
 * Gets the fees attributes including
 *   - product_nid
 *   - attribute_id
 *   - option_id
 *
 * @todo Needs rework
 */
function uc_eduerp_fees_fees_attributes($fees) {
  if(!empty($fees)) {
    foreach($fees as $fee) {
      $attribute_id = $fee['item']['attribute_id'];
      $attr_obj = uc_attribute_load($attribute_id);
      /*foreach($fee['item'] as $key => $fee_item) {
      }*/
    }
  }
  return $attribute_id;
}

/**
 * Load fees extras from the database. Accepts only
 * fees and hostel types as of writing
 * NOT USED
 *
 */
function uc_eduerp_fees_load_extras($uid, $type) {
  switch($type) {
    case 'fees':
      $result = db_query("SELECT * FROM {fees} WHERE uid = %d and type = '%s'", $uid, $type);
      while($fee_object = db_fetch_object($result)) {
        $extras[$fee_object->nid] = unserialize($fee_object->extras);
      }
      return $extras;
      break;
    case 'hostel':
      $result = db_query("SELECT * FROM {fees} WHERE uid = %d and type = '%s'", $uid, $type);
      while($fee_object = db_fetch_object($result)) {
        $extras[$fee_object->nid] = unserialize($fee_object->extras);
      }
      return $extras;
      break;
  }
}

/**
 * hook_update_invoke declaration
 */
function uc_eduerp_fees_update_invoke($op, $value, $schema = NULL, $field_value = NULL) {
  foreach(module_list() as $module) {
    $function = $module . '_update_'.$op;
    if(function_exists($function)) {
      $function($value, $schema, $field_value);
    }
  }
}

function uc_eduerp_fees_update_update($value, $schema, $field_value) {
  if(db_query("UPDATE {$schema} set order_status = '$field_value' WHERE order_id = %d", $value)) {
    return TRUE;
  }
}

function uc_eduerp_fees_update_delete($value, $schema, $field_value) {
  return db_query("DELETE FROM {$schema} WHERE order_id = %d", $value);
}

function uc_eduerp_fees_invoice_regenerate($order_id) {
  return _uc_eduerp_fees_invoice_rebuild($order_id);
}

/**
 * load the invoice view (pdf_invoice)
 * views_get_view (get it from default)
 * reload the invoice at user's profile page
 * clear the cache
 *
 * Things to change on the invoice
 *  - print status as Unpaid
 */
function _uc_eduerp_fees_invoice_load($order_id) {
  $view = views_get_view_result('pdf_invoice', 'pdf_1', $order_id);
  $view[0]->uc_orders_order_status = 'canceled';
}

function _uc_eduerp_fees_invoice_rebuild($order_id) {
  return _uc_eduerp_fees_invoice_load($order_id);
}

/**
 * Get fees of type fees from the source
 *
 * All modifications within uc_eduerp_fees_pay_fees are
 * not available to the return items in this function
 */
function uc_eduerp_fees_get_fees($type = 'fees') {
  if($fees = module_invoke('uc_eduerp_fees', 'eduerp_fees')) {
    foreach($fees as $fee){
      if($fee['type'] == $type) {
        $items = $fee['item'];
      }
    }
     return $items;
  }
}

/**
 * Get fees items when an order is made
 *
 * @todo test the order object to make sure it is of type fees
 */
function uc_eduerp_fees_get_fees_order() {
  $order_id = intval($_SESSION['cart_order']);
  if($order_id > 0) {
    $order = uc_order_load($order_id);
  }
  return $order;
}

/**
 * Loads a subset of fees by type
 *
 * @param $type
 *   fees or hostel
 *
 * @return
 *   - array
 * NOT USED
 */
function uc_eduerp_fees_load_fee_options($type) {
  if(!is_null($type)){
    if($fees = module_invoke('uc_eduerp_fees', 'eduerp_fees')) {
      $typed = $fees[$type];
      return $typed['options'];
    }
  }
}

/**
 * Orders are regarded as items in UC.
 * Provides extra access to data in the order throughout
 * the life time of the ordering process.
 *
 * @param $type
 *  fees or hostel
 */
function uc_eduerp_fees_load_item_options($type){
}

/**
 * Implements hook_form_ID_alter
 *
 * Bug: this form alter is getting called before the check
 * for is_reservation_existing. The implication of this is that
 * the hostel form gets removed before a check for whether hostel
 * exists or not.
 */
function uc_eduerp_fees_form_uc_eduerp_fees_pay_fees_alter(&$form, $form_state) {
  // Remove hostel if no reservation exists
  if(!is_reservation_existing($form['uid']['#value'])) {
    // unsets from screen, doesn't get removed from from array
    //unset($form['eduerp_fees']['hostel']);
  }
}

/**
 * Implementation of hook_views_api().
 */
function uc_eduerp_fees_views_api() {
  return array(
    'api' => 2,
    //'path' => drupal_get_path('module', 'uc_eduerp_fees'),
    'path' => drupal_get_path('module', 'uc_eduerp_fees') . '/includes',
  );
}

/**
 * Get student profile items related to fees
 */
function uc_eduerp_fees_get_profile_items($uid) {
  $student_profile = content_profile_load('student_profile', $uid);
  $program = $student_profile->field_profile_first_choice;
  $program_nid = $program[0]['nid'];

  $program_obj = db_fetch_object(db_query("SELECT field_programme_name_value,
    field_department_id_nid FROM {content_type_program} p
    WHERE p.nid = %d", $program_nid));

  if($program_obj) {
    $dept_nid = $program_obj->field_department_id_nid;
    $dept_result = db_result(db_query("SELECT field_college_id_nid
      FROM {content_type_department} d
      WHERE d.nid = %d", $dept_nid));

    if($dept_result) {
      $college_nid = $dept_result;
      $college = db_result(db_query("SELECT field_college_name_value
        FROM {content_type_college} c
        WHERE c.nid = %d", $college_nid));
    }
  }

  $profile_items = array(
    'course' => $program_obj->field_programme_name_value,
    'college' => $college
  );

  return $profile_items;
}