<?php 

/**
 * @file
 * Ubercart integration of EduERP fees
 */ 

define('EDUERP_FEES_NORMAL', 'fees');
define('EDUERP_FEES_HOSTEL', 'hostel');
define('FEES_PAID', 'payment_received');
//define('EDUERP_FEES_IN_CART', $_SESSION['eduerp_fees_in_cart']);

function uc_eduerp_fees_pay_fees(&$form_state, $student_id) {
	module_load_include('inc', 'student', 'student.rules');
	$form = array();
	
	//$fees = array();
	if($fees_items = module_invoke('uc_eduerp_fees', 'eduerp_fees')) {
		$fees = $fees_items;
	}
	// @todo
	// If the student have these items in the cart already, redirect
	// to the /cart to prevent increment in cart quantity
	if($_SESSION['eduerp_fees_in_cart'] == TRUE) {
		drupal_goto('cart');
		drupal_set_message('Welcome back! Please continue from where you left off.');
	}
	// A student need to be cleared to progress
	/*if(!student_clearance_performed($student_id)) {
		drupal_set_message('Sorry, you need to be cleared to progress', 'error');
		$fees = array();
	}*/

	// test if student is still a student (graduated or expelled)
	/*$session = variable_get('eduerp_current_session', '') ? variable_get('eduerp_current_session', '') : NULL;
	if(!student_next_level($student_id, $session)){
		$fees = NULL;
		drupal_set_message('Sorry. Your student record is no longer eligible to pay fees', 'error');
	}*/

	// The paid fees items
	$paid_fees_items = uc_eduerp_fees_paid_items();
	
	if(!is_reservation_existing($student_id)) {
		unset($fees['hostel']);
	}
	
	$form['eduerp_fees'] = array(
		'#type' => 'fieldset',
		'#title' => t('Pay fees'),
		'#collapsible' => TRUE,
	);
	foreach($fees as $fee){
		
		$type = $fee['type'];
		$desc = $fee['description'];
		
		$nid = $fee['item']['product_nid'];
		$data = $fee['options'];
		$data_nid = (string)$data['nid'];
		$item = $fee['item'];
		
		// if $fees is paid for break everything
		/*if(in_array($attr_obj->name, $paid_fees_items)) {
			//$fees = array();
			//drupal_set_message('You have already paid for this item. Consult the bursary', 'error');
		}*/

		// Invalidate fee if late registration period is reached,
		if(uc_eduerp_fees_registration_is_late('fees')) {
			$fee = NULL;
			drupal_set_message('Student registration for this session is closed. Consult the registry', 'error');
		}

		// Before item is added to cart, check for hostel reservation value
		// if hostel reservation has expired, set fees to NULL
		// if the fees record contains hostel key(hostel attribute id), check for expiration
		// status = Needs work
		/*if(array_key_exists('hostel', $fees) && $fees->hostel_reservation_expired) {
			$fees = NULL;
			drupal_set_message('Your hostel reservation has expired. Please consult the registry', 'error');
		}*/

		// Build a checkbox
		if(!empty($fee)) {
			$form['eduerp_fees'][$type] = array(
				'#type' => 'checkbox',
				'#title' => strip_tags($desc),
				'#default_value' => TRUE,
				'#disabled' => TRUE //($type == 'fees')
			);
			
			$form['eduerp_fees'][$nid] = array(
					'#type' => 'hidden',
					'#value' => $nid,
			);
			$form['eduerp_fees']["product_item_$type"] = array(
					'#type' => 'hidden',
					'#value' => $item,
			);
			$form['eduerp_fees']['data_' . $data_nid] = array(
					'#type' => 'hidden',
					'#value' => $data,
			);
		}
	}
	$form['eduerp_fees']['uid'] = array(
		'#type' => 'hidden',
		'#value' => $student_id
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Pay Fees')
	);
	$form['#submit'][] = 'uc_eduerp_fees_pay_fees_form_submit';
	
	return $form;
}

function uc_eduerp_fees_pay_fees_form_submit($form, &$form_state) {
	$student_id = $form_state['values']['uid'];
	foreach($form_state['values'] as $key => $value) {
		$nids = array($key[1], $key[4]);
		$vkeys[] = $key;
	}
	// @todo Move into a function and find alternative ways to get the
	// cart keys. Also get the quantity of each fee item to pass to uc_cart_add_item
	$cart_nids = array(
		$vkeys[2] => array(
			'item' => $form_state['values'][$vkeys[2]], 
			'options' => $form_state['values'][$vkeys[3]]
		),
		$vkeys[6] => array(
			'item' => $form_state['values'][$vkeys[6]], 
			'options' => $form_state['values'][$vkeys[7]]
		),
	);
	
	// remove all traces of hostel if it's not available
	if(!isset($form_state['values']['hostel'])) {
		unset($cart_nids[$vkeys[6]]);
	}
	
	$added = FALSE;
	foreach($cart_nids as $cart_nid){
		$product = $cart_nid;
		// only if it's a product
		if(!empty($product)){
			uc_cart_add_item($product['item']['product_nid'], 1, $product['options'], $student_id);
			$_SESSION['eduerp_fees_in_cart'] = TRUE;
			$added = TRUE;
		}else {
			drupal_set_message('Sorry, you are not eligible to pay fees. Please contact bursary', 'error');
			// watchdog this
		}
	}
	if($added){
		$form_state['redirect'] = 'cart';
	}
}

/**
 * Implementation of hook_eduerp_fees
 * 
 * Fees with all necessary setup information included
 * Describes the fees structure.
 * 
 * @return 
 * 	- $fees: The Fees object including it's type, setup
 * 
 * @todo 
 * 	- Write a fees plugin to define custom fees type
 * 	- Introduce a 'callback' key to store in db this fees structure for
 *  every module that implements it
 */ 
function uc_eduerp_fees_eduerp_fees($fees = array()) {
	global $user;
	
	$type = '';
	$uid = user_load($user->uid);
	
	static $fees_item;
	$fees_item = get_fee_items($uid->uid);
	if(!empty($fees_item)){
		// Fees
		$fees_item['item'] = array_shift($fees_item['fee_item_details']);
		$fees_item['options'] = array(
			'type' => EDUERP_FEES_NORMAL,
			'nid' => $fees_item['studentFeeSetupNID'],
			'nationality' =>  $fees_item['nationality_name'],
			'programme' => $fees_item['fee_structure_name'], // Student course
			'level_name' => $fees_item['level_name'],
			'scholarship' => $fees_item['is_student_on_scholarship'], // True or False
			'allow_instalment' => $fees_item['instalment_payment_authorised'], // True or False
			'session' => $fees_item['session_name'],
			'late_registration' => $fees_item['late_reg_info']
			);
		
		// hostel
		$fees_item['hostel'] = $fees_item['hostel_info'];
		$fees_item['options']['hostel'] = array(
			'nid' => $fees_item['hostel']['product_nid'],
			'type' => EDUERP_FEES_HOSTEL,
			'expiry_date' => $fees_item['hostel']['expiry_date']
		);
	} else {
		$fees_item = array();
	}
	
	$fees['fees'] = array(
		'item' => $fees_item['item'],
		//'item' => array('fees' => array(0 => array('amount' => '50000'))),
		'description' => $fees_item['item']['item_description'],
		'options' => $fees_item['options'],
		'type' => EDUERP_FEES_NORMAL,
		'title' => t('Fees') // Human-readable name
	);
	$fees['hostel'] = array(
		//'item' => get_hostel_fees($uid),
		//'item' => $fees_item['hostel']['product_nid'],
		'item' => $fees_item['hostel'],
		'description' => $fees_item['hostel']['hostel_description'],
		'options' => $fees_item['options']['hostel'],
		'type' => EDUERP_FEES_HOSTEL,
		'title' => t('Hostel')
	);
	return $fees;
}

/**
 * Hook to define fees_structure
 * 
 * @param $fees
 * 	- The fees
 */ 
function uc_eduerp_fees_eduerp_fees_hook($fees) {
  foreach (module_implements('eduerp_fees') as $module) {
    $function = $module . '_eduerp_fees';
    $result = $function($fees);
		if (isset($result) && is_array($result)) {
      $return = array_merge($return, $result);
    }
    else if (isset($result)) {
      $return[] = $result;
    }
  }
  return $return;
}

/**
 * All paid fees items gotten from EduPay
 * 
 * @return 
 * 	- $items: Paid items
 */ 
function uc_eduerp_fees_paid_items() {
	//$items include product_nid, attribute_id and status
	$items = array();
	return $items;
}

/**
 * Gets the fees attributes including 
 * 	- product_nid
 * 	- attribute_id
 * 	- option_id
 * 
 */ 
function uc_eduerp_fees_fees_attributes($fees) {
	if(!empty($fees)) {
		foreach($fees as $fee) {
			$attribute_id = $fee['item']['attribute_id'];
			$attr_obj = uc_attribute_load($attribute_id);
			/*foreach($fee['item'] as $key => $fee_item) {
			}*/
		}
	}
	return $attribute_id;
}

function uc_eduerp_fees_update_invoke($op, $value, $schema = NULL, $field_value = NULL) {
	foreach(module_list() as $module) {
		$function = $module . '_update';
		if(function_exists($function)) {
			$function($op, $value, $schema, $field_value);
		}
	}
}

function uc_eduerp_fees_update_load($value, $schema, $field_value) {
	// $value should remain the same. Shouldn't be passed by reference
	$order_id = db_fetch_object(db_query("SELECT order_id FROM {$schema} WHERE tpin = '%s'", $value));
	return $order_id;
}

function uc_eduerp_fees_update_update($value, $schema, $field_value) {
	return db_query("UPDATE {$schema} set order_status = $field_value WHERE order_id = %d", $value);
}

function uc_eduerp_fees_update_delete($value, $schema, $field_value) {
	return db_query("DELETE FROM {$schema} WHERE order_id = %d", $value);
}

/**
 * Implementation of hook_update_{hook}
 *
 * @see 
 */
function uc_eduerp_fees_update_fees($values) {
	$order_id = uc_eduerp_fees_update_invoke('load', $values['tpin']);
	$order = uc_order_load($order_id);
	// If status == payment_received
	// load the order_id by tpin (query eduerp_transaction table to get the tpin) sent from 
	// edupay and update the ubercart order status to paid
	// run ubercart update query here to update an order
	// db_query('UPDATE {uc_orders} set ')
	if($values['status'] == FEES_PAID) { //Payment received
		uc_eduerp_fees_update_invoke('update', $order_id, 'uc_orders', FEES_PAID);
		if(isset($_SESSION['eduerp_fees_in_cart'])){
			unset($_SESSION['eduerp_fees_in_cart']);
		}
		//watchdog this
	}
	// If the fees paid for is of type hostel
	if($values['status'] == FEES_PAID && $values['type'] == EDUERP_FEES_HOSTEL) {
		// allocate bedspace for this user
		return allocate_bedspace($values['uid']);
	}
	if($values['service'] == INVOICE_REGENERATE) {
		// Load the order_id by edupay tpin (query eduerp_trasaction table to get the pin )
		// uc_eduerp_fees_update_invoke('load', $values['tpin'], 'eduerp_transaction');
		// set the order to unpaid. Parameters: uid and order id. Ubercart prefers canceled
		// db_query('UPDATE {uc_orders} set ')
		// get the status of the order
		// if it is not set to cancelled or is pending or in_checkout
		// set it to canceled
		$order_status = $order->order_status;
		//$possible_statuses = array('canceled', 'pending', 'in_checkout');
		if((uc_order_status_data($order_status, 'state') == 'pending' or 'in_checkout')) {
			$status = t('canceled');
			uc_eduerp_fees_update_invoke('update', $order_id, 'uc_orders', $status);
			// watchdog this
		}
		if(uc_order_status_data($order_status, 'state') == 'canceled') {
			//remove the order item from cart and unset all other related SESSION variables
			uc_eduerp_fees_update('delete', $order_id, 'uc_orders');
			// watchdog this
		}
		// load and rebuild the user's order invoice
		uc_eduerp_fees_invoice_regenerate();
		
		// if the product_attribute sent from edupay is hostel, revoke hostel allocation
		if($values['type'] == EDUERP_FEES_HOSTEL) {
			hostel_allocation_revoke_expired_reservation();
			// watchdog this
		}
	}
}

function uc_eduerp_fees_invoice_regenerate() {
	return uc_eduerp_fees_invoice_rebuild();
}

function uc_eduerp_fees_invoice_load() {
	return 'loaded';
}

function uc_eduerp_fees_invoice_rebuild() {
	uc_eduerp_fees_invoice_load();
	return;
}

/**
 * 
 * @todo test the order object to make sure it is of type fees
 */ 
function uc_eduerp_fees_get_fees() {
	$order_id = intval($_SESSION['cart_order']);
	if($order_id > 0) {
		$order = uc_order_load($order_id);
	}
	return $order;
}

/**
 * Loads a subset of fees
 * 
 * @param 
 * 	- fees
 * 
 * @return 
 * 	- array
 */  
function uc_eduerp_fees_load_fee_options($type) {
	if(!is_null($type)){
		if($fees = module_invoke('uc_eduerp_fees', 'eduerp_fees')) {
			$typed = $fees[$type];
			return $typed['options'];
		}
	}
}

/**
 * Determines whether late registration period is reached
 * 
 * @return Bool
 * 
 */ 
function uc_eduerp_fees_registration_is_late() {
	$late = uc_eduerp_fees_load_fee_options(EDUERP_FEES_NORMAL);
	$late_value = $late['late_registration'];
	$late_date = $late_value['late_registration_date'];
	if(!is_null($late_date)){
		$now = date('Y-m-d');
		// if today's date == 
		return ($now == $late_date) ? TRUE : FALSE;
	}
}

function uc_eduerp_fees_form_uc_eduerp_fees_pay_fees_alter(&$form, $form_state) {
	// Remove hostel if no reservation exists
	if(!is_reservation_existing($form['uid']['#value'])) {
		// unsets from screen, doesn't get removed from from array
		unset($form['eduerp_fees']['hostel']); 
	}
}

/** 
 * Implements hook_checkout_pane
 * 
 * @todo Move into uc_edupay
 */  
function uc_eduerp_fees_checkout_pane() {
	
	//$fees = uc_eduerp_fees_get_fees();
	$items = uc_cart_get_contents();
	//dsm($fees);
	foreach($items as $fee) {
		//dsm($fees);
		$panes[$fee['title']] = array(
			'id' => '', //pass in here the fee attribute
			'callback' => 'uc_checkout_pane_eduerp_fees',
			'title' => t('Your EduERP Fees items'),
			'desc' => t('Below shows the fee items in your cart that you are about to pay for.'),
			'weight' => 8,
		);
	}
	return $panes;
}

/**
 * A single callback to display all fees in the cart
 * in a generic checkout pane.
 * 
 * @param
 * 	- $op: Operations
 *  - $arg1: contains order information
 *  - $arg2
 * 
 * @todo Move into uc_edupay
 */ 
function uc_checkout_pane_eduerp_fees($op, &$arg1, $arg2){
	global $user;
	//dsm($arg1);
	switch ($op) {
		case 'view':
			// if item in the cart is of type fees
	}
}

/**
 * Implements hook_edupay
 * 
 * @todo Move into uc_edupay
 */ 
function uc_eduerp_fees_edupay($order){
	
	module_load_include('inc', 'eduerp', 'eduerp.admin');
	
	$institution = eduerp_get_institution('name');
	
	if(!isset($order)) {
		$order = $_SESSION['cart_order'];
	}
	if(!empty($institution)) {
		$code = $institution->code;
		$key = $institution->secret;
		$amount = $order->order_total;
		$identifier = '';
		
		$valid_institution = array(
			'amount' => $amount,
			'code' => $code, 
			'identifier' => $identifier
		);
	
		//$digest = md5(":" + implode('', $valid_institution));
		$digest = _edupay_digest($code, $key, $valid_institution);
		
		$data = array(
			'code' => $code, // get from $institution
			'digest' => $digest, // the university code, a colon, and an autogenerated secret code
			'status' => uc_order_status_data($order->order_status, 'state'), // the order status at the time of processing. Get from order
			'amount' => $amount, //get from order. ubercart usually lumps all cart items together. We need to seperate them by product_attribute before sending to edupay
			'identifier' => $identifier, // set this if you need it
			'fees' => $order // the order object at the time of processing
		);
	}
	
	return $data;
}

/**
 * EduPay digest 
 * 
 * @todo Move into uc_edupay
 */ 
function _edupay_digest($code, $key, $valid_institution) {
	//$valid_institution = array('amount' => '0.0', 'code' => $code, 'identifier' => ' ');
	if(!empty($valid_institution) && array_key_exists('code', $valid_institution)){
		$text = 
				$valid_institution['code'] . ":" . 
				$valid_institution['identifier'] . ":" . 
				$valid_institution['amount'] . ":" . 
				$key;
	}
	return strtoupper(hash("md5", $text)); 
}