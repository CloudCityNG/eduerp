<?php
/**
 * @todo Move all codes related to payment into this module
 * @author Kayode Odeyemi
 */

define("INVOICE_REGENERATE", "regenerate");
define("UC_EDUPAY_URL", 'http://banker:banker@127.0.0.1:8000/api/transaction/add'); // to be modified

/**
 * Implementation of hook_perm()
 * @return <type>
 */
function eduerp_transaction_perm() {
    return array('perform checkout', 'checkout hostel order');
}

/**
 * Implementation of hook_menu()
 */
function eduerp_transaction_menu() {
    global $user;
    $uid = $user->uid;
    $items = array();
    if(module_exists('uc_eduerp_fees')) {
      $items['user/%/fees/pay'] = array(
        'title' => t('Pay fees'),
        'description' => t('Pay all type of fees'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('uc_eduerp_fees_pay_fees', $uid),
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK
      );
      $items['admin/settings/eduerp/transaction'] = array (
        'title' => 'EduERP Transaction Settings',
        'page callback' => 'eduerp_transaction_overview',
        //'page arguments' => array ('eduerp_transaction_overview'),
        'access arguments' => array('administer site configuration'), // administer_transaction
        'type' => MENU_NORMAL_ITEM,
      );
      $items['admin/settings/eduerp/transaction/overview'] = array(
        'title' => 'Overview',
        'description' => 'EduERP Transaction Settings',
        'access arguments' => array('administer site configuration'),
        'weight' => -10,
        'type' => MENU_DEFAULT_LOCAL_TASK,
        //'file' => 'uc_store.admin.inc',
      );
      $items['admin/settings/eduerp/transaction/auth/basic'] = array(
        'title' => t('Edupay Basic Auth'),
        'description' => t('Basic authentication to Edupay'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('eduerp_transaction_edupay_basic_auth'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_LOCAL_TASK,
        #'file' => 'eduerp_transaction.admin.inc'
      );
      $items['admin/settings/eduerp/transaction/oauth/consumer'] = array(
        'title' => t('Edupay Consumer'),
        'description' => t('A consumer key for authentication in Edupay'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('eduerp_transaction_edupay_auth_consumer'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_LOCAL_TASK,
        #'file' => 'eduerp_transaction.admin.inc'
      );
      $items['admin/settings/eduerp/transaction/oauth/token'] = array(
        'title' => t('Edupay Token'),
        'description' => t('Get authorization to make transaction using Edupay'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('eduerp_transaction_edupay_token_request'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_LOCAL_TASK,
        #'file' => 'eduerp_transaction.admin.inc'
      );
    }
    return $items;
}

/**
 * Describes eduerp transaction as well as its links
 * to other sub-modules in it
 * 
 * 
 */ 
function eduerp_transaction_overview(){
  // pass
  return '';
}

/**
 * Basic authentication settings to edupay
 * 
 */ 
function eduerp_transaction_edupay_basic_auth($form_state){
  $form['edupay_basic_auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Edupay Basic Authentication'),
    //'#collapsible' => TRUE
  );
  $form['edupay_basic_auth']['edupay_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Edupay Username'),
    '#description' => t('Enter the username for edupay authentication'),
    '#default_value' => variable_get('edupay_user', 'username')
  );
  $form['edupay_basic_auth']['edupay_pass'] = array(
    '#type' => 'password',
    '#title' => t('Edupay Password'),
    '#description' => t('Enter the password for that accompanies the username you entered above.'),
    '#default_value' => variable_get('edupay_pass', 'password')
  );
  $form['edupay_basic_auth']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  return $form;
}

function eduerp_transaction_edupay_auth_consumer($form_state) {
  $form['edupay_oauth_auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Consumer protected authentication'),
    '#collapsible' => TRUE
  );
  $form['edupay_oauth_auth']['oauth_consumer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Consumer key:'),
    '#description' => t('Enter your consumer key as given by Edupay'),
    '#default_value' => variable_get('oauth_consumer_key', '')
  );
  $form['edupay_oauth_auth']['oauth_consumer_secret'] = array(
    '#type' => 'password',
    '#title' => t('Consumer secret:'),
    '#description' => t('Enter your consumer secret as given by Edupay'),
    '#default_value' => variable_get('oauth_consumer_secret', '')
  );
  $form['edupay_oauth_auth']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  return $form;
}
function eduerp_transaction_edupay_token_request($form_state) {
  $form['edupay_oauth_token'] = array(
    '#type' => 'fieldset',
    '#title' => t('Consumer token for secured request'),
    '#collapsible' => TRUE
  );
  $form['edupay_oauth_token']['token_buttons'] = array();
  $form['edupay_oauth_token']['token_buttons']['eduerp_transaction_generate_token_key'] = array(
    '#type' => 'button',
    '#value' => t('Generate token key'),
    '#submit' => array('eduerp_transaction_generate_token_key_submit'),
  );
  $form['edupay_oauth_token']['token_buttons']['eduerp_transaction_generate_token_secret'] = array(
    '#type' => 'button',
    '#value' => t('Generate token secret'),
    '#submit' => array('eduerp_transaction_generate_token_key_submit'),
  );
  $form['edupay_oauth_token']['markup'] = array(
    '#type' => 'markup',
    '#value' => t('Alternatively, get both at once'),
    '#prefix' => '<div class="eduerp-transaction-span">',
    '#suffix' => '</div>'
  );
  $form['edupay_oauth_token']['token_buttons']['eduerp_transaction_generate_token'] = array(
    '#type' => 'button',
    '#value' => t('Generate token'),
    '#submit' => array('eduerp_transaction_generate_token_submit'),
  );
  return $form;
}
/**
 * Implementation of hook_help().
 */
function eduerp_transaction_help($path, $arg) {
  switch ($path) {
    case 'admin/help#eduerp_transaction':
      $output = file_get_contents(drupal_get_path('module', 'eduerp_transaction') .'/README.txt');
      return module_exists('markdown') ? filter_xss_admin(module_invoke('markdown', 'filter', 'process', 0, -1, $output)) : '<pre>'. check_plain($output) .'</pre>';
    case 'admin/settings/eduerp/transaction':
      return theme('eduerp_transaction_overview');
  }
}

/*
 * hook_theme implementation
 */
function eduerp_transaction_theme() {

    $path = drupal_get_path('module', 'eduerp_transaction');
    require_once "./$path/theme.inc";

    $base = array(
        'file' => 'theme.inc',
        'path' => "$path",
    );

    $theme['eduerp_transaction_overview'] = $base + array(
        'arguments' => array(),
    );
    return $theme;
}

/*
 * Displays reservation information as well as perform checkout functions
 */
function eduerp_transaction_checkout_form(&$form_state) {
    global $user, $EDUERPstudentInitiated;

    $path = drupal_get_path('module', 'hostel_allocation');
    include_once "./$path/hostel_allocation.module";

    $student_profile = new UserProfile($user->uid);
    //hostel_allocation_direct_room_reservation($user->uid);
    (object) $student_hostel_reservation;
    $output = '';

    //uc_cart_add_item($nid, $qty = 1, $data = NULL, $cid = NULL, $msg = TRUE, $check_redirect = TRUE, $rebuild = TRUE);
    if(module_exists('hostel_allocation')) {
        drupal_set_message('hostel_allocation exits');
        $student_hostel_reservation = module_invoke('get_reservation_info', $user->uid);
    }
    if(!empty($student_hostel_reservation)) {
        //$output .= $student_hostel_reservation->hostel_name;
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'GO',
    );

    return $form;
}

function eduerp_transaction_init(){
  //$fee_items['item'] = get_fee_items(955);
  
  $data = array(
    'code' => 'UNIB',
    'digest' => '9EF3FD4D2115DA62F0FA83F25E5F8A2F',
    'amount' => 0.0,
    'identifier' => '',
    'fees' => array(
      'fees' => array(
        'status' => 'pending',
        'timeout' => 10,
        ),
      'hostel' => array(
        'status' => $arg1->order_status,
        'timeout' => 20,
      ),
    )
  );
  
  $uri = 'http://banker:banker@127.0.0.1:8000/api/transaction/add';
          

  
  /*try {
    $httpclient = new HttpClient();
    $result = $httpclient->post($uri, $data);
  }
  catch(HttpClientException $httpException) {
  }*/
  
  $uri['user'] = variable_get('edupay_user', '');
  $uri['pass'] = variable_get('edupay_pass', '');
  
  //$header = drupal_set_header('Content-Type: application/json');
  $header = array('Content-Type' => 'application/x-www-form-urlencoded');
  $method = 'POST';
  
  //$result = drupal_http_request($uri, $header, $method, http_build_query($data, '', '&'));
  
  // if result->code is 200, parse the response and store tpin.
  /*if($result->code == 200){
    dsm($result);
  }else {
    dsm($result);
    drupal_set_message(t('Oooops! Something went wrong! We are unable to process your transaction. Please contact bursary.'), 'error');
  }*/
            
  /*$name = 'Content-Type';
  $value = 'application/json';
  $values = array(
    'method' => 'POST',
    'headers' => array('Content-Type: application/json')
  );
  $httpclientrequest = new HttpClientRequest(UC_EDUPAY_URL, $values);
  $httpclientrequest.setHeader($name, $value);*/
            
}
