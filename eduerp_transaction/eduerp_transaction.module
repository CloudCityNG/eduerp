<?php
/**
 * @todo Move all codes related to payment into this module
 * @author Kayode Odeyemi
 */

define("INVOICE_REGENERATE", "regenerate");
define("UC_EDUPAY_URL", 'http://127.0.0.1/8000/api/transaction/add');

/**
 * Implementation of hook_perm()
 * @return <type>
 */
function eduerp_transaction_perm() {
    return array('perform checkout', 'checkout hostel order');
}

/**
 * Implementation of hook_menu()
 */
function eduerp_transaction_menu() {
		global $user;
    $items = array();
		if(module_exists('uc_eduerp_fees')) {
			$items['user/%/fees/pay'] = array(
				'title' => t('Pay fees'),
				'description' => t('Pay all type of fees'),
				'page callback' => 'uc_eduerp_fees_add_to_cart',
				'page arguments' => array($user->uid),
				'access callback' => 'user_access',
        'access arguments' => array('access content'),
				'type' => MENU_CALLBACK
			);
		}
    return $items;
}

/*
 * hook_theme implementation
 */
function eduerp_transaction_theme() {

    $path = drupal_get_path('module', 'eduerp_transaction');
    require_once "./$path/theme.inc";

    $base = array(
        'file' => 'theme.inc',
        'path' => "$path",
    );

    $theme['eduerp_transaction_display_reservation_info'] = $base + array(
        'arguments' => array(),
    );
    return $theme;
}

/*
 * Displays reservation information as well as perform checkout functions
 */
function eduerp_transaction_checkout_form(&$form_state) {
    global $user, $EDUERPstudentInitiated;

    $path = drupal_get_path('module', 'hostel_allocation');
    include_once "./$path/hostel_allocation.module";

    $student_profile = new UserProfile($user->uid);
    //hostel_allocation_direct_room_reservation($user->uid);
    (object) $student_hostel_reservation;
    $output = '';

    //uc_cart_add_item($nid, $qty = 1, $data = NULL, $cid = NULL, $msg = TRUE, $check_redirect = TRUE, $rebuild = TRUE);
    if(module_exists('hostel_allocation')) {
        drupal_set_message('hostel_allocation exits');
        $student_hostel_reservation = module_invoke('get_reservation_info', $user->uid);
    }
    if(!empty($student_hostel_reservation)) {
        //$output .= $student_hostel_reservation->hostel_name;
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'GO',
    );

    return $form;
}

function eduerp_transaction_init(){
	//dsm(get_fee_items(955));
	
	$data = array(
		'code' => 'UNIB',
		'digest' => '9EF3FD4D2115DA62F0FA83F25E5F8A2F',
		'amount' => 0.0,
		'identifier' => '',
		'fees' => array(
			'fees' => array(
				'status' => 'pending',
				'timeout' => 10,
				),
			'hostel' => array(
				'status' => $arg1->order_status,
				'timeout' => 20,
			),
		)
	);
	
	$uri = 'http://banker:banker@127.0.0.1:8000/api/transaction/add';
					
	/*try {
		$httpclient = new HttpClient();
		$result = $httpclient->post($uri, $data);
	}
	catch(HttpClientException $httpException) {
	}*/
	
	$uri['user'] = variable_get('edupay_user', '');
	$uri['pass'] = variable_get('edupay_pass', '');
	
	//$header = drupal_set_header('Content-Type: application/json');
	$header = array('Content-Type' => 'application/x-www-form-urlencoded');
	$method = 'POST';
	
	//$result = drupal_http_request($uri, $header, $method, http_build_query($data, '', '&'));
	
	// if result->code is 200, parse the response and store tpin.
	/*if($result->code == 200){
		dsm($result);
	}else {
		dsm($result);
		drupal_set_message(t('Oooops! Something went wrong! We are unable to process your transaction. Please contact bursary.'), 'error');
	}*/
						
}
