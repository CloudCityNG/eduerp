<?php
/**
 * @todo Move all codes related to payment into this module
 * @author Kayode Odeyemi
 */

/**
 * Implementation hook_menu
 * @return <type>
 */
function eduerp_transaction_perm() {
    return array('perform checkout', 'checkout hostel order');
}

/**
 * hook_menu implementation
 */
function eduerp_transaction_menu() {
    $items = array();
    /*$items['student/checkout'] = array(
        'title' => t('Confirm reservation'),
        'description' => 'Display confirmation about allocation and perform checkout',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('eduerp_transaction_checkout_form'),
        'access callback' => 'user_access',
        'access arguments' => array('perform checkout'),
        'type' => MENU_CALLBACK,
    );

    $items['student/hostelreservation/cart/checkout'] = array(
        'title' => t('Checkout your order'),
        'description' => 'Checkout hostel reservation order',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('student_hostelreservation_checkout'),
        'access callback' => 'user_access',
        'access arguments' => array('checkout hostel order'),
        'type' => MENU_CALLBACK,
    );*/
    return $items;
}

/*
 * hook_theme implementation
 */
function eduerp_transaction_theme() {

    $path = drupal_get_path('module', 'eduerp_transaction');
    require_once "./$path/theme.inc";

    $base = array(
        'file' => 'theme.inc',
        'path' => "$path",
    );

    $theme['eduerp_transaction_display_reservation_info'] = $base + array(
        'arguments' => array(),
    );
    /*$theme['tallybill_vertical_tabs'] = $base + array(
        'arguments' => array('bank_account' => NULL, 'type' => 'savings', 'form' => NULL),
        'template' => 'tallybill-vertical-tabs',
    );*/

    return $theme;
}

/*
 * Displays reservation information as well as perform checkout functions
 */
function eduerp_transaction_checkout_form(&$form_state) {
    //$form['#theme'] = theme('');
    global $user, $EDUERPstudentInitiated;

    $path = drupal_get_path('module', 'hostel_allocation');
    include_once "./$path/hostel_allocation.module";

    $student_profile = new UserProfile($user->uid);
    //hostel_allocation_direct_room_reservation($user->uid);
    (object) $student_hostel_reservation;
    $output = '';

    //uc_cart_add_item($nid, $qty = 1, $data = NULL, $cid = NULL, $msg = TRUE, $check_redirect = TRUE, $rebuild = TRUE);
    if(module_exists('hostel_allocation')) {
        drupal_set_message('hostel_allocation exits');
        $student_hostel_reservation = module_invoke('get_reservation_info', $user->uid);
        dsm($student_hostel_reservation);
        //dsm(module_invoke('get_reservation_info', $EDUERPstudentInitiated));
        dsm(module_invoke('hostel_allocation', 'get_reservation_info', 955));
        dsm(get_reservation_info($user->uid));
    }
    if(!empty($student_hostel_reservation)) {
        //$output .= $student_hostel_reservation->hostel_name;
    }
    //$form['#theme'] = theme('eduerp_transaction_display_reservation_info', $bank_account, $type);
    //$form['#theme'] = theme('item_list', $output);

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'GO',
    );

    return $form;
}
/*
 * hook_form_alter implementation
 */
function eduerp_transaction_form_alter(&$form, $form_state, $form_id) {
    if($form_id == 'hostel_allocation_reports_switch_form') {

    }

    // retrieve the selected hostel name item
    $selected_hostel_name = '';

    // retrieve ubercart price for each hostels.
    // select sell_price from uc_product where nid = {selected_hostel_name_nid}[nid]
    $hostel_price = '';

    // add here a textfield that will perform valuation based on the selected shopping cart item price.

    // add here hidden fields to store the price of each items. The value of the hidden fields is passed
    // the textfield above.
}


function eduerp_transaction_menu_alter(&$callbacks) {
    //views_menu_alter(&$calbacks);
    // if func_exists
    //dsm($callbacks);

    // find /cart in the $callback

    // if(empty(uc_cart_get_contents())), add
}
