<?php
/**
 * @author Kayode Odeyemi
 */

define("INVOICE_REGENERATE", "regenerate");
define("STATUS_UPDATE", "status");
define("UC_EDUPAY_BASIC_URL", 'http://banker:banker@127.0.0.1:8000/api/transaction/add'); // to be modified
define("EDUPAY_REQUEST_TOKEN_URL", "http://127.0.0.1:8000/api/oauth/token_request");
define("UC_EDUPAY_URL", 'http://127.0.0.1:8000/api/oauth/transaction/add');

// @todo Make institution retrieval a global setting
//define("", eduerp_get_institution('name'));

/**
 * Implementation of hook_perm()
 * @return <type>
 */
function eduerp_transaction_perm() {
    return array('perform checkout', 'checkout hostel order');
}

/**
 * Implementation of hook_menu()
 */
function eduerp_transaction_menu() {
    global $user;
    $uid = $user->uid;
    $items = array();
    if(module_exists('uc_eduerp_fees')) {
      $items['student/payfees'] = array(
        'title' => t('Pay fees'),
        'description' => t('Pay all type of fees'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('uc_eduerp_fees_pay_fees', $uid),
        'access arguments' => array('student course'),
        'type' => MENU_NORMAL_ITEM
      );
      $items['admin/settings/eduerp/transaction'] = array (
        'title' => 'EduERP Transaction Settings',
        'page callback' => 'eduerp_transaction_overview',
        //'page arguments' => array ('eduerp_transaction_overview'),
        'access arguments' => array('administer site configuration'), // administer_transaction
        'type' => MENU_NORMAL_ITEM,
      );
      $items['admin/settings/eduerp/transaction/overview'] = array(
        'title' => 'Overview',
        'description' => 'EduERP Transaction Settings',
        'access arguments' => array('administer site configuration'),
        'weight' => -10,
        'type' => MENU_DEFAULT_LOCAL_TASK,
        //'file' => 'uc_store.admin.inc',
      );
      $items['admin/settings/eduerp/transaction/auth/basic'] = array(
        'title' => t('Edupay Basic Auth'),
        'description' => t('Basic authentication to Edupay'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('eduerp_transaction_edupay_basic_auth'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_LOCAL_TASK,
        #'file' => 'eduerp_transaction.admin.inc'
      );
      $items['admin/settings/eduerp/transaction/oauth/consumer'] = array(
        'title' => t('Edupay Consumer'),
        'description' => t('A consumer key for authentication in Edupay'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('eduerp_transaction_edupay_auth_consumer'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_LOCAL_TASK,
        #'file' => 'eduerp_transaction.admin.inc'
      );
      $items['admin/settings/eduerp/transaction/oauth/token'] = array(
        'title' => t('Edupay Token'),
        'description' => t('Get authorization to make transaction using Edupay'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('eduerp_transaction_edupay_token_request'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_LOCAL_TASK,
        #'file' => 'eduerp_transaction.admin.inc'
      );
      $items['eduerp-transaction/token/callback'] = array(
        'page callback' => 'eduerp_transacton_token_ahah_callback',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
      );
    }
    return $items;
}

/**
 * Describes eduerp transaction as well as its links
 * to other sub-modules in it
 */
function eduerp_transaction_overview(){
  // pass
  return '';
}

/**
 * Basic authentication settings to edupay
 *
 */
function eduerp_transaction_edupay_basic_auth($form_state){
  $form['edupay_basic_auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Edupay Basic Authentication'),
    //'#collapsible' => TRUE
  );
  $form['edupay_basic_auth']['edupay_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Edupay Username'),
    '#description' => t('Enter the username for edupay authentication'),
    '#default_value' => variable_get('edupay_user', 'username')
  );
  $form['edupay_basic_auth']['edupay_pass'] = array(
    '#type' => 'password',
    '#title' => t('Edupay Password'),
    '#description' => t('Enter the password for that accompanies the username you entered above.'),
    '#default_value' => variable_get('edupay_pass', 'password')
  );
  $form['edupay_basic_auth']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  return $form;
}

function eduerp_transaction_edupay_auth_consumer($form_state) {
  $form['edupay_oauth_auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Consumer protected authentication'),
    '#collapsible' => TRUE
  );
  $form['edupay_oauth_auth']['oauth_consumer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Consumer key'),
    '#description' => t('Enter your consumer key as given by Edupay'),
    '#default_value' => variable_get('oauth_consumer_key', ''),
    '#required' => TRUE
  );
  $form['edupay_oauth_auth']['oauth_consumer_secret'] = array(
    '#type' => 'textarea',
    '#title' => t('Consumer secret'),
    '#description' => t('Enter your consumer secret as given by Edupay'),
    '#default_value' => variable_get('oauth_consumer_secret', '')
  );
  return system_settings_form($form);
}

function eduerp_transaction_edupay_token_request(&$form_state) {
  $form['#cache'] = TRUE;
  $form['edupay_oauth_token'] = array(
    '#type' => 'fieldset',
    '#title' => t('Consumer token for secured request'),
    '#collapsible' => TRUE
  );
  $form['edupay_oauth_token']['token_buttons'] = array();
  /*$form['edupay_oauth_token']['token_buttons']['eduerp_transaction_generate_token_key'] = array(
    '#type' => 'button',
    '#value' => t('Generate token key'),
    '#submit' => array('eduerp_transaction_generate_token_key_submit'),
  );
  $form['edupay_oauth_token']['token_buttons']['eduerp_transaction_generate_token_secret'] = array(
    '#type' => 'button',
    '#value' => t('Generate token secret'),
    '#submit' => array('eduerp_transaction_generate_token_key_submit'),
  );
  $form['edupay_oauth_token']['markup'] = array(
    '#type' => 'markup',
    '#value' => t('Alternatively, get both at once'),
    '#prefix' => '<div class="eduerp-transaction-span">',
    '#suffix' => '</div>'
  );*/
  $form['edupay_oauth_token']['token_buttons']['eduerp_transaction_generate_token'] = array(
    '#type' => 'button',
    '#value' => t('Generate token'),
    '#submit' => array('eduerp_transaction_generate_token_submit'),
    '#disabled' => FALSE,
    '#ahah' => array(
      'path' => 'eduerp-transaction/token/callback',
      'wrapper' => 'edupay_oauth_token_results',
      'effect' => 'fade',
      //'method' => 'replace'
    )
  );
  $form['oauth_token_results_ahah'] = array(
    '#type' => 'markup',
    '#value' => '<div id="edupay_oauth_token_results"></div>'
  );
  /*$form['edupay_oauth_token_results'] = array(
    '#type' => 'fieldset',
    '#title' => t('Token results'),
    '#prefix' => '<div id="edupay_oauth_token_results">',
    '#suffix' => '</div>',
    '#collapsible' => FALSE,
  );*/
  //dsm($_SESSION['oauth-result-form']);

  $result = $_SESSION['oauth-result-form'];
  $fieldset = $result['edupay_oauth_token_results'];
  $token_field = $result['oauth_token'];
  $token_secret_field = $result['oauth_token_secret'];
  $submit = $result['submit'];

  // @todo: Find alternative ways to render the forms
  if(isset($result)) {
    $form['edupay_oauth_token_results'] = array(
      '#type' => $fieldset['#type'],
      '#title' => $fieldset['#title'],
      '#collapsible' => $fieldset['#collapsible']
    );
    $form['edupay_oauth_token_results']['status'] = array(
      '#type' => $result['status']['#type'],
      '#value' => $result['status']['#value'],
    );
    $form['edupay_oauth_token_results']['oauth_token'] = array(
      '#type' => $token_field['#type'],
      '#title' => $token_field['#title'],
      '#description' => $token_field['#description'],
      '#default_value' => variable_get('oauth_token', $token_field['#default_value']),
      '#value' => $token_field['#value'],
      '#disabled' => $token_field['#disabled']
    );
    /*$form['edupay_oauth_token_results']['oauth_token_secret'] = array(
      '#type' => $token_secret_field['#type'],
      '#title' => $token_secret_field['#title'],
      '#description' => $token_secret_field['#description'],
      '#default_value' => $token_secret_field['#default_value'],
      '#value' => $token_secret_field['#value']
    );*/
    $form['edupay_oauth_token_results']['submit'] = array(
      '#type' => $submit['#type'],
      '#value' => $submit['#value'],
      //'#submit' => array_shift($submit['#submit'])
      '#submit' => $submit['#submit']
    );
  }
  //dsm($form);
  return $form;
}

/**
 * AHAH Submit callback to make request for a token
 *
 *
 */
function eduerp_transacton_token_ahah_callback() {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  drupal_process_form($form_id, $form, $form_state);

  // send a token request to edupay
  // agrhhh. Don't like this
  module_load_include('inc', 'eduerp', 'eduerp.admin');
  $institution = eduerp_get_institution('name');
  $header = array('Content-Type' => 'application/x-www-form-urlencoded');
  $params = array(
    'oauth_consumer_key' => variable_get('oauth_consumer_key', ''),
    'institution_name' => $institution->name,
    'institution_code' => $institution->code
  );

  $token_url = variable_get('uc_edupay_config_host', TRUE) ? variable_get('uc_edupay_token_url', '') : EDUPAY_REQUEST_TOKEN_URL;

  $result = drupal_http_request($token_url, $header, 'POST', http_build_query($params, '', '&'));
  $code = $result->code;
  if($result->headers['Content-Type'] == 'application/json') {
    $response = json_decode($result->data);
    if($response->status == 406){
      $result->code = 406;
    }
    if($response->status == 401 or $response->status == 403){
      $result->code = 401;
    }
  }

  // parse the response
  switch($code) {
    case 200:
      $token_access = $response->token_access;
      //$token_secret = $response->token_secret;

      $form['test'] = array(
        '#type' => 'textfield',
        '#title' => 'test',
        '#default_value' => 'hey',
        '#value' => 'sup'
      );
      // @todo: take this through drupal_get_form and form_set_cache
      $form['edupay_oauth_token_results'] = array(
        '#type' => 'fieldset',
        '#title' => t('Token results'),
        '#collapsible' => FALSE,
      );
      $form['edupay_oauth_token_results']['status'] = array(
        '#type' => 'markup',
        '#value' => '<div class="messages status">' . t('Token request successful. Please make sure you hit the save button to prevent data loss.') . '</div>'
      );
      $form['edupay_oauth_token_results']['textfield']['oauth_token'] = array(
        '#type' => 'textfield',
        '#title' => t('Token access'),
        '#description' => t('Your generated token'),
        '#default_value' => variable_get('oauth_token', ''),
        '#value' => $token_access,
        '#disabled' => TRUE
      );
      /*$form['edupay_oauth_token_results']['textfield']['oauth_token_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('Token secret'),
        '#default_value' => variable_get('oauth_token_secret', ''),
        '#value' => 'sup'
      );*/
      $form['edupay_oauth_token_results']['token']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        //'#submit' => array('eduerp_transaction_token_result_submit'),
        '#submit' => system_settings_form_submit($form, $form_state)
      );
      if(!isset($_SESSION['oauth-result-form'])) {
        //$output = drupal_render($form['test']);
        $output .= drupal_render($form['edupay_oauth_token_results']);
        $output .= drupal_render($form['edupay_oauth_token_results']['status']);
        $output .= drupal_render($form['edupay_oauth_token_results']['textfield']['oauth_token']);
        //$output .= drupal_render($form['edupay_oauth_token_results']['textfield']['oauth_token_secret']);
        $output .= drupal_render($form['edupay_oauth_token_results']['token']['submit']);

        $elements = array(
          'edupay_oauth_token_results' => $form['edupay_oauth_token_results'],
          'oauth_token' => $form['edupay_oauth_token_results']['textfield']['oauth_token'],
          //'oauth_token_secret' => $form['edupay_oauth_token_results']['textfield']['oauth_token_secret'],
          'submit' => $form['edupay_oauth_token_results']['token']['submit']
        );
        $_SESSION['oauth-result-form'] = $elements;
        watchdog('eduerp_transaction', t('Token request successful on @institution. Status code: @code, Status error message: @error', array('@institution' => $institution->name, '@code' => $code, '@error' => $result->status_message)));
      } else {
        //$_SESSION['oauth-result-form'] = array();
        unset($_SESSION['oauth-result-form']);
        $output = array();
      }
      break;
    case 500:
      drupal_set_message(t('Sorry, something went wrong with the request'), 'error');
      watchdog('eduerp_transaction', t('Token request failed on @institution. Status code: @code, Status error message: @error', array('@institution' => $institution->name, '@code' => $code, '@error' => $result->status_message)), WATCHDOG_ERROR);
    case 401:
      drupal_set_message(t('Sorry, your institution will need to be authorized. Please contact administrator'), 'error');
      watchdog('eduerp_transaction', t('Token request failed on @institution. Status code: @code, Status error message: @error', array('@institution' => $institution->name, '@code' => $code, '@error' => $result->status_message)), WATCHDOG_ERROR);
      break;
    case 406:
      drupal_set_message(t('Sorry, your institution already made a valid request. Please contact administrator'), 'error');
      watchdog('eduerp_transaction', t('Token request failed on @institution. Status code: @code, Status error message: @error', array('@institution' => $institution->name, '@code' => $code, '@error' => $result->status_message)), WATCHDOG_ERROR);
      break;

    default:
      watchdog('eduerp_transaction', t('Token request failed on @institution. Status code: @code, Status error message: @error', array('@institution' => $institution->name, '@code' => $code, '@error' => $result->status_message)), WATCHDOG_WARNING);
      break;
  }

  return drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * A form build that results from an AHAH callback
 *
 * @todo To be used in place of session['oauth-result-form'] in
 * next release version
 */
function eduerp_transaction_oauth_result_form($form_state) {
  // help me
}

/**
 * Submit callback to save token results
 *
 */
function eduerp_transaction_token_result_submit($form, &$form_state) {
  return system_settings_form($form);
}
/**
 * Submit callback to make request for a token
 *
 */
function eduerp_transaction_generate_token_submit($form, &$form_state) {
  switch($form_state['values']['op']) {
    case t('Generate token'):
      $form_state['submitted'] = TRUE;
  }
}

/**
 * Implementation of hook_help().
 */
function eduerp_transaction_help($path, $arg) {
  switch ($path) {
    case 'admin/help#eduerp_transaction':
      $output = file_get_contents(drupal_get_path('module', 'eduerp_transaction') .'/README.txt');
      return module_exists('markdown') ? filter_xss_admin(module_invoke('markdown', 'filter', 'process', 0, -1, $output)) : '<pre>'. check_plain($output) .'</pre>';
    case 'admin/settings/eduerp/transaction':
      return theme('eduerp_transaction_overview');
  }
}

/*
 * hook_theme implementation
 */
function eduerp_transaction_theme() {

    $path = drupal_get_path('module', 'eduerp_transaction');
    require_once "./$path/theme.inc";

    $base = array(
        'file' => 'theme.inc',
        'path' => "$path",
    );

    $theme['eduerp_transaction_overview'] = $base + array(
        'arguments' => array(),
    );
    return $theme;
}

/*
 * Displays reservation information as well as perform checkout functions
 */
function eduerp_transaction_checkout_form(&$form_state) {
    global $user, $EDUERPstudentInitiated;

    $path = drupal_get_path('module', 'hostel_allocation');
    include_once "./$path/hostel_allocation.module";

    $student_profile = new UserProfile($user->uid);
    //hostel_allocation_direct_room_reservation($user->uid);
    (object) $student_hostel_reservation;
    $output = '';

    //uc_cart_add_item($nid, $qty = 1, $data = NULL, $cid = NULL, $msg = TRUE, $check_redirect = TRUE, $rebuild = TRUE);
    if(module_exists('hostel_allocation')) {
        drupal_set_message('hostel_allocation exits');
        $student_hostel_reservation = module_invoke('get_reservation_info', $user->uid);
    }
    if(!empty($student_hostel_reservation)) {
        //$output .= $student_hostel_reservation->hostel_name;
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'GO',
    );

    return $form;
}

/**
 * Implements hook_form_ID_alter
 *
 */
function eduerp_transaction_form_eduerp_transaction_edupay_token_request_alter(&$form, $form_state) {
  if(isset($_SESSION['oauth-result-form'])){
    $form['edupay_oauth_token']['token_buttons']['eduerp_transaction_generate_token']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_init
 *
 */
function eduerp_transaction_init(){
}
